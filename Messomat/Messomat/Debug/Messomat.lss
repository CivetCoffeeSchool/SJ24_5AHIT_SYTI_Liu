
Messomat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00001126  000011da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001126  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  0080015c  0080015c  00001236  2**0
                  ALLOC
  3 .eeprom       00000016  00810000  00810000  00001236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001a8  00000000  00000000  000012e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001bf5  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ca9  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001134  00000000  00000000  00003d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000408  00000000  00000000  00004e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000728  00000000  00000000  0000526c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000127b  00000000  00000000  00005994  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000148  00000000  00000000  00006c0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_18>
      4c:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e2       	ldi	r30, 0x26	; 38
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 35       	cpi	r26, 0x5C	; 92
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e5       	ldi	r26, 0x5C	; 92
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3d       	cpi	r26, 0xDD	; 221
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <main>
      9e:	0c 94 91 08 	jmp	0x1122	; 0x1122 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <dht_getdata>:
#elif DHT_FLOAT == 0
int8_t dht_gethumidity(int8_t *humidity) {
	int8_t temperature = 0;
#endif
	return dht_getdata(&temperature, humidity);
}
      a6:	1f 93       	push	r17
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	00 d0       	rcall	.+0      	; 0xae <dht_getdata+0x8>
      ae:	00 d0       	rcall	.+0      	; 0xb0 <dht_getdata+0xa>
      b0:	1f 92       	push	r1
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	fc 01       	movw	r30, r24
      b8:	9e 01       	movw	r18, r28
      ba:	2f 5f       	subi	r18, 0xFF	; 255
      bc:	3f 4f       	sbci	r19, 0xFF	; 255
      be:	85 e0       	ldi	r24, 0x05	; 5
      c0:	d9 01       	movw	r26, r18
      c2:	1d 92       	st	X+, r1
      c4:	8a 95       	dec	r24
      c6:	e9 f7       	brne	.-6      	; 0xc2 <dht_getdata+0x1c>
      c8:	87 b1       	in	r24, 0x07	; 7
      ca:	81 60       	ori	r24, 0x01	; 1
      cc:	87 b9       	out	0x07, r24	; 7
      ce:	98 b1       	in	r25, 0x08	; 8
      d0:	91 60       	ori	r25, 0x01	; 1
      d2:	98 b9       	out	0x08, r25	; 8
      d4:	bf ef       	ldi	r27, 0xFF	; 255
      d6:	21 ee       	ldi	r18, 0xE1	; 225
      d8:	84 e0       	ldi	r24, 0x04	; 4
      da:	b1 50       	subi	r27, 0x01	; 1
      dc:	20 40       	sbci	r18, 0x00	; 0
      de:	80 40       	sbci	r24, 0x00	; 0
      e0:	e1 f7       	brne	.-8      	; 0xda <dht_getdata+0x34>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <dht_getdata+0x3e>
      e4:	00 00       	nop
      e6:	98 b1       	in	r25, 0x08	; 8
      e8:	9e 7f       	andi	r25, 0xFE	; 254
      ea:	98 b9       	out	0x08, r25	; 8
      ec:	9f ef       	ldi	r25, 0xFF	; 255
      ee:	a0 ee       	ldi	r26, 0xE0	; 224
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	91 50       	subi	r25, 0x01	; 1
      f4:	a0 40       	sbci	r26, 0x00	; 0
      f6:	b0 40       	sbci	r27, 0x00	; 0
      f8:	e1 f7       	brne	.-8      	; 0xf2 <dht_getdata+0x4c>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <dht_getdata+0x56>
      fc:	00 00       	nop
      fe:	98 b1       	in	r25, 0x08	; 8
     100:	91 60       	ori	r25, 0x01	; 1
     102:	98 b9       	out	0x08, r25	; 8
     104:	97 b1       	in	r25, 0x07	; 7
     106:	9e 7f       	andi	r25, 0xFE	; 254
     108:	97 b9       	out	0x07, r25	; 7
     10a:	25 ed       	ldi	r18, 0xD5	; 213
     10c:	2a 95       	dec	r18
     10e:	f1 f7       	brne	.-4      	; 0x10c <dht_getdata+0x66>
     110:	00 00       	nop
     112:	30 99       	sbic	0x06, 0	; 6
     114:	65 c0       	rjmp	.+202    	; 0x1e0 <dht_getdata+0x13a>
     116:	8f e3       	ldi	r24, 0x3F	; 63
     118:	91 e0       	ldi	r25, 0x01	; 1
     11a:	01 97       	sbiw	r24, 0x01	; 1
     11c:	f1 f7       	brne	.-4      	; 0x11a <dht_getdata+0x74>
     11e:	00 c0       	rjmp	.+0      	; 0x120 <dht_getdata+0x7a>
     120:	00 00       	nop
     122:	30 9b       	sbis	0x06, 0	; 6
     124:	5f c0       	rjmp	.+190    	; 0x1e4 <dht_getdata+0x13e>
     126:	af e3       	ldi	r26, 0x3F	; 63
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	11 97       	sbiw	r26, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <dht_getdata+0x84>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <dht_getdata+0x8a>
     130:	00 00       	nop
     132:	10 e0       	ldi	r17, 0x00	; 0
     134:	34 c0       	rjmp	.+104    	; 0x19e <dht_getdata+0xf8>
     136:	2f 5f       	subi	r18, 0xFF	; 255
     138:	3f 4f       	sbci	r19, 0xFF	; 255
     13a:	29 3c       	cpi	r18, 0xC9	; 201
     13c:	31 05       	cpc	r19, r1
     13e:	18 f0       	brcs	.+6      	; 0x146 <dht_getdata+0xa0>
     140:	53 c0       	rjmp	.+166    	; 0x1e8 <dht_getdata+0x142>
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	30 9b       	sbis	0x06, 0	; 6
     148:	f6 cf       	rjmp	.-20     	; 0x136 <dht_getdata+0x90>
     14a:	b0 ea       	ldi	r27, 0xA0	; 160
     14c:	ba 95       	dec	r27
     14e:	f1 f7       	brne	.-4      	; 0x14c <dht_getdata+0xa6>
     150:	30 9b       	sbis	0x06, 0	; 6
     152:	0c c0       	rjmp	.+24     	; 0x16c <dht_getdata+0xc6>
     154:	47 e0       	ldi	r20, 0x07	; 7
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	49 1b       	sub	r20, r25
     15a:	51 09       	sbc	r21, r1
     15c:	21 e0       	ldi	r18, 0x01	; 1
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	02 c0       	rjmp	.+4      	; 0x166 <dht_getdata+0xc0>
     162:	22 0f       	add	r18, r18
     164:	33 1f       	adc	r19, r19
     166:	4a 95       	dec	r20
     168:	e2 f7       	brpl	.-8      	; 0x162 <dht_getdata+0xbc>
     16a:	82 2b       	or	r24, r18
     16c:	20 e0       	ldi	r18, 0x00	; 0
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	05 c0       	rjmp	.+10     	; 0x17c <dht_getdata+0xd6>
     172:	2f 5f       	subi	r18, 0xFF	; 255
     174:	3f 4f       	sbci	r19, 0xFF	; 255
     176:	29 3c       	cpi	r18, 0xC9	; 201
     178:	31 05       	cpc	r19, r1
     17a:	c0 f5       	brcc	.+112    	; 0x1ec <dht_getdata+0x146>
     17c:	30 99       	sbic	0x06, 0	; 6
     17e:	f9 cf       	rjmp	.-14     	; 0x172 <dht_getdata+0xcc>
     180:	9f 5f       	subi	r25, 0xFF	; 255
     182:	02 c0       	rjmp	.+4      	; 0x188 <dht_getdata+0xe2>
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	98 30       	cpi	r25, 0x08	; 8
     18a:	d8 f2       	brcs	.-74     	; 0x142 <dht_getdata+0x9c>
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	2c 0f       	add	r18, r28
     192:	3d 1f       	adc	r19, r29
     194:	21 0f       	add	r18, r17
     196:	31 1d       	adc	r19, r1
     198:	d9 01       	movw	r26, r18
     19a:	8c 93       	st	X, r24
     19c:	1f 5f       	subi	r17, 0xFF	; 255
     19e:	15 30       	cpi	r17, 0x05	; 5
     1a0:	88 f3       	brcs	.-30     	; 0x184 <dht_getdata+0xde>
     1a2:	87 b1       	in	r24, 0x07	; 7
     1a4:	81 60       	ori	r24, 0x01	; 1
     1a6:	87 b9       	out	0x07, r24	; 7
     1a8:	88 b1       	in	r24, 0x08	; 8
     1aa:	81 60       	ori	r24, 0x01	; 1
     1ac:	88 b9       	out	0x08, r24	; 8
     1ae:	bf ef       	ldi	r27, 0xFF	; 255
     1b0:	21 ee       	ldi	r18, 0xE1	; 225
     1b2:	84 e0       	ldi	r24, 0x04	; 4
     1b4:	b1 50       	subi	r27, 0x01	; 1
     1b6:	20 40       	sbci	r18, 0x00	; 0
     1b8:	80 40       	sbci	r24, 0x00	; 0
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <dht_getdata+0x10e>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <dht_getdata+0x118>
     1be:	00 00       	nop
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	9a 81       	ldd	r25, Y+2	; 0x02
     1c4:	3b 81       	ldd	r19, Y+3	; 0x03
     1c6:	2c 81       	ldd	r18, Y+4	; 0x04
     1c8:	89 0f       	add	r24, r25
     1ca:	83 0f       	add	r24, r19
     1cc:	82 0f       	add	r24, r18
     1ce:	9d 81       	ldd	r25, Y+5	; 0x05
     1d0:	89 13       	cpse	r24, r25
     1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <dht_getdata+0x14a>
     1d4:	30 83       	st	Z, r19
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	db 01       	movw	r26, r22
     1da:	8c 93       	st	X, r24
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	09 c0       	rjmp	.+18     	; 0x1f2 <dht_getdata+0x14c>
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <dht_getdata+0x14c>
     1e4:	8e ef       	ldi	r24, 0xFE	; 254
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <dht_getdata+0x14c>
     1e8:	8d ef       	ldi	r24, 0xFD	; 253
     1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <dht_getdata+0x14c>
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <dht_getdata+0x14c>
     1f0:	8b ef       	ldi	r24, 0xFB	; 251
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	08 95       	ret

00000204 <dht_gettemperaturehumidity>:
#if DHT_FLOAT == 1
int8_t dht_gettemperaturehumidity(float *temperature, float *humidity) {
#elif DHT_FLOAT == 0
	int8_t dht_gettemperaturehumidity(int8_t *temperature, int8_t *humidity) {
#endif
	return dht_getdata(temperature, humidity);
     204:	0e 94 53 00 	call	0xa6	; 0xa6 <dht_getdata>
}
     208:	08 95       	ret

0000020a <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     20a:	88 b1       	in	r24, 0x08	; 8
     20c:	88 60       	ori	r24, 0x08	; 8
     20e:	88 b9       	out	0x08, r24	; 8
     210:	85 e0       	ldi	r24, 0x05	; 5
     212:	8a 95       	dec	r24
     214:	f1 f7       	brne	.-4      	; 0x212 <toggle_e+0x8>
     216:	00 00       	nop
     218:	88 b1       	in	r24, 0x08	; 8
     21a:	87 7f       	andi	r24, 0xF7	; 247
     21c:	88 b9       	out	0x08, r24	; 8
     21e:	08 95       	ret

00000220 <lcd_write>:
     220:	cf 93       	push	r28
     222:	c8 2f       	mov	r28, r24
     224:	66 23       	and	r22, r22
     226:	21 f0       	breq	.+8      	; 0x230 <lcd_write+0x10>
     228:	88 b1       	in	r24, 0x08	; 8
     22a:	80 62       	ori	r24, 0x20	; 32
     22c:	88 b9       	out	0x08, r24	; 8
     22e:	03 c0       	rjmp	.+6      	; 0x236 <lcd_write+0x16>
     230:	88 b1       	in	r24, 0x08	; 8
     232:	8f 7d       	andi	r24, 0xDF	; 223
     234:	88 b9       	out	0x08, r24	; 8
     236:	88 b1       	in	r24, 0x08	; 8
     238:	8f 7e       	andi	r24, 0xEF	; 239
     23a:	88 b9       	out	0x08, r24	; 8
     23c:	8a b1       	in	r24, 0x0a	; 10
     23e:	80 61       	ori	r24, 0x10	; 16
     240:	8a b9       	out	0x0a, r24	; 10
     242:	8a b1       	in	r24, 0x0a	; 10
     244:	80 62       	ori	r24, 0x20	; 32
     246:	8a b9       	out	0x0a, r24	; 10
     248:	8a b1       	in	r24, 0x0a	; 10
     24a:	80 64       	ori	r24, 0x40	; 64
     24c:	8a b9       	out	0x0a, r24	; 10
     24e:	8a b1       	in	r24, 0x0a	; 10
     250:	80 68       	ori	r24, 0x80	; 128
     252:	8a b9       	out	0x0a, r24	; 10
     254:	8b b1       	in	r24, 0x0b	; 11
     256:	8f 77       	andi	r24, 0x7F	; 127
     258:	8b b9       	out	0x0b, r24	; 11
     25a:	8b b1       	in	r24, 0x0b	; 11
     25c:	8f 7b       	andi	r24, 0xBF	; 191
     25e:	8b b9       	out	0x0b, r24	; 11
     260:	8b b1       	in	r24, 0x0b	; 11
     262:	8f 7d       	andi	r24, 0xDF	; 223
     264:	8b b9       	out	0x0b, r24	; 11
     266:	8b b1       	in	r24, 0x0b	; 11
     268:	8f 7e       	andi	r24, 0xEF	; 239
     26a:	8b b9       	out	0x0b, r24	; 11
     26c:	cc 23       	and	r28, r28
     26e:	1c f4       	brge	.+6      	; 0x276 <lcd_write+0x56>
     270:	8b b1       	in	r24, 0x0b	; 11
     272:	80 68       	ori	r24, 0x80	; 128
     274:	8b b9       	out	0x0b, r24	; 11
     276:	c6 ff       	sbrs	r28, 6
     278:	03 c0       	rjmp	.+6      	; 0x280 <lcd_write+0x60>
     27a:	8b b1       	in	r24, 0x0b	; 11
     27c:	80 64       	ori	r24, 0x40	; 64
     27e:	8b b9       	out	0x0b, r24	; 11
     280:	c5 ff       	sbrs	r28, 5
     282:	03 c0       	rjmp	.+6      	; 0x28a <lcd_write+0x6a>
     284:	8b b1       	in	r24, 0x0b	; 11
     286:	80 62       	ori	r24, 0x20	; 32
     288:	8b b9       	out	0x0b, r24	; 11
     28a:	c4 ff       	sbrs	r28, 4
     28c:	03 c0       	rjmp	.+6      	; 0x294 <lcd_write+0x74>
     28e:	8b b1       	in	r24, 0x0b	; 11
     290:	80 61       	ori	r24, 0x10	; 16
     292:	8b b9       	out	0x0b, r24	; 11
     294:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     298:	8b b1       	in	r24, 0x0b	; 11
     29a:	8f 77       	andi	r24, 0x7F	; 127
     29c:	8b b9       	out	0x0b, r24	; 11
     29e:	8b b1       	in	r24, 0x0b	; 11
     2a0:	8f 7b       	andi	r24, 0xBF	; 191
     2a2:	8b b9       	out	0x0b, r24	; 11
     2a4:	8b b1       	in	r24, 0x0b	; 11
     2a6:	8f 7d       	andi	r24, 0xDF	; 223
     2a8:	8b b9       	out	0x0b, r24	; 11
     2aa:	8b b1       	in	r24, 0x0b	; 11
     2ac:	8f 7e       	andi	r24, 0xEF	; 239
     2ae:	8b b9       	out	0x0b, r24	; 11
     2b0:	c3 ff       	sbrs	r28, 3
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <lcd_write+0x9a>
     2b4:	8b b1       	in	r24, 0x0b	; 11
     2b6:	80 68       	ori	r24, 0x80	; 128
     2b8:	8b b9       	out	0x0b, r24	; 11
     2ba:	c2 ff       	sbrs	r28, 2
     2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <lcd_write+0xa4>
     2be:	8b b1       	in	r24, 0x0b	; 11
     2c0:	80 64       	ori	r24, 0x40	; 64
     2c2:	8b b9       	out	0x0b, r24	; 11
     2c4:	c1 ff       	sbrs	r28, 1
     2c6:	03 c0       	rjmp	.+6      	; 0x2ce <lcd_write+0xae>
     2c8:	8b b1       	in	r24, 0x0b	; 11
     2ca:	80 62       	ori	r24, 0x20	; 32
     2cc:	8b b9       	out	0x0b, r24	; 11
     2ce:	c0 ff       	sbrs	r28, 0
     2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <lcd_write+0xb8>
     2d2:	8b b1       	in	r24, 0x0b	; 11
     2d4:	80 61       	ori	r24, 0x10	; 16
     2d6:	8b b9       	out	0x0b, r24	; 11
     2d8:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     2dc:	8b b1       	in	r24, 0x0b	; 11
     2de:	80 61       	ori	r24, 0x10	; 16
     2e0:	8b b9       	out	0x0b, r24	; 11
     2e2:	8b b1       	in	r24, 0x0b	; 11
     2e4:	80 62       	ori	r24, 0x20	; 32
     2e6:	8b b9       	out	0x0b, r24	; 11
     2e8:	8b b1       	in	r24, 0x0b	; 11
     2ea:	80 64       	ori	r24, 0x40	; 64
     2ec:	8b b9       	out	0x0b, r24	; 11
     2ee:	8b b1       	in	r24, 0x0b	; 11
     2f0:	80 68       	ori	r24, 0x80	; 128
     2f2:	8b b9       	out	0x0b, r24	; 11
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <lcd_read>:
     2f8:	88 23       	and	r24, r24
     2fa:	21 f0       	breq	.+8      	; 0x304 <lcd_read+0xc>
     2fc:	88 b1       	in	r24, 0x08	; 8
     2fe:	80 62       	ori	r24, 0x20	; 32
     300:	88 b9       	out	0x08, r24	; 8
     302:	03 c0       	rjmp	.+6      	; 0x30a <lcd_read+0x12>
     304:	88 b1       	in	r24, 0x08	; 8
     306:	8f 7d       	andi	r24, 0xDF	; 223
     308:	88 b9       	out	0x08, r24	; 8
     30a:	88 b1       	in	r24, 0x08	; 8
     30c:	80 61       	ori	r24, 0x10	; 16
     30e:	88 b9       	out	0x08, r24	; 8
     310:	8a b1       	in	r24, 0x0a	; 10
     312:	8f 7e       	andi	r24, 0xEF	; 239
     314:	8a b9       	out	0x0a, r24	; 10
     316:	8a b1       	in	r24, 0x0a	; 10
     318:	8f 7d       	andi	r24, 0xDF	; 223
     31a:	8a b9       	out	0x0a, r24	; 10
     31c:	8a b1       	in	r24, 0x0a	; 10
     31e:	8f 7b       	andi	r24, 0xBF	; 191
     320:	8a b9       	out	0x0a, r24	; 10
     322:	8a b1       	in	r24, 0x0a	; 10
     324:	8f 77       	andi	r24, 0x7F	; 127
     326:	8a b9       	out	0x0a, r24	; 10
     328:	88 b1       	in	r24, 0x08	; 8
     32a:	88 60       	ori	r24, 0x08	; 8
     32c:	88 b9       	out	0x08, r24	; 8
     32e:	85 e0       	ldi	r24, 0x05	; 5
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <lcd_read+0x38>
     334:	00 00       	nop
     336:	4c 99       	sbic	0x09, 4	; 9
     338:	02 c0       	rjmp	.+4      	; 0x33e <lcd_read+0x46>
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	01 c0       	rjmp	.+2      	; 0x340 <lcd_read+0x48>
     33e:	80 e1       	ldi	r24, 0x10	; 16
     340:	4d 99       	sbic	0x09, 5	; 9
     342:	80 62       	ori	r24, 0x20	; 32
     344:	4e 99       	sbic	0x09, 6	; 9
     346:	80 64       	ori	r24, 0x40	; 64
     348:	4f 99       	sbic	0x09, 7	; 9
     34a:	80 68       	ori	r24, 0x80	; 128
     34c:	98 b1       	in	r25, 0x08	; 8
     34e:	97 7f       	andi	r25, 0xF7	; 247
     350:	98 b9       	out	0x08, r25	; 8
     352:	95 e0       	ldi	r25, 0x05	; 5
     354:	9a 95       	dec	r25
     356:	f1 f7       	brne	.-4      	; 0x354 <lcd_read+0x5c>
     358:	00 00       	nop
     35a:	98 b1       	in	r25, 0x08	; 8
     35c:	98 60       	ori	r25, 0x08	; 8
     35e:	98 b9       	out	0x08, r25	; 8
     360:	95 e0       	ldi	r25, 0x05	; 5
     362:	9a 95       	dec	r25
     364:	f1 f7       	brne	.-4      	; 0x362 <lcd_read+0x6a>
     366:	00 00       	nop
     368:	4c 99       	sbic	0x09, 4	; 9
     36a:	81 60       	ori	r24, 0x01	; 1
     36c:	4d 99       	sbic	0x09, 5	; 9
     36e:	82 60       	ori	r24, 0x02	; 2
     370:	4e 99       	sbic	0x09, 6	; 9
     372:	84 60       	ori	r24, 0x04	; 4
     374:	4f 99       	sbic	0x09, 7	; 9
     376:	88 60       	ori	r24, 0x08	; 8
     378:	98 b1       	in	r25, 0x08	; 8
     37a:	97 7f       	andi	r25, 0xF7	; 247
     37c:	98 b9       	out	0x08, r25	; 8
     37e:	08 95       	ret

00000380 <lcd_waitbusy>:
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_read>
     386:	88 23       	and	r24, r24
     388:	dc f3       	brlt	.-10     	; 0x380 <lcd_waitbusy>
     38a:	85 e1       	ldi	r24, 0x15	; 21
     38c:	8a 95       	dec	r24
     38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_waitbusy+0xc>
     390:	00 00       	nop
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_read>
     398:	08 95       	ret

0000039a <lcd_command>:
     39a:	cf 93       	push	r28
     39c:	c8 2f       	mov	r28, r24
     39e:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_waitbusy>
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	8c 2f       	mov	r24, r28
     3a6:	0e 94 10 01 	call	0x220	; 0x220 <lcd_write>
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <lcd_gotoxy>:
     3ae:	61 11       	cpse	r22, r1
     3b0:	04 c0       	rjmp	.+8      	; 0x3ba <lcd_gotoxy+0xc>
     3b2:	80 58       	subi	r24, 0x80	; 128
     3b4:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
     3b8:	08 95       	ret
     3ba:	80 54       	subi	r24, 0x40	; 64
     3bc:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
     3c0:	08 95       	ret

000003c2 <lcd_clrscr>:
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
     3c8:	08 95       	ret

000003ca <lcd_putc>:
     3ca:	cf 93       	push	r28
     3cc:	c8 2f       	mov	r28, r24
     3ce:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_waitbusy>
     3d2:	ca 30       	cpi	r28, 0x0A	; 10
     3d4:	49 f4       	brne	.+18     	; 0x3e8 <lcd_putc+0x1e>
     3d6:	80 34       	cpi	r24, 0x40	; 64
     3d8:	10 f4       	brcc	.+4      	; 0x3de <lcd_putc+0x14>
     3da:	80 e4       	ldi	r24, 0x40	; 64
     3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <lcd_putc+0x16>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	80 58       	subi	r24, 0x80	; 128
     3e2:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <lcd_putc+0x26>
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	8c 2f       	mov	r24, r28
     3ec:	0e 94 10 01 	call	0x220	; 0x220 <lcd_write>
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <lcd_puts>:
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	fc 01       	movw	r30, r24
     3fa:	03 c0       	rjmp	.+6      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3fc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_putc>
     400:	fe 01       	movw	r30, r28
     402:	ef 01       	movw	r28, r30
     404:	21 96       	adiw	r28, 0x01	; 1
     406:	80 81       	ld	r24, Z
     408:	81 11       	cpse	r24, r1
     40a:	f8 cf       	rjmp	.-16     	; 0x3fc <lcd_puts+0x8>
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     412:	cf 93       	push	r28
     414:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     416:	87 b1       	in	r24, 0x07	; 7
     418:	80 62       	ori	r24, 0x20	; 32
     41a:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     41c:	87 b1       	in	r24, 0x07	; 7
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     422:	87 b1       	in	r24, 0x07	; 7
     424:	88 60       	ori	r24, 0x08	; 8
     426:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     428:	8a b1       	in	r24, 0x0a	; 10
     42a:	80 61       	ori	r24, 0x10	; 16
     42c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     42e:	8a b1       	in	r24, 0x0a	; 10
     430:	80 62       	ori	r24, 0x20	; 32
     432:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     434:	8a b1       	in	r24, 0x0a	; 10
     436:	80 64       	ori	r24, 0x40	; 64
     438:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     43a:	8a b1       	in	r24, 0x0a	; 10
     43c:	80 68       	ori	r24, 0x80	; 128
     43e:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     440:	8f ef       	ldi	r24, 0xFF	; 255
     442:	99 ef       	ldi	r25, 0xF9	; 249
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <lcd_init+0x32>
     448:	00 c0       	rjmp	.+0      	; 0x44a <lcd_init+0x38>
     44a:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     44c:	8b b1       	in	r24, 0x0b	; 11
     44e:	80 62       	ori	r24, 0x20	; 32
     450:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     452:	8b b1       	in	r24, 0x0b	; 11
     454:	80 61       	ori	r24, 0x10	; 16
     456:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
     458:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     45c:	8f e1       	ldi	r24, 0x1F	; 31
     45e:	9e e4       	ldi	r25, 0x4E	; 78
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	f1 f7       	brne	.-4      	; 0x460 <lcd_init+0x4e>
     464:	00 c0       	rjmp	.+0      	; 0x466 <lcd_init+0x54>
     466:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     468:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     46c:	8f ef       	ldi	r24, 0xFF	; 255
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <lcd_init+0x5e>
     474:	00 c0       	rjmp	.+0      	; 0x476 <lcd_init+0x64>
     476:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     478:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <lcd_init+0x6e>
     484:	00 c0       	rjmp	.+0      	; 0x486 <lcd_init+0x74>
     486:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     488:	8b b1       	in	r24, 0x0b	; 11
     48a:	8f 7e       	andi	r24, 0xEF	; 239
     48c:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
     48e:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <lcd_init+0x84>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <lcd_init+0x8a>
     49c:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     49e:	88 e2       	ldi	r24, 0x28	; 40
     4a0:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     4a4:	88 e0       	ldi	r24, 0x08	; 8
     4a6:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     4aa:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     4ae:	86 e0       	ldi	r24, 0x06	; 6
     4b0:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     4b4:	8c 2f       	mov	r24, r28
     4b6:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>

}/* lcd_init */
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <timer1_init>:
volatile int8_t currentHumidity;
volatile char displayBuffer[20];
volatile char txBuffer[32];

void timer1_init(void) {		// Set Timer1 für CTC-Modus
	TCCR1B |= (1 << WGM12);		// CTC-Modus
     4be:	e1 e8       	ldi	r30, 0x81	; 129
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	88 60       	ori	r24, 0x08	; 8
     4c6:	80 83       	st	Z, r24
	OCR1A = 15624;				// 1 Sekunde bei 16 MHz und Prescaler 1024
     4c8:	88 e0       	ldi	r24, 0x08	; 8
     4ca:	9d e3       	ldi	r25, 0x3D	; 61
     4cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     4d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1 << CS12) | (1 << CS10);	// Prescaler 1024
     4d4:	80 81       	ld	r24, Z
     4d6:	85 60       	ori	r24, 0x05	; 5
     4d8:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);	// Output Compare A Interrupt aktivieren
     4da:	ef e6       	ldi	r30, 0x6F	; 111
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	82 60       	ori	r24, 0x02	; 2
     4e2:	80 83       	st	Z, r24
     4e4:	08 95       	ret

000004e6 <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
     4e6:	1f 92       	push	r1
     4e8:	0f 92       	push	r0
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	0f 92       	push	r0
     4ee:	11 24       	eor	r1, r1
     4f0:	8f 93       	push	r24
	measureTimeFlag = 1;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <measureTimeFlag>
}
     4f8:	8f 91       	pop	r24
     4fa:	0f 90       	pop	r0
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	0f 90       	pop	r0
     500:	1f 90       	pop	r1
     502:	18 95       	reti

00000504 <update_display>:

void update_display(uint8_t stopped) {
     504:	cf 93       	push	r28
     506:	c8 2f       	mov	r28, r24
	lcd_clrscr();
     508:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_clrscr>
	if(stopped) {
     50c:	cc 23       	and	r28, r28
     50e:	29 f0       	breq	.+10     	; 0x51a <update_display+0x16>
		lcd_puts("**ME gestoppt**");
     510:	85 e1       	ldi	r24, 0x15	; 21
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <lcd_puts>
     518:	5b c0       	rjmp	.+182    	; 0x5d0 <update_display+0xcc>
	} else {
		// Measurements
		sprintf(displayBuffer, "T:%dC H:%d%%", currentTemp, currentHumidity);
     51a:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <currentHumidity>
     51e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <currentTemp>
     522:	29 2f       	mov	r18, r25
     524:	09 2e       	mov	r0, r25
     526:	00 0c       	add	r0, r0
     528:	33 0b       	sbc	r19, r19
     52a:	3f 93       	push	r19
     52c:	9f 93       	push	r25
     52e:	28 2f       	mov	r18, r24
     530:	08 2e       	mov	r0, r24
     532:	00 0c       	add	r0, r0
     534:	33 0b       	sbc	r19, r19
     536:	3f 93       	push	r19
     538:	8f 93       	push	r24
     53a:	85 e2       	ldi	r24, 0x25	; 37
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	89 ec       	ldi	r24, 0xC9	; 201
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	0e 94 91 05 	call	0xb22	; 0xb22 <sprintf>
		lcd_puts(displayBuffer);
     54e:	89 ec       	ldi	r24, 0xC9	; 201
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <lcd_puts>
		
		// Fan status & interval
		lcd_gotoxy(0,1);
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_gotoxy>
		sprintf(displayBuffer, "F:%s I:%ds %s",
			fanStatus ? "ON " : "OFF",
			interval,
			connectionLost ? "ERR!" : "    ");
     55e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
		sprintf(displayBuffer, "T:%dC H:%d%%", currentTemp, currentHumidity);
		lcd_puts(displayBuffer);
		
		// Fan status & interval
		lcd_gotoxy(0,1);
		sprintf(displayBuffer, "F:%s I:%ds %s",
     562:	2d b7       	in	r18, 0x3d	; 61
     564:	3e b7       	in	r19, 0x3e	; 62
     566:	28 5f       	subi	r18, 0xF8	; 248
     568:	3f 4f       	sbci	r19, 0xFF	; 255
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	f8 94       	cli
     56e:	3e bf       	out	0x3e, r19	; 62
     570:	0f be       	out	0x3f, r0	; 63
     572:	2d bf       	out	0x3d, r18	; 61
     574:	88 23       	and	r24, r24
     576:	19 f0       	breq	.+6      	; 0x57e <update_display+0x7a>
     578:	23 e0       	ldi	r18, 0x03	; 3
     57a:	31 e0       	ldi	r19, 0x01	; 1
     57c:	02 c0       	rjmp	.+4      	; 0x582 <update_display+0x7e>
     57e:	28 e0       	ldi	r18, 0x08	; 8
     580:	31 e0       	ldi	r19, 0x01	; 1
     582:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <interval>
			fanStatus ? "ON " : "OFF",
     586:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <fanStatus>
		sprintf(displayBuffer, "T:%dC H:%d%%", currentTemp, currentHumidity);
		lcd_puts(displayBuffer);
		
		// Fan status & interval
		lcd_gotoxy(0,1);
		sprintf(displayBuffer, "F:%s I:%ds %s",
     58a:	88 23       	and	r24, r24
     58c:	19 f0       	breq	.+6      	; 0x594 <update_display+0x90>
     58e:	8d e0       	ldi	r24, 0x0D	; 13
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	02 c0       	rjmp	.+4      	; 0x598 <update_display+0x94>
     594:	81 e1       	ldi	r24, 0x11	; 17
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	3f 93       	push	r19
     59a:	2f 93       	push	r18
     59c:	1f 92       	push	r1
     59e:	4f 93       	push	r20
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	82 e3       	ldi	r24, 0x32	; 50
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	89 ec       	ldi	r24, 0xC9	; 201
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	9f 93       	push	r25
     5b2:	8f 93       	push	r24
     5b4:	0e 94 91 05 	call	0xb22	; 0xb22 <sprintf>
			fanStatus ? "ON " : "OFF",
			interval,
			connectionLost ? "ERR!" : "    ");
		lcd_puts(displayBuffer);
     5b8:	89 ec       	ldi	r24, 0xC9	; 201
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <lcd_puts>
     5c0:	8d b7       	in	r24, 0x3d	; 61
     5c2:	9e b7       	in	r25, 0x3e	; 62
     5c4:	0a 96       	adiw	r24, 0x0a	; 10
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	9e bf       	out	0x3e, r25	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	8d bf       	out	0x3d, r24	; 61
	}
}
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <send_data>:

void send_data(){
	sprintf(txBuffer, "DATE%d|HU%d|SN%d", currentTemp, currentHumidity, seqNumber);
     5d4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5d8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5dc:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <currentHumidity>
     5e0:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <currentTemp>
     5e4:	3f 93       	push	r19
     5e6:	2f 93       	push	r18
     5e8:	29 2f       	mov	r18, r25
     5ea:	09 2e       	mov	r0, r25
     5ec:	00 0c       	add	r0, r0
     5ee:	33 0b       	sbc	r19, r19
     5f0:	3f 93       	push	r19
     5f2:	9f 93       	push	r25
     5f4:	28 2f       	mov	r18, r24
     5f6:	08 2e       	mov	r0, r24
     5f8:	00 0c       	add	r0, r0
     5fa:	33 0b       	sbc	r19, r19
     5fc:	3f 93       	push	r19
     5fe:	8f 93       	push	r24
     600:	80 e4       	ldi	r24, 0x40	; 64
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	88 ea       	ldi	r24, 0xA8	; 168
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	9f 93       	push	r25
     60e:	8f 93       	push	r24
     610:	0e 94 91 05 	call	0xb22	; 0xb22 <sprintf>
	uart_putc(0x02);
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	0e 94 47 05 	call	0xa8e	; 0xa8e <uart_putc>
	uart_puts(txBuffer);
     61a:	88 ea       	ldi	r24, 0xA8	; 168
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart_puts>
	uart_putc(0x03);
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	0e 94 47 05 	call	0xa8e	; 0xa8e <uart_putc>
	retryCount++;
     628:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <retryCount>
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <retryCount>
}
     632:	8d b7       	in	r24, 0x3d	; 61
     634:	9e b7       	in	r25, 0x3e	; 62
     636:	0a 96       	adiw	r24, 0x0a	; 10
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	9e bf       	out	0x3e, r25	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	8d bf       	out	0x3d, r24	; 61
     642:	08 95       	ret

00000644 <store_in_eeprom>:


//	EEPROM: erste Stelle sag die neuest gespeicherten Daten aus, die zweite die Seriennummer
//	folgenden 10*2 positionen bilden ein Kreis
void store_in_eeprom(){
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
	uint8_t pos = eeprom_read_byte(&eepromStorage[0]);
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 44 08 	call	0x1088	; 0x1088 <eeprom_read_byte>
     652:	c8 2f       	mov	r28, r24
	if(pos >= 10) pos = 0;
     654:	8a 30       	cpi	r24, 0x0A	; 10
     656:	08 f0       	brcs	.+2      	; 0x65a <store_in_eeprom+0x16>
     658:	c0 e0       	ldi	r28, 0x00	; 0
	
	eeprom_write_byte(&eepromStorage[pos*2 + 2], currentTemp);
     65a:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <currentTemp>
     65e:	0c 2f       	mov	r16, r28
     660:	10 e0       	ldi	r17, 0x00	; 0
     662:	c8 01       	movw	r24, r16
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	80 50       	subi	r24, 0x00	; 0
     66c:	90 40       	sbci	r25, 0x00	; 0
     66e:	0e 94 4c 08 	call	0x1098	; 0x1098 <eeprom_write_byte>
	eeprom_write_byte(&eepromStorage[pos*2 + 3], currentHumidity);
     672:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <currentHumidity>
     676:	c8 01       	movw	r24, r16
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	8d 5f       	subi	r24, 0xFD	; 253
     67e:	9f 4f       	sbci	r25, 0xFF	; 255
     680:	0e 94 4c 08 	call	0x1098	; 0x1098 <eeprom_write_byte>
	eeprom_write_byte(&eepromStorage[0], pos + 1);
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	6c 0f       	add	r22, r28
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 94 4c 08 	call	0x1098	; 0x1098 <eeprom_write_byte>
	eeprom_write_byte(&eepromStorage[1], seqNumber);
     690:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     694:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 4c 08 	call	0x1098	; 0x1098 <eeprom_write_byte>

}
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	08 95       	ret

000006a8 <resend_eeprom_data>:

void resend_eeprom_data(){
     6a8:	cf 92       	push	r12
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
	uint8_t start_pos = eeprom_read_byte(&eepromStorage[0]);
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 44 08 	call	0x1088	; 0x1088 <eeprom_read_byte>
     6c0:	d8 2e       	mov	r13, r24
	uint8_t start_seq = eeprom_read_byte(&eepromStorage[1]) > 10
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 44 08 	call	0x1088	; 0x1088 <eeprom_read_byte>
     6ca:	8b 30       	cpi	r24, 0x0B	; 11
     6cc:	30 f0       	brcs	.+12     	; 0x6da <resend_eeprom_data+0x32>
     6ce:	0f 2e       	mov	r0, r31
     6d0:	f6 ef       	ldi	r31, 0xF6	; 246
     6d2:	ef 2e       	mov	r14, r31
     6d4:	f0 2d       	mov	r31, r0
     6d6:	e8 0e       	add	r14, r24
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <resend_eeprom_data+0x34>
     6da:	e1 2c       	mov	r14, r1
					? eeprom_read_byte(&eepromStorage[1]) - 10
					: 0;
	
	for(uint8_t i=0; i<10; i++) {
     6dc:	f1 2c       	mov	r15, r1
     6de:	49 c0       	rjmp	.+146    	; 0x772 <resend_eeprom_data+0xca>
		uint8_t pos = (start_pos + i) % 10;
     6e0:	0f 2d       	mov	r16, r15
     6e2:	10 e0       	ldi	r17, 0x00	; 0
     6e4:	c8 01       	movw	r24, r16
     6e6:	8d 0d       	add	r24, r13
     6e8:	91 1d       	adc	r25, r1
     6ea:	6a e0       	ldi	r22, 0x0A	; 10
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	0e 94 69 05 	call	0xad2	; 0xad2 <__divmodhi4>
     6f2:	ec 01       	movw	r28, r24
     6f4:	dd 27       	eor	r29, r29
		int8_t temp = eeprom_read_byte(&eepromStorage[pos*2 + 2]);
     6f6:	ce 01       	movw	r24, r28
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	80 50       	subi	r24, 0x00	; 0
     700:	90 40       	sbci	r25, 0x00	; 0
     702:	0e 94 44 08 	call	0x1088	; 0x1088 <eeprom_read_byte>
     706:	c8 2e       	mov	r12, r24
		int8_t hum = eeprom_read_byte(&eepromStorage[pos*2 + 3]);
     708:	ce 01       	movw	r24, r28
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	8d 5f       	subi	r24, 0xFD	; 253
     710:	9f 4f       	sbci	r25, 0xFF	; 255
     712:	0e 94 44 08 	call	0x1088	; 0x1088 <eeprom_read_byte>
		
		sprintf(txBuffer, "DATE%d|HU%d|SN%d", temp, hum, start_seq + i);
     716:	98 01       	movw	r18, r16
     718:	2e 0d       	add	r18, r14
     71a:	31 1d       	adc	r19, r1
     71c:	3f 93       	push	r19
     71e:	2f 93       	push	r18
     720:	28 2f       	mov	r18, r24
     722:	08 2e       	mov	r0, r24
     724:	00 0c       	add	r0, r0
     726:	33 0b       	sbc	r19, r19
     728:	3f 93       	push	r19
     72a:	8f 93       	push	r24
     72c:	8c 2d       	mov	r24, r12
     72e:	0c 2c       	mov	r0, r12
     730:	00 0c       	add	r0, r0
     732:	99 0b       	sbc	r25, r25
     734:	9f 93       	push	r25
     736:	cf 92       	push	r12
     738:	80 e4       	ldi	r24, 0x40	; 64
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	9f 93       	push	r25
     73e:	8f 93       	push	r24
     740:	28 ea       	ldi	r18, 0xA8	; 168
     742:	31 e0       	ldi	r19, 0x01	; 1
     744:	3f 93       	push	r19
     746:	2f 93       	push	r18
     748:	0e 94 91 05 	call	0xb22	; 0xb22 <sprintf>
		uart_putc(0x02);
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	0e 94 47 05 	call	0xa8e	; 0xa8e <uart_putc>
		uart_puts(txBuffer);
     752:	88 ea       	ldi	r24, 0xA8	; 168
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart_puts>
		uart_putc(0x03);
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	0e 94 47 05 	call	0xa8e	; 0xa8e <uart_putc>
	uint8_t start_pos = eeprom_read_byte(&eepromStorage[0]);
	uint8_t start_seq = eeprom_read_byte(&eepromStorage[1]) > 10
					? eeprom_read_byte(&eepromStorage[1]) - 10
					: 0;
	
	for(uint8_t i=0; i<10; i++) {
     760:	f3 94       	inc	r15
     762:	8d b7       	in	r24, 0x3d	; 61
     764:	9e b7       	in	r25, 0x3e	; 62
     766:	0a 96       	adiw	r24, 0x0a	; 10
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	9e bf       	out	0x3e, r25	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	8d bf       	out	0x3d, r24	; 61
     772:	99 e0       	ldi	r25, 0x09	; 9
     774:	9f 15       	cp	r25, r15
     776:	08 f0       	brcs	.+2      	; 0x77a <resend_eeprom_data+0xd2>
     778:	b3 cf       	rjmp	.-154    	; 0x6e0 <resend_eeprom_data+0x38>
		sprintf(txBuffer, "DATE%d|HU%d|SN%d", temp, hum, start_seq + i);
		uart_putc(0x02);
		uart_puts(txBuffer);
		uart_putc(0x03);
	}
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	df 90       	pop	r13
     788:	cf 90       	pop	r12
     78a:	08 95       	ret

0000078c <check_input>:

void check_input(void){
	char command = uart_getc();
     78c:	0e 94 29 05 	call	0xa52	; 0xa52 <uart_getc>
	switch (command) {
     790:	99 27       	eor	r25, r25
     792:	84 36       	cpi	r24, 0x64	; 100
     794:	91 05       	cpc	r25, r1
     796:	09 f4       	brne	.+2      	; 0x79a <check_input+0xe>
     798:	5a c0       	rjmp	.+180    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     79a:	78 f4       	brcc	.+30     	; 0x7ba <check_input+0x2e>
     79c:	81 33       	cpi	r24, 0x31	; 49
     79e:	91 05       	cpc	r25, r1
     7a0:	59 f1       	breq	.+86     	; 0x7f8 <check_input+0x6c>
     7a2:	18 f4       	brcc	.+6      	; 0x7aa <check_input+0x1e>
     7a4:	06 97       	sbiw	r24, 0x06	; 6
     7a6:	d9 f0       	breq	.+54     	; 0x7de <check_input+0x52>
     7a8:	08 95       	ret
     7aa:	84 33       	cpi	r24, 0x34	; 52
     7ac:	91 05       	cpc	r25, r1
     7ae:	a9 f1       	breq	.+106    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7b0:	81 36       	cpi	r24, 0x61	; 97
     7b2:	91 05       	cpc	r25, r1
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <check_input+0x2c>
     7b6:	69 c0       	rjmp	.+210    	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     7b8:	08 95       	ret
     7ba:	81 37       	cpi	r24, 0x71	; 113
     7bc:	91 05       	cpc	r25, r1
     7be:	09 f4       	brne	.+2      	; 0x7c2 <check_input+0x36>
     7c0:	4f c0       	rjmp	.+158    	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     7c2:	28 f4       	brcc	.+10     	; 0x7ce <check_input+0x42>
     7c4:	85 36       	cpi	r24, 0x65	; 101
     7c6:	91 05       	cpc	r25, r1
     7c8:	09 f4       	brne	.+2      	; 0x7cc <check_input+0x40>
     7ca:	55 c0       	rjmp	.+170    	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     7cc:	08 95       	ret
     7ce:	82 37       	cpi	r24, 0x72	; 114
     7d0:	91 05       	cpc	r25, r1
     7d2:	a1 f1       	breq	.+104    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     7d4:	83 37       	cpi	r24, 0x73	; 115
     7d6:	91 05       	cpc	r25, r1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <check_input+0x50>
     7da:	60 c0       	rjmp	.+192    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
     7dc:	08 95       	ret
		case 0x06:
			ackReceived = 1;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <ackReceived>
			if(connectionLost) {
     7e4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     7e8:	88 23       	and	r24, r24
     7ea:	09 f4       	brne	.+2      	; 0x7ee <check_input+0x62>
     7ec:	68 c0       	rjmp	.+208    	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
				connectionLost = 0;
     7ee:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
				resend_eeprom_data();
     7f2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <resend_eeprom_data>
     7f6:	08 95       	ret
			}
			break;
		case '1':
			OCR1A = 15624;
     7f8:	88 e0       	ldi	r24, 0x08	; 8
     7fa:	9d e3       	ldi	r25, 0x3D	; 61
     7fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     800:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			interval = 1;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <interval>
			TCNT1 = 0;// Reset timer
     80a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     80e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			update_display(0);
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0e 94 82 02 	call	0x504	; 0x504 <update_display>
			break;
     818:	08 95       	ret
		case '4':
			OCR1A = 62499;
     81a:	83 e2       	ldi	r24, 0x23	; 35
     81c:	94 ef       	ldi	r25, 0xF4	; 244
     81e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     822:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			interval = 4;
     826:	84 e0       	ldi	r24, 0x04	; 4
     828:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <interval>
			TCNT1 = 0;  // Reset timer
     82c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     830:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			update_display(0);
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	0e 94 82 02 	call	0x504	; 0x504 <update_display>
			break;
     83a:	08 95       	ret
		case 'r':  // Reset command
			retryCount = 0;
     83c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <retryCount>
			ackReceived = 0;
     840:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <ackReceived>
			connectionLost = 0;
     844:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
			PORTB &= ~(1 << STATUS_LED_PIN);
     848:	85 b1       	in	r24, 0x05	; 5
     84a:	8e 7f       	andi	r24, 0xFE	; 254
     84c:	85 b9       	out	0x05, r24	; 5
		case 'd':
			sendFlag = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <sendFlag>
			retryCount = 0;  // Reset retry counter
     854:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <retryCount>
			update_display(0);
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 82 02 	call	0x504	; 0x504 <update_display>
			break;
     85e:	08 95       	ret
		case 'q':
			sendFlag = 0;
     860:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <sendFlag>
			PORTB &= ~(1 << FAN_PIN);
     864:	85 b1       	in	r24, 0x05	; 5
     866:	8d 7f       	andi	r24, 0xFD	; 253
     868:	85 b9       	out	0x05, r24	; 5
			fanStatus = 0;
     86a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <fanStatus>
			update_display(1);
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	0e 94 82 02 	call	0x504	; 0x504 <update_display>
			break;
     874:	08 95       	ret
		case 'e':
			PORTB |= (1 << FAN_PIN);
     876:	85 b1       	in	r24, 0x05	; 5
     878:	82 60       	ori	r24, 0x02	; 2
     87a:	85 b9       	out	0x05, r24	; 5
			fanStatus = 1;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <fanStatus>
			update_display(0);
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0e 94 82 02 	call	0x504	; 0x504 <update_display>
			break;
     888:	08 95       	ret
		case 'a':
			PORTB &= ~(1 << FAN_PIN);
     88a:	85 b1       	in	r24, 0x05	; 5
     88c:	8d 7f       	andi	r24, 0xFD	; 253
     88e:	85 b9       	out	0x05, r24	; 5
			fanStatus = 0;
     890:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <fanStatus>
			update_display(0);
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	0e 94 82 02 	call	0x504	; 0x504 <update_display>
			break;
     89a:	08 95       	ret
		case 's':
			uart_putc(0x02);
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	0e 94 47 05 	call	0xa8e	; 0xa8e <uart_putc>
			uart_puts(fanStatus ? "FAN1" : "FAN0");
     8a2:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <fanStatus>
     8a6:	88 23       	and	r24, r24
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
     8aa:	81 e5       	ldi	r24, 0x51	; 81
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     8b0:	86 e5       	ldi	r24, 0x56	; 86
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart_puts>
			uart_putc(0x03);
     8b8:	83 e0       	ldi	r24, 0x03	; 3
     8ba:	0e 94 47 05 	call	0xa8e	; 0xa8e <uart_putc>
     8be:	08 95       	ret

000008c0 <main>:



int main(void)
{
	lcd_init(LCD_DISP_ON);
     8c0:	8c e0       	ldi	r24, 0x0C	; 12
     8c2:	0e 94 09 02 	call	0x412	; 0x412 <lcd_init>
	lcd_clrscr();
     8c6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_clrscr>
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     8ca:	87 e6       	ldi	r24, 0x67	; 103
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 0e 05 	call	0xa1c	; 0xa1c <uart_init>
	timer1_init();
     8d2:	0e 94 5f 02 	call	0x4be	; 0x4be <timer1_init>
	
	//I/O-Konfigurationen
	DDRB |=(1<< STATUS_LED_PIN)|(1<<FAN_PIN);//DDB0/DDB1
     8d6:	84 b1       	in	r24, 0x04	; 4
     8d8:	83 60       	ori	r24, 0x03	; 3
     8da:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1 << PORTB0) | (1 << PORTB1));// Sicherstellen dass 2 LEDs am Anfang ausgeschaltet sind
     8dc:	85 b1       	in	r24, 0x05	; 5
     8de:	8c 7f       	andi	r24, 0xFC	; 252
     8e0:	85 b9       	out	0x05, r24	; 5
	//Buttons (unnoetig)
	DDRD &= ~((1 << BTN_T1_PIN)|(1 << BTN_T2_PIN));
     8e2:	8a b1       	in	r24, 0x0a	; 10
     8e4:	83 7f       	andi	r24, 0xF3	; 243
     8e6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << BTN_T1_PIN)|(1 << BTN_T2_PIN); // pull-ups einschalten
     8e8:	8b b1       	in	r24, 0x0b	; 11
     8ea:	8c 60       	ori	r24, 0x0C	; 12
     8ec:	8b b9       	out	0x0b, r24	; 11
	
	sei();
     8ee:	78 94       	sei
	update_display(1);
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	0e 94 82 02 	call	0x504	; 0x504 <update_display>
	
	while(1){
		check_input();
     8f6:	0e 94 c6 03 	call	0x78c	; 0x78c <check_input>
		if(ackReceived) {
     8fa:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ackReceived>
     8fe:	88 23       	and	r24, r24
     900:	81 f0       	breq	.+32     	; 0x922 <__stack+0x23>
			PORTB &= ~(1 << STATUS_LED_PIN);  // Turn off LED
     902:	85 b1       	in	r24, 0x05	; 5
     904:	8e 7f       	andi	r24, 0xFE	; 254
     906:	85 b9       	out	0x05, r24	; 5
			seqNumber++;
     908:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     90c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     916:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			retryCount = 0;
     91a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <retryCount>
			ackReceived = 0;
     91e:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <ackReceived>
		}
		
		if(measureTimeFlag) {
     922:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <measureTimeFlag>
     926:	88 23       	and	r24, r24
     928:	31 f3       	breq	.-52     	; 0x8f6 <main+0x36>
			measureTimeFlag = 0;
     92a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <measureTimeFlag>
			if(dht_gettemperaturehumidity(&currentTemp, &currentHumidity) == DHT_ERROR_NOERR) {
     92e:	67 ea       	ldi	r22, 0xA7	; 167
     930:	71 e0       	ldi	r23, 0x01	; 1
     932:	88 ec       	ldi	r24, 0xC8	; 200
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 02 01 	call	0x204	; 0x204 <dht_gettemperaturehumidity>
     93a:	81 11       	cpse	r24, r1
     93c:	dc cf       	rjmp	.-72     	; 0x8f6 <main+0x36>
				store_in_eeprom(); //alle Messungen werden gespeichert
     93e:	0e 94 22 03 	call	0x644	; 0x644 <store_in_eeprom>
				update_display(0);
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 82 02 	call	0x504	; 0x504 <update_display>
				
				if (sendFlag) {
     948:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <sendFlag>
     94c:	88 23       	and	r24, r24
     94e:	99 f2       	breq	.-90     	; 0x8f6 <main+0x36>
					if (retryCount < 3) {
     950:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <retryCount>
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	18 f4       	brcc	.+6      	; 0x95e <__stack+0x5f>
						send_data();
     958:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <send_data>
     95c:	cc cf       	rjmp	.-104    	; 0x8f6 <main+0x36>
						} else {
						PORTB |= (1 << STATUS_LED_PIN);  // Turn on LED after 3 retries
     95e:	85 b1       	in	r24, 0x05	; 5
     960:	81 60       	ori	r24, 0x01	; 1
     962:	85 b9       	out	0x05, r24	; 5
						connectionLost = 1;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
     96a:	c5 cf       	rjmp	.-118    	; 0x8f6 <main+0x36>

0000096c <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	2f 93       	push	r18
     978:	8f 93       	push	r24
     97a:	9f 93       	push	r25
     97c:	ef 93       	push	r30
     97e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
     980:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
     984:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
     988:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     98a:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <UART_RxHead>
     98e:	ef 5f       	subi	r30, 0xFF	; 255
     990:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
     992:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <UART_RxTail>
     996:	e9 17       	cp	r30, r25
     998:	39 f0       	breq	.+14     	; 0x9a8 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     99a:	e0 93 64 01 	sts	0x0164, r30	; 0x800164 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	e9 59       	subi	r30, 0x99	; 153
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	20 83       	st	Z, r18
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     9a8:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
     9aa:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <UART_LastRxError>
     9ae:	89 2b       	or	r24, r25
     9b0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <UART_LastRxError>
}
     9b4:	ff 91       	pop	r31
     9b6:	ef 91       	pop	r30
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	2f 91       	pop	r18
     9be:	0f 90       	pop	r0
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	0f 90       	pop	r0
     9c4:	1f 90       	pop	r1
     9c6:	18 95       	reti

000009c8 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     9c8:	1f 92       	push	r1
     9ca:	0f 92       	push	r0
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	0f 92       	push	r0
     9d0:	11 24       	eor	r1, r1
     9d2:	8f 93       	push	r24
     9d4:	9f 93       	push	r25
     9d6:	ef 93       	push	r30
     9d8:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     9da:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <UART_TxHead>
     9de:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <UART_TxTail>
     9e2:	98 17       	cp	r25, r24
     9e4:	69 f0       	breq	.+26     	; 0xa00 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     9e6:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <UART_TxTail>
     9ea:	ef 5f       	subi	r30, 0xFF	; 255
     9ec:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     9ee:	e0 93 65 01 	sts	0x0165, r30	; 0x800165 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	e9 57       	subi	r30, 0x79	; 121
     9f6:	fe 4f       	sbci	r31, 0xFE	; 254
     9f8:	80 81       	ld	r24, Z
     9fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     a00:	e1 ec       	ldi	r30, 0xC1	; 193
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	8f 7d       	andi	r24, 0xDF	; 223
     a08:	80 83       	st	Z, r24
    }
}
     a0a:	ff 91       	pop	r31
     a0c:	ef 91       	pop	r30
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
     a1c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <UART_TxHead>
    UART_TxTail = 0;
     a20:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <UART_TxTail>
    UART_RxHead = 0;
     a24:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <UART_RxHead>
    UART_RxTail = 0;
     a28:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <UART_RxTail>
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
     a2c:	28 2f       	mov	r18, r24
     a2e:	39 2f       	mov	r19, r25
     a30:	33 23       	and	r19, r19
     a32:	1c f4       	brge	.+6      	; 0xa3a <uart_init+0x1e>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
     a34:	22 e0       	ldi	r18, 0x02	; 2
     a36:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
     a3a:	90 78       	andi	r25, 0x80	; 128
     a3c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
     a40:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
     a44:	88 e9       	ldi	r24, 0x98	; 152
     a46:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
     a4a:	86 e0       	ldi	r24, 0x06	; 6
     a4c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     a50:	08 95       	ret

00000a52 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
     a52:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <UART_RxHead>
     a56:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <UART_RxTail>
     a5a:	98 17       	cp	r25, r24
     a5c:	a9 f0       	breq	.+42     	; 0xa88 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     a5e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <UART_RxTail>
     a62:	9f 5f       	subi	r25, 0xFF	; 255
     a64:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     a66:	e9 2f       	mov	r30, r25
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	e9 59       	subi	r30, 0x99	; 153
     a6c:	fe 4f       	sbci	r31, 0xFE	; 254
     a6e:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
     a70:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <UART_LastRxError>
    
    /* store buffer index */
    UART_RxTail = tmptail; 
     a74:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <UART_RxTail>
    
    UART_LastRxError = 0;
     a78:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <UART_LastRxError>
    return (lastRxError << 8) + data;
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	98 2f       	mov	r25, r24
     a80:	88 27       	eor	r24, r24
     a82:	82 0f       	add	r24, r18
     a84:	91 1d       	adc	r25, r1
     a86:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
     a8c:	08 95       	ret

00000a8e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     a8e:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <UART_TxHead>
     a92:	2f 5f       	subi	r18, 0xFF	; 255
     a94:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     a96:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <UART_TxTail>
     a9a:	29 17       	cp	r18, r25
     a9c:	e1 f3       	breq	.-8      	; 0xa96 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     a9e:	e2 2f       	mov	r30, r18
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	e9 57       	subi	r30, 0x79	; 121
     aa4:	fe 4f       	sbci	r31, 0xFE	; 254
     aa6:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     aa8:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     aac:	e1 ec       	ldi	r30, 0xC1	; 193
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	80 62       	ori	r24, 0x20	; 32
     ab4:	80 83       	st	Z, r24
     ab6:	08 95       	ret

00000ab8 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
    while (*s) 
     abe:	03 c0       	rjmp	.+6      	; 0xac6 <uart_puts+0xe>
      uart_putc(*s++);
     ac0:	21 96       	adiw	r28, 0x01	; 1
     ac2:	0e 94 47 05 	call	0xa8e	; 0xa8e <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     ac6:	88 81       	ld	r24, Y
     ac8:	81 11       	cpse	r24, r1
     aca:	fa cf       	rjmp	.-12     	; 0xac0 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <__divmodhi4>:
     ad2:	97 fb       	bst	r25, 7
     ad4:	07 2e       	mov	r0, r23
     ad6:	16 f4       	brtc	.+4      	; 0xadc <__divmodhi4+0xa>
     ad8:	00 94       	com	r0
     ada:	07 d0       	rcall	.+14     	; 0xaea <__divmodhi4_neg1>
     adc:	77 fd       	sbrc	r23, 7
     ade:	09 d0       	rcall	.+18     	; 0xaf2 <__divmodhi4_neg2>
     ae0:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
     ae4:	07 fc       	sbrc	r0, 7
     ae6:	05 d0       	rcall	.+10     	; 0xaf2 <__divmodhi4_neg2>
     ae8:	3e f4       	brtc	.+14     	; 0xaf8 <__divmodhi4_exit>

00000aea <__divmodhi4_neg1>:
     aea:	90 95       	com	r25
     aec:	81 95       	neg	r24
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	08 95       	ret

00000af2 <__divmodhi4_neg2>:
     af2:	70 95       	com	r23
     af4:	61 95       	neg	r22
     af6:	7f 4f       	sbci	r23, 0xFF	; 255

00000af8 <__divmodhi4_exit>:
     af8:	08 95       	ret

00000afa <__udivmodhi4>:
     afa:	aa 1b       	sub	r26, r26
     afc:	bb 1b       	sub	r27, r27
     afe:	51 e1       	ldi	r21, 0x11	; 17
     b00:	07 c0       	rjmp	.+14     	; 0xb10 <__udivmodhi4_ep>

00000b02 <__udivmodhi4_loop>:
     b02:	aa 1f       	adc	r26, r26
     b04:	bb 1f       	adc	r27, r27
     b06:	a6 17       	cp	r26, r22
     b08:	b7 07       	cpc	r27, r23
     b0a:	10 f0       	brcs	.+4      	; 0xb10 <__udivmodhi4_ep>
     b0c:	a6 1b       	sub	r26, r22
     b0e:	b7 0b       	sbc	r27, r23

00000b10 <__udivmodhi4_ep>:
     b10:	88 1f       	adc	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	5a 95       	dec	r21
     b16:	a9 f7       	brne	.-22     	; 0xb02 <__udivmodhi4_loop>
     b18:	80 95       	com	r24
     b1a:	90 95       	com	r25
     b1c:	bc 01       	movw	r22, r24
     b1e:	cd 01       	movw	r24, r26
     b20:	08 95       	ret

00000b22 <sprintf>:
     b22:	ae e0       	ldi	r26, 0x0E	; 14
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e7 e9       	ldi	r30, 0x97	; 151
     b28:	f5 e0       	ldi	r31, 0x05	; 5
     b2a:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__prologue_saves__+0x1c>
     b2e:	0d 89       	ldd	r16, Y+21	; 0x15
     b30:	1e 89       	ldd	r17, Y+22	; 0x16
     b32:	86 e0       	ldi	r24, 0x06	; 6
     b34:	8c 83       	std	Y+4, r24	; 0x04
     b36:	1a 83       	std	Y+2, r17	; 0x02
     b38:	09 83       	std	Y+1, r16	; 0x01
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	9f e7       	ldi	r25, 0x7F	; 127
     b3e:	9e 83       	std	Y+6, r25	; 0x06
     b40:	8d 83       	std	Y+5, r24	; 0x05
     b42:	ae 01       	movw	r20, r28
     b44:	47 5e       	subi	r20, 0xE7	; 231
     b46:	5f 4f       	sbci	r21, 0xFF	; 255
     b48:	6f 89       	ldd	r22, Y+23	; 0x17
     b4a:	78 8d       	ldd	r23, Y+24	; 0x18
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	0e 94 b3 05 	call	0xb66	; 0xb66 <vfprintf>
     b54:	ef 81       	ldd	r30, Y+7	; 0x07
     b56:	f8 85       	ldd	r31, Y+8	; 0x08
     b58:	e0 0f       	add	r30, r16
     b5a:	f1 1f       	adc	r31, r17
     b5c:	10 82       	st	Z, r1
     b5e:	2e 96       	adiw	r28, 0x0e	; 14
     b60:	e4 e0       	ldi	r30, 0x04	; 4
     b62:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__epilogue_restores__+0x1c>

00000b66 <vfprintf>:
     b66:	ab e0       	ldi	r26, 0x0B	; 11
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e9 eb       	ldi	r30, 0xB9	; 185
     b6c:	f5 e0       	ldi	r31, 0x05	; 5
     b6e:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__prologue_saves__>
     b72:	6c 01       	movw	r12, r24
     b74:	7b 01       	movw	r14, r22
     b76:	8a 01       	movw	r16, r20
     b78:	fc 01       	movw	r30, r24
     b7a:	17 82       	std	Z+7, r1	; 0x07
     b7c:	16 82       	std	Z+6, r1	; 0x06
     b7e:	83 81       	ldd	r24, Z+3	; 0x03
     b80:	81 ff       	sbrs	r24, 1
     b82:	cc c1       	rjmp	.+920    	; 0xf1c <vfprintf+0x3b6>
     b84:	ce 01       	movw	r24, r28
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	3c 01       	movw	r6, r24
     b8a:	f6 01       	movw	r30, r12
     b8c:	93 81       	ldd	r25, Z+3	; 0x03
     b8e:	f7 01       	movw	r30, r14
     b90:	93 fd       	sbrc	r25, 3
     b92:	85 91       	lpm	r24, Z+
     b94:	93 ff       	sbrs	r25, 3
     b96:	81 91       	ld	r24, Z+
     b98:	7f 01       	movw	r14, r30
     b9a:	88 23       	and	r24, r24
     b9c:	09 f4       	brne	.+2      	; 0xba0 <vfprintf+0x3a>
     b9e:	ba c1       	rjmp	.+884    	; 0xf14 <vfprintf+0x3ae>
     ba0:	85 32       	cpi	r24, 0x25	; 37
     ba2:	39 f4       	brne	.+14     	; 0xbb2 <vfprintf+0x4c>
     ba4:	93 fd       	sbrc	r25, 3
     ba6:	85 91       	lpm	r24, Z+
     ba8:	93 ff       	sbrs	r25, 3
     baa:	81 91       	ld	r24, Z+
     bac:	7f 01       	movw	r14, r30
     bae:	85 32       	cpi	r24, 0x25	; 37
     bb0:	29 f4       	brne	.+10     	; 0xbbc <vfprintf+0x56>
     bb2:	b6 01       	movw	r22, r12
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 aa 07 	call	0xf54	; 0xf54 <fputc>
     bba:	e7 cf       	rjmp	.-50     	; 0xb8a <vfprintf+0x24>
     bbc:	91 2c       	mov	r9, r1
     bbe:	21 2c       	mov	r2, r1
     bc0:	31 2c       	mov	r3, r1
     bc2:	ff e1       	ldi	r31, 0x1F	; 31
     bc4:	f3 15       	cp	r31, r3
     bc6:	d8 f0       	brcs	.+54     	; 0xbfe <vfprintf+0x98>
     bc8:	8b 32       	cpi	r24, 0x2B	; 43
     bca:	79 f0       	breq	.+30     	; 0xbea <vfprintf+0x84>
     bcc:	38 f4       	brcc	.+14     	; 0xbdc <vfprintf+0x76>
     bce:	80 32       	cpi	r24, 0x20	; 32
     bd0:	79 f0       	breq	.+30     	; 0xbf0 <vfprintf+0x8a>
     bd2:	83 32       	cpi	r24, 0x23	; 35
     bd4:	a1 f4       	brne	.+40     	; 0xbfe <vfprintf+0x98>
     bd6:	23 2d       	mov	r18, r3
     bd8:	20 61       	ori	r18, 0x10	; 16
     bda:	1d c0       	rjmp	.+58     	; 0xc16 <vfprintf+0xb0>
     bdc:	8d 32       	cpi	r24, 0x2D	; 45
     bde:	61 f0       	breq	.+24     	; 0xbf8 <vfprintf+0x92>
     be0:	80 33       	cpi	r24, 0x30	; 48
     be2:	69 f4       	brne	.+26     	; 0xbfe <vfprintf+0x98>
     be4:	23 2d       	mov	r18, r3
     be6:	21 60       	ori	r18, 0x01	; 1
     be8:	16 c0       	rjmp	.+44     	; 0xc16 <vfprintf+0xb0>
     bea:	83 2d       	mov	r24, r3
     bec:	82 60       	ori	r24, 0x02	; 2
     bee:	38 2e       	mov	r3, r24
     bf0:	e3 2d       	mov	r30, r3
     bf2:	e4 60       	ori	r30, 0x04	; 4
     bf4:	3e 2e       	mov	r3, r30
     bf6:	2a c0       	rjmp	.+84     	; 0xc4c <vfprintf+0xe6>
     bf8:	f3 2d       	mov	r31, r3
     bfa:	f8 60       	ori	r31, 0x08	; 8
     bfc:	1d c0       	rjmp	.+58     	; 0xc38 <vfprintf+0xd2>
     bfe:	37 fc       	sbrc	r3, 7
     c00:	2d c0       	rjmp	.+90     	; 0xc5c <vfprintf+0xf6>
     c02:	20 ed       	ldi	r18, 0xD0	; 208
     c04:	28 0f       	add	r18, r24
     c06:	2a 30       	cpi	r18, 0x0A	; 10
     c08:	40 f0       	brcs	.+16     	; 0xc1a <vfprintf+0xb4>
     c0a:	8e 32       	cpi	r24, 0x2E	; 46
     c0c:	b9 f4       	brne	.+46     	; 0xc3c <vfprintf+0xd6>
     c0e:	36 fc       	sbrc	r3, 6
     c10:	81 c1       	rjmp	.+770    	; 0xf14 <vfprintf+0x3ae>
     c12:	23 2d       	mov	r18, r3
     c14:	20 64       	ori	r18, 0x40	; 64
     c16:	32 2e       	mov	r3, r18
     c18:	19 c0       	rjmp	.+50     	; 0xc4c <vfprintf+0xe6>
     c1a:	36 fe       	sbrs	r3, 6
     c1c:	06 c0       	rjmp	.+12     	; 0xc2a <vfprintf+0xc4>
     c1e:	8a e0       	ldi	r24, 0x0A	; 10
     c20:	98 9e       	mul	r9, r24
     c22:	20 0d       	add	r18, r0
     c24:	11 24       	eor	r1, r1
     c26:	92 2e       	mov	r9, r18
     c28:	11 c0       	rjmp	.+34     	; 0xc4c <vfprintf+0xe6>
     c2a:	ea e0       	ldi	r30, 0x0A	; 10
     c2c:	2e 9e       	mul	r2, r30
     c2e:	20 0d       	add	r18, r0
     c30:	11 24       	eor	r1, r1
     c32:	22 2e       	mov	r2, r18
     c34:	f3 2d       	mov	r31, r3
     c36:	f0 62       	ori	r31, 0x20	; 32
     c38:	3f 2e       	mov	r3, r31
     c3a:	08 c0       	rjmp	.+16     	; 0xc4c <vfprintf+0xe6>
     c3c:	8c 36       	cpi	r24, 0x6C	; 108
     c3e:	21 f4       	brne	.+8      	; 0xc48 <vfprintf+0xe2>
     c40:	83 2d       	mov	r24, r3
     c42:	80 68       	ori	r24, 0x80	; 128
     c44:	38 2e       	mov	r3, r24
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <vfprintf+0xe6>
     c48:	88 36       	cpi	r24, 0x68	; 104
     c4a:	41 f4       	brne	.+16     	; 0xc5c <vfprintf+0xf6>
     c4c:	f7 01       	movw	r30, r14
     c4e:	93 fd       	sbrc	r25, 3
     c50:	85 91       	lpm	r24, Z+
     c52:	93 ff       	sbrs	r25, 3
     c54:	81 91       	ld	r24, Z+
     c56:	7f 01       	movw	r14, r30
     c58:	81 11       	cpse	r24, r1
     c5a:	b3 cf       	rjmp	.-154    	; 0xbc2 <vfprintf+0x5c>
     c5c:	98 2f       	mov	r25, r24
     c5e:	9f 7d       	andi	r25, 0xDF	; 223
     c60:	95 54       	subi	r25, 0x45	; 69
     c62:	93 30       	cpi	r25, 0x03	; 3
     c64:	28 f4       	brcc	.+10     	; 0xc70 <vfprintf+0x10a>
     c66:	0c 5f       	subi	r16, 0xFC	; 252
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	9f e3       	ldi	r25, 0x3F	; 63
     c6c:	99 83       	std	Y+1, r25	; 0x01
     c6e:	0d c0       	rjmp	.+26     	; 0xc8a <vfprintf+0x124>
     c70:	83 36       	cpi	r24, 0x63	; 99
     c72:	31 f0       	breq	.+12     	; 0xc80 <vfprintf+0x11a>
     c74:	83 37       	cpi	r24, 0x73	; 115
     c76:	71 f0       	breq	.+28     	; 0xc94 <vfprintf+0x12e>
     c78:	83 35       	cpi	r24, 0x53	; 83
     c7a:	09 f0       	breq	.+2      	; 0xc7e <vfprintf+0x118>
     c7c:	59 c0       	rjmp	.+178    	; 0xd30 <vfprintf+0x1ca>
     c7e:	21 c0       	rjmp	.+66     	; 0xcc2 <vfprintf+0x15c>
     c80:	f8 01       	movw	r30, r16
     c82:	80 81       	ld	r24, Z
     c84:	89 83       	std	Y+1, r24	; 0x01
     c86:	0e 5f       	subi	r16, 0xFE	; 254
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	88 24       	eor	r8, r8
     c8c:	83 94       	inc	r8
     c8e:	91 2c       	mov	r9, r1
     c90:	53 01       	movw	r10, r6
     c92:	13 c0       	rjmp	.+38     	; 0xcba <vfprintf+0x154>
     c94:	28 01       	movw	r4, r16
     c96:	f2 e0       	ldi	r31, 0x02	; 2
     c98:	4f 0e       	add	r4, r31
     c9a:	51 1c       	adc	r5, r1
     c9c:	f8 01       	movw	r30, r16
     c9e:	a0 80       	ld	r10, Z
     ca0:	b1 80       	ldd	r11, Z+1	; 0x01
     ca2:	36 fe       	sbrs	r3, 6
     ca4:	03 c0       	rjmp	.+6      	; 0xcac <vfprintf+0x146>
     ca6:	69 2d       	mov	r22, r9
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <vfprintf+0x14a>
     cac:	6f ef       	ldi	r22, 0xFF	; 255
     cae:	7f ef       	ldi	r23, 0xFF	; 255
     cb0:	c5 01       	movw	r24, r10
     cb2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <strnlen>
     cb6:	4c 01       	movw	r8, r24
     cb8:	82 01       	movw	r16, r4
     cba:	f3 2d       	mov	r31, r3
     cbc:	ff 77       	andi	r31, 0x7F	; 127
     cbe:	3f 2e       	mov	r3, r31
     cc0:	16 c0       	rjmp	.+44     	; 0xcee <vfprintf+0x188>
     cc2:	28 01       	movw	r4, r16
     cc4:	22 e0       	ldi	r18, 0x02	; 2
     cc6:	42 0e       	add	r4, r18
     cc8:	51 1c       	adc	r5, r1
     cca:	f8 01       	movw	r30, r16
     ccc:	a0 80       	ld	r10, Z
     cce:	b1 80       	ldd	r11, Z+1	; 0x01
     cd0:	36 fe       	sbrs	r3, 6
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <vfprintf+0x174>
     cd4:	69 2d       	mov	r22, r9
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <vfprintf+0x178>
     cda:	6f ef       	ldi	r22, 0xFF	; 255
     cdc:	7f ef       	ldi	r23, 0xFF	; 255
     cde:	c5 01       	movw	r24, r10
     ce0:	0e 94 94 07 	call	0xf28	; 0xf28 <strnlen_P>
     ce4:	4c 01       	movw	r8, r24
     ce6:	f3 2d       	mov	r31, r3
     ce8:	f0 68       	ori	r31, 0x80	; 128
     cea:	3f 2e       	mov	r3, r31
     cec:	82 01       	movw	r16, r4
     cee:	33 fc       	sbrc	r3, 3
     cf0:	1b c0       	rjmp	.+54     	; 0xd28 <vfprintf+0x1c2>
     cf2:	82 2d       	mov	r24, r2
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	88 16       	cp	r8, r24
     cf8:	99 06       	cpc	r9, r25
     cfa:	b0 f4       	brcc	.+44     	; 0xd28 <vfprintf+0x1c2>
     cfc:	b6 01       	movw	r22, r12
     cfe:	80 e2       	ldi	r24, 0x20	; 32
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 aa 07 	call	0xf54	; 0xf54 <fputc>
     d06:	2a 94       	dec	r2
     d08:	f4 cf       	rjmp	.-24     	; 0xcf2 <vfprintf+0x18c>
     d0a:	f5 01       	movw	r30, r10
     d0c:	37 fc       	sbrc	r3, 7
     d0e:	85 91       	lpm	r24, Z+
     d10:	37 fe       	sbrs	r3, 7
     d12:	81 91       	ld	r24, Z+
     d14:	5f 01       	movw	r10, r30
     d16:	b6 01       	movw	r22, r12
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 aa 07 	call	0xf54	; 0xf54 <fputc>
     d1e:	21 10       	cpse	r2, r1
     d20:	2a 94       	dec	r2
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	82 1a       	sub	r8, r18
     d26:	91 08       	sbc	r9, r1
     d28:	81 14       	cp	r8, r1
     d2a:	91 04       	cpc	r9, r1
     d2c:	71 f7       	brne	.-36     	; 0xd0a <vfprintf+0x1a4>
     d2e:	e8 c0       	rjmp	.+464    	; 0xf00 <vfprintf+0x39a>
     d30:	84 36       	cpi	r24, 0x64	; 100
     d32:	11 f0       	breq	.+4      	; 0xd38 <vfprintf+0x1d2>
     d34:	89 36       	cpi	r24, 0x69	; 105
     d36:	41 f5       	brne	.+80     	; 0xd88 <vfprintf+0x222>
     d38:	f8 01       	movw	r30, r16
     d3a:	37 fe       	sbrs	r3, 7
     d3c:	07 c0       	rjmp	.+14     	; 0xd4c <vfprintf+0x1e6>
     d3e:	60 81       	ld	r22, Z
     d40:	71 81       	ldd	r23, Z+1	; 0x01
     d42:	82 81       	ldd	r24, Z+2	; 0x02
     d44:	93 81       	ldd	r25, Z+3	; 0x03
     d46:	0c 5f       	subi	r16, 0xFC	; 252
     d48:	1f 4f       	sbci	r17, 0xFF	; 255
     d4a:	08 c0       	rjmp	.+16     	; 0xd5c <vfprintf+0x1f6>
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	07 2e       	mov	r0, r23
     d52:	00 0c       	add	r0, r0
     d54:	88 0b       	sbc	r24, r24
     d56:	99 0b       	sbc	r25, r25
     d58:	0e 5f       	subi	r16, 0xFE	; 254
     d5a:	1f 4f       	sbci	r17, 0xFF	; 255
     d5c:	f3 2d       	mov	r31, r3
     d5e:	ff 76       	andi	r31, 0x6F	; 111
     d60:	3f 2e       	mov	r3, r31
     d62:	97 ff       	sbrs	r25, 7
     d64:	09 c0       	rjmp	.+18     	; 0xd78 <vfprintf+0x212>
     d66:	90 95       	com	r25
     d68:	80 95       	com	r24
     d6a:	70 95       	com	r23
     d6c:	61 95       	neg	r22
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	8f 4f       	sbci	r24, 0xFF	; 255
     d72:	9f 4f       	sbci	r25, 0xFF	; 255
     d74:	f0 68       	ori	r31, 0x80	; 128
     d76:	3f 2e       	mov	r3, r31
     d78:	2a e0       	ldi	r18, 0x0A	; 10
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	a3 01       	movw	r20, r6
     d7e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__ultoa_invert>
     d82:	88 2e       	mov	r8, r24
     d84:	86 18       	sub	r8, r6
     d86:	45 c0       	rjmp	.+138    	; 0xe12 <vfprintf+0x2ac>
     d88:	85 37       	cpi	r24, 0x75	; 117
     d8a:	31 f4       	brne	.+12     	; 0xd98 <vfprintf+0x232>
     d8c:	23 2d       	mov	r18, r3
     d8e:	2f 7e       	andi	r18, 0xEF	; 239
     d90:	b2 2e       	mov	r11, r18
     d92:	2a e0       	ldi	r18, 0x0A	; 10
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	25 c0       	rjmp	.+74     	; 0xde2 <vfprintf+0x27c>
     d98:	93 2d       	mov	r25, r3
     d9a:	99 7f       	andi	r25, 0xF9	; 249
     d9c:	b9 2e       	mov	r11, r25
     d9e:	8f 36       	cpi	r24, 0x6F	; 111
     da0:	c1 f0       	breq	.+48     	; 0xdd2 <vfprintf+0x26c>
     da2:	18 f4       	brcc	.+6      	; 0xdaa <vfprintf+0x244>
     da4:	88 35       	cpi	r24, 0x58	; 88
     da6:	79 f0       	breq	.+30     	; 0xdc6 <vfprintf+0x260>
     da8:	b5 c0       	rjmp	.+362    	; 0xf14 <vfprintf+0x3ae>
     daa:	80 37       	cpi	r24, 0x70	; 112
     dac:	19 f0       	breq	.+6      	; 0xdb4 <vfprintf+0x24e>
     dae:	88 37       	cpi	r24, 0x78	; 120
     db0:	21 f0       	breq	.+8      	; 0xdba <vfprintf+0x254>
     db2:	b0 c0       	rjmp	.+352    	; 0xf14 <vfprintf+0x3ae>
     db4:	e9 2f       	mov	r30, r25
     db6:	e0 61       	ori	r30, 0x10	; 16
     db8:	be 2e       	mov	r11, r30
     dba:	b4 fe       	sbrs	r11, 4
     dbc:	0d c0       	rjmp	.+26     	; 0xdd8 <vfprintf+0x272>
     dbe:	fb 2d       	mov	r31, r11
     dc0:	f4 60       	ori	r31, 0x04	; 4
     dc2:	bf 2e       	mov	r11, r31
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <vfprintf+0x272>
     dc6:	34 fe       	sbrs	r3, 4
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <vfprintf+0x278>
     dca:	29 2f       	mov	r18, r25
     dcc:	26 60       	ori	r18, 0x06	; 6
     dce:	b2 2e       	mov	r11, r18
     dd0:	06 c0       	rjmp	.+12     	; 0xdde <vfprintf+0x278>
     dd2:	28 e0       	ldi	r18, 0x08	; 8
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <vfprintf+0x27c>
     dd8:	20 e1       	ldi	r18, 0x10	; 16
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <vfprintf+0x27c>
     dde:	20 e1       	ldi	r18, 0x10	; 16
     de0:	32 e0       	ldi	r19, 0x02	; 2
     de2:	f8 01       	movw	r30, r16
     de4:	b7 fe       	sbrs	r11, 7
     de6:	07 c0       	rjmp	.+14     	; 0xdf6 <vfprintf+0x290>
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	82 81       	ldd	r24, Z+2	; 0x02
     dee:	93 81       	ldd	r25, Z+3	; 0x03
     df0:	0c 5f       	subi	r16, 0xFC	; 252
     df2:	1f 4f       	sbci	r17, 0xFF	; 255
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <vfprintf+0x29c>
     df6:	60 81       	ld	r22, Z
     df8:	71 81       	ldd	r23, Z+1	; 0x01
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 5f       	subi	r16, 0xFE	; 254
     e00:	1f 4f       	sbci	r17, 0xFF	; 255
     e02:	a3 01       	movw	r20, r6
     e04:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__ultoa_invert>
     e08:	88 2e       	mov	r8, r24
     e0a:	86 18       	sub	r8, r6
     e0c:	fb 2d       	mov	r31, r11
     e0e:	ff 77       	andi	r31, 0x7F	; 127
     e10:	3f 2e       	mov	r3, r31
     e12:	36 fe       	sbrs	r3, 6
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <vfprintf+0x2ca>
     e16:	23 2d       	mov	r18, r3
     e18:	2e 7f       	andi	r18, 0xFE	; 254
     e1a:	a2 2e       	mov	r10, r18
     e1c:	89 14       	cp	r8, r9
     e1e:	58 f4       	brcc	.+22     	; 0xe36 <vfprintf+0x2d0>
     e20:	34 fe       	sbrs	r3, 4
     e22:	0b c0       	rjmp	.+22     	; 0xe3a <vfprintf+0x2d4>
     e24:	32 fc       	sbrc	r3, 2
     e26:	09 c0       	rjmp	.+18     	; 0xe3a <vfprintf+0x2d4>
     e28:	83 2d       	mov	r24, r3
     e2a:	8e 7e       	andi	r24, 0xEE	; 238
     e2c:	a8 2e       	mov	r10, r24
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <vfprintf+0x2d4>
     e30:	b8 2c       	mov	r11, r8
     e32:	a3 2c       	mov	r10, r3
     e34:	03 c0       	rjmp	.+6      	; 0xe3c <vfprintf+0x2d6>
     e36:	b8 2c       	mov	r11, r8
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <vfprintf+0x2d6>
     e3a:	b9 2c       	mov	r11, r9
     e3c:	a4 fe       	sbrs	r10, 4
     e3e:	0f c0       	rjmp	.+30     	; 0xe5e <vfprintf+0x2f8>
     e40:	fe 01       	movw	r30, r28
     e42:	e8 0d       	add	r30, r8
     e44:	f1 1d       	adc	r31, r1
     e46:	80 81       	ld	r24, Z
     e48:	80 33       	cpi	r24, 0x30	; 48
     e4a:	21 f4       	brne	.+8      	; 0xe54 <vfprintf+0x2ee>
     e4c:	9a 2d       	mov	r25, r10
     e4e:	99 7e       	andi	r25, 0xE9	; 233
     e50:	a9 2e       	mov	r10, r25
     e52:	09 c0       	rjmp	.+18     	; 0xe66 <vfprintf+0x300>
     e54:	a2 fe       	sbrs	r10, 2
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <vfprintf+0x2fe>
     e58:	b3 94       	inc	r11
     e5a:	b3 94       	inc	r11
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <vfprintf+0x300>
     e5e:	8a 2d       	mov	r24, r10
     e60:	86 78       	andi	r24, 0x86	; 134
     e62:	09 f0       	breq	.+2      	; 0xe66 <vfprintf+0x300>
     e64:	b3 94       	inc	r11
     e66:	a3 fc       	sbrc	r10, 3
     e68:	11 c0       	rjmp	.+34     	; 0xe8c <vfprintf+0x326>
     e6a:	a0 fe       	sbrs	r10, 0
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <vfprintf+0x314>
     e6e:	b2 14       	cp	r11, r2
     e70:	88 f4       	brcc	.+34     	; 0xe94 <vfprintf+0x32e>
     e72:	28 0c       	add	r2, r8
     e74:	92 2c       	mov	r9, r2
     e76:	9b 18       	sub	r9, r11
     e78:	0e c0       	rjmp	.+28     	; 0xe96 <vfprintf+0x330>
     e7a:	b2 14       	cp	r11, r2
     e7c:	60 f4       	brcc	.+24     	; 0xe96 <vfprintf+0x330>
     e7e:	b6 01       	movw	r22, r12
     e80:	80 e2       	ldi	r24, 0x20	; 32
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 aa 07 	call	0xf54	; 0xf54 <fputc>
     e88:	b3 94       	inc	r11
     e8a:	f7 cf       	rjmp	.-18     	; 0xe7a <vfprintf+0x314>
     e8c:	b2 14       	cp	r11, r2
     e8e:	18 f4       	brcc	.+6      	; 0xe96 <vfprintf+0x330>
     e90:	2b 18       	sub	r2, r11
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <vfprintf+0x332>
     e94:	98 2c       	mov	r9, r8
     e96:	21 2c       	mov	r2, r1
     e98:	a4 fe       	sbrs	r10, 4
     e9a:	10 c0       	rjmp	.+32     	; 0xebc <vfprintf+0x356>
     e9c:	b6 01       	movw	r22, r12
     e9e:	80 e3       	ldi	r24, 0x30	; 48
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 aa 07 	call	0xf54	; 0xf54 <fputc>
     ea6:	a2 fe       	sbrs	r10, 2
     ea8:	17 c0       	rjmp	.+46     	; 0xed8 <vfprintf+0x372>
     eaa:	a1 fc       	sbrc	r10, 1
     eac:	03 c0       	rjmp	.+6      	; 0xeb4 <vfprintf+0x34e>
     eae:	88 e7       	ldi	r24, 0x78	; 120
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <vfprintf+0x352>
     eb4:	88 e5       	ldi	r24, 0x58	; 88
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	b6 01       	movw	r22, r12
     eba:	0c c0       	rjmp	.+24     	; 0xed4 <vfprintf+0x36e>
     ebc:	8a 2d       	mov	r24, r10
     ebe:	86 78       	andi	r24, 0x86	; 134
     ec0:	59 f0       	breq	.+22     	; 0xed8 <vfprintf+0x372>
     ec2:	a1 fe       	sbrs	r10, 1
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <vfprintf+0x364>
     ec6:	8b e2       	ldi	r24, 0x2B	; 43
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <vfprintf+0x366>
     eca:	80 e2       	ldi	r24, 0x20	; 32
     ecc:	a7 fc       	sbrc	r10, 7
     ece:	8d e2       	ldi	r24, 0x2D	; 45
     ed0:	b6 01       	movw	r22, r12
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 aa 07 	call	0xf54	; 0xf54 <fputc>
     ed8:	89 14       	cp	r8, r9
     eda:	38 f4       	brcc	.+14     	; 0xeea <vfprintf+0x384>
     edc:	b6 01       	movw	r22, r12
     ede:	80 e3       	ldi	r24, 0x30	; 48
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 aa 07 	call	0xf54	; 0xf54 <fputc>
     ee6:	9a 94       	dec	r9
     ee8:	f7 cf       	rjmp	.-18     	; 0xed8 <vfprintf+0x372>
     eea:	8a 94       	dec	r8
     eec:	f3 01       	movw	r30, r6
     eee:	e8 0d       	add	r30, r8
     ef0:	f1 1d       	adc	r31, r1
     ef2:	80 81       	ld	r24, Z
     ef4:	b6 01       	movw	r22, r12
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 aa 07 	call	0xf54	; 0xf54 <fputc>
     efc:	81 10       	cpse	r8, r1
     efe:	f5 cf       	rjmp	.-22     	; 0xeea <vfprintf+0x384>
     f00:	22 20       	and	r2, r2
     f02:	09 f4       	brne	.+2      	; 0xf06 <vfprintf+0x3a0>
     f04:	42 ce       	rjmp	.-892    	; 0xb8a <vfprintf+0x24>
     f06:	b6 01       	movw	r22, r12
     f08:	80 e2       	ldi	r24, 0x20	; 32
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 aa 07 	call	0xf54	; 0xf54 <fputc>
     f10:	2a 94       	dec	r2
     f12:	f6 cf       	rjmp	.-20     	; 0xf00 <vfprintf+0x39a>
     f14:	f6 01       	movw	r30, r12
     f16:	86 81       	ldd	r24, Z+6	; 0x06
     f18:	97 81       	ldd	r25, Z+7	; 0x07
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <vfprintf+0x3ba>
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	9f ef       	ldi	r25, 0xFF	; 255
     f20:	2b 96       	adiw	r28, 0x0b	; 11
     f22:	e2 e1       	ldi	r30, 0x12	; 18
     f24:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__epilogue_restores__>

00000f28 <strnlen_P>:
     f28:	fc 01       	movw	r30, r24
     f2a:	05 90       	lpm	r0, Z+
     f2c:	61 50       	subi	r22, 0x01	; 1
     f2e:	70 40       	sbci	r23, 0x00	; 0
     f30:	01 10       	cpse	r0, r1
     f32:	d8 f7       	brcc	.-10     	; 0xf2a <strnlen_P+0x2>
     f34:	80 95       	com	r24
     f36:	90 95       	com	r25
     f38:	8e 0f       	add	r24, r30
     f3a:	9f 1f       	adc	r25, r31
     f3c:	08 95       	ret

00000f3e <strnlen>:
     f3e:	fc 01       	movw	r30, r24
     f40:	61 50       	subi	r22, 0x01	; 1
     f42:	70 40       	sbci	r23, 0x00	; 0
     f44:	01 90       	ld	r0, Z+
     f46:	01 10       	cpse	r0, r1
     f48:	d8 f7       	brcc	.-10     	; 0xf40 <strnlen+0x2>
     f4a:	80 95       	com	r24
     f4c:	90 95       	com	r25
     f4e:	8e 0f       	add	r24, r30
     f50:	9f 1f       	adc	r25, r31
     f52:	08 95       	ret

00000f54 <fputc>:
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	fb 01       	movw	r30, r22
     f5e:	23 81       	ldd	r18, Z+3	; 0x03
     f60:	21 fd       	sbrc	r18, 1
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <fputc+0x16>
     f64:	8f ef       	ldi	r24, 0xFF	; 255
     f66:	9f ef       	ldi	r25, 0xFF	; 255
     f68:	2c c0       	rjmp	.+88     	; 0xfc2 <fputc+0x6e>
     f6a:	22 ff       	sbrs	r18, 2
     f6c:	16 c0       	rjmp	.+44     	; 0xf9a <fputc+0x46>
     f6e:	46 81       	ldd	r20, Z+6	; 0x06
     f70:	57 81       	ldd	r21, Z+7	; 0x07
     f72:	24 81       	ldd	r18, Z+4	; 0x04
     f74:	35 81       	ldd	r19, Z+5	; 0x05
     f76:	42 17       	cp	r20, r18
     f78:	53 07       	cpc	r21, r19
     f7a:	44 f4       	brge	.+16     	; 0xf8c <fputc+0x38>
     f7c:	a0 81       	ld	r26, Z
     f7e:	b1 81       	ldd	r27, Z+1	; 0x01
     f80:	9d 01       	movw	r18, r26
     f82:	2f 5f       	subi	r18, 0xFF	; 255
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	31 83       	std	Z+1, r19	; 0x01
     f88:	20 83       	st	Z, r18
     f8a:	8c 93       	st	X, r24
     f8c:	26 81       	ldd	r18, Z+6	; 0x06
     f8e:	37 81       	ldd	r19, Z+7	; 0x07
     f90:	2f 5f       	subi	r18, 0xFF	; 255
     f92:	3f 4f       	sbci	r19, 0xFF	; 255
     f94:	37 83       	std	Z+7, r19	; 0x07
     f96:	26 83       	std	Z+6, r18	; 0x06
     f98:	14 c0       	rjmp	.+40     	; 0xfc2 <fputc+0x6e>
     f9a:	8b 01       	movw	r16, r22
     f9c:	ec 01       	movw	r28, r24
     f9e:	fb 01       	movw	r30, r22
     fa0:	00 84       	ldd	r0, Z+8	; 0x08
     fa2:	f1 85       	ldd	r31, Z+9	; 0x09
     fa4:	e0 2d       	mov	r30, r0
     fa6:	09 95       	icall
     fa8:	89 2b       	or	r24, r25
     faa:	e1 f6       	brne	.-72     	; 0xf64 <fputc+0x10>
     fac:	d8 01       	movw	r26, r16
     fae:	16 96       	adiw	r26, 0x06	; 6
     fb0:	8d 91       	ld	r24, X+
     fb2:	9c 91       	ld	r25, X
     fb4:	17 97       	sbiw	r26, 0x07	; 7
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	17 96       	adiw	r26, 0x07	; 7
     fba:	9c 93       	st	X, r25
     fbc:	8e 93       	st	-X, r24
     fbe:	16 97       	sbiw	r26, 0x06	; 6
     fc0:	ce 01       	movw	r24, r28
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	08 95       	ret

00000fcc <__ultoa_invert>:
     fcc:	fa 01       	movw	r30, r20
     fce:	aa 27       	eor	r26, r26
     fd0:	28 30       	cpi	r18, 0x08	; 8
     fd2:	51 f1       	breq	.+84     	; 0x1028 <__ultoa_invert+0x5c>
     fd4:	20 31       	cpi	r18, 0x10	; 16
     fd6:	81 f1       	breq	.+96     	; 0x1038 <__ultoa_invert+0x6c>
     fd8:	e8 94       	clt
     fda:	6f 93       	push	r22
     fdc:	6e 7f       	andi	r22, 0xFE	; 254
     fde:	6e 5f       	subi	r22, 0xFE	; 254
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	af 4f       	sbci	r26, 0xFF	; 255
     fe8:	b1 e0       	ldi	r27, 0x01	; 1
     fea:	3e d0       	rcall	.+124    	; 0x1068 <__ultoa_invert+0x9c>
     fec:	b4 e0       	ldi	r27, 0x04	; 4
     fee:	3c d0       	rcall	.+120    	; 0x1068 <__ultoa_invert+0x9c>
     ff0:	67 0f       	add	r22, r23
     ff2:	78 1f       	adc	r23, r24
     ff4:	89 1f       	adc	r24, r25
     ff6:	9a 1f       	adc	r25, r26
     ff8:	a1 1d       	adc	r26, r1
     ffa:	68 0f       	add	r22, r24
     ffc:	79 1f       	adc	r23, r25
     ffe:	8a 1f       	adc	r24, r26
    1000:	91 1d       	adc	r25, r1
    1002:	a1 1d       	adc	r26, r1
    1004:	6a 0f       	add	r22, r26
    1006:	71 1d       	adc	r23, r1
    1008:	81 1d       	adc	r24, r1
    100a:	91 1d       	adc	r25, r1
    100c:	a1 1d       	adc	r26, r1
    100e:	20 d0       	rcall	.+64     	; 0x1050 <__ultoa_invert+0x84>
    1010:	09 f4       	brne	.+2      	; 0x1014 <__ultoa_invert+0x48>
    1012:	68 94       	set
    1014:	3f 91       	pop	r19
    1016:	2a e0       	ldi	r18, 0x0A	; 10
    1018:	26 9f       	mul	r18, r22
    101a:	11 24       	eor	r1, r1
    101c:	30 19       	sub	r19, r0
    101e:	30 5d       	subi	r19, 0xD0	; 208
    1020:	31 93       	st	Z+, r19
    1022:	de f6       	brtc	.-74     	; 0xfda <__ultoa_invert+0xe>
    1024:	cf 01       	movw	r24, r30
    1026:	08 95       	ret
    1028:	46 2f       	mov	r20, r22
    102a:	47 70       	andi	r20, 0x07	; 7
    102c:	40 5d       	subi	r20, 0xD0	; 208
    102e:	41 93       	st	Z+, r20
    1030:	b3 e0       	ldi	r27, 0x03	; 3
    1032:	0f d0       	rcall	.+30     	; 0x1052 <__ultoa_invert+0x86>
    1034:	c9 f7       	brne	.-14     	; 0x1028 <__ultoa_invert+0x5c>
    1036:	f6 cf       	rjmp	.-20     	; 0x1024 <__ultoa_invert+0x58>
    1038:	46 2f       	mov	r20, r22
    103a:	4f 70       	andi	r20, 0x0F	; 15
    103c:	40 5d       	subi	r20, 0xD0	; 208
    103e:	4a 33       	cpi	r20, 0x3A	; 58
    1040:	18 f0       	brcs	.+6      	; 0x1048 <__ultoa_invert+0x7c>
    1042:	49 5d       	subi	r20, 0xD9	; 217
    1044:	31 fd       	sbrc	r19, 1
    1046:	40 52       	subi	r20, 0x20	; 32
    1048:	41 93       	st	Z+, r20
    104a:	02 d0       	rcall	.+4      	; 0x1050 <__ultoa_invert+0x84>
    104c:	a9 f7       	brne	.-22     	; 0x1038 <__ultoa_invert+0x6c>
    104e:	ea cf       	rjmp	.-44     	; 0x1024 <__ultoa_invert+0x58>
    1050:	b4 e0       	ldi	r27, 0x04	; 4
    1052:	a6 95       	lsr	r26
    1054:	97 95       	ror	r25
    1056:	87 95       	ror	r24
    1058:	77 95       	ror	r23
    105a:	67 95       	ror	r22
    105c:	ba 95       	dec	r27
    105e:	c9 f7       	brne	.-14     	; 0x1052 <__ultoa_invert+0x86>
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 05       	cpc	r22, r1
    1064:	71 05       	cpc	r23, r1
    1066:	08 95       	ret
    1068:	9b 01       	movw	r18, r22
    106a:	ac 01       	movw	r20, r24
    106c:	0a 2e       	mov	r0, r26
    106e:	06 94       	lsr	r0
    1070:	57 95       	ror	r21
    1072:	47 95       	ror	r20
    1074:	37 95       	ror	r19
    1076:	27 95       	ror	r18
    1078:	ba 95       	dec	r27
    107a:	c9 f7       	brne	.-14     	; 0x106e <__ultoa_invert+0xa2>
    107c:	62 0f       	add	r22, r18
    107e:	73 1f       	adc	r23, r19
    1080:	84 1f       	adc	r24, r20
    1082:	95 1f       	adc	r25, r21
    1084:	a0 1d       	adc	r26, r0
    1086:	08 95       	ret

00001088 <eeprom_read_byte>:
    1088:	f9 99       	sbic	0x1f, 1	; 31
    108a:	fe cf       	rjmp	.-4      	; 0x1088 <eeprom_read_byte>
    108c:	92 bd       	out	0x22, r25	; 34
    108e:	81 bd       	out	0x21, r24	; 33
    1090:	f8 9a       	sbi	0x1f, 0	; 31
    1092:	99 27       	eor	r25, r25
    1094:	80 b5       	in	r24, 0x20	; 32
    1096:	08 95       	ret

00001098 <eeprom_write_byte>:
    1098:	26 2f       	mov	r18, r22

0000109a <eeprom_write_r18>:
    109a:	f9 99       	sbic	0x1f, 1	; 31
    109c:	fe cf       	rjmp	.-4      	; 0x109a <eeprom_write_r18>
    109e:	1f ba       	out	0x1f, r1	; 31
    10a0:	92 bd       	out	0x22, r25	; 34
    10a2:	81 bd       	out	0x21, r24	; 33
    10a4:	20 bd       	out	0x20, r18	; 32
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	fa 9a       	sbi	0x1f, 2	; 31
    10ac:	f9 9a       	sbi	0x1f, 1	; 31
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	08 95       	ret

000010b4 <__prologue_saves__>:
    10b4:	2f 92       	push	r2
    10b6:	3f 92       	push	r3
    10b8:	4f 92       	push	r4
    10ba:	5f 92       	push	r5
    10bc:	6f 92       	push	r6
    10be:	7f 92       	push	r7
    10c0:	8f 92       	push	r8
    10c2:	9f 92       	push	r9
    10c4:	af 92       	push	r10
    10c6:	bf 92       	push	r11
    10c8:	cf 92       	push	r12
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	ca 1b       	sub	r28, r26
    10de:	db 0b       	sbc	r29, r27
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	09 94       	ijmp

000010ec <__epilogue_restores__>:
    10ec:	2a 88       	ldd	r2, Y+18	; 0x12
    10ee:	39 88       	ldd	r3, Y+17	; 0x11
    10f0:	48 88       	ldd	r4, Y+16	; 0x10
    10f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    10f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    10f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    10f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    10fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    10fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    10fe:	b9 84       	ldd	r11, Y+9	; 0x09
    1100:	c8 84       	ldd	r12, Y+8	; 0x08
    1102:	df 80       	ldd	r13, Y+7	; 0x07
    1104:	ee 80       	ldd	r14, Y+6	; 0x06
    1106:	fd 80       	ldd	r15, Y+5	; 0x05
    1108:	0c 81       	ldd	r16, Y+4	; 0x04
    110a:	1b 81       	ldd	r17, Y+3	; 0x03
    110c:	aa 81       	ldd	r26, Y+2	; 0x02
    110e:	b9 81       	ldd	r27, Y+1	; 0x01
    1110:	ce 0f       	add	r28, r30
    1112:	d1 1d       	adc	r29, r1
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	ed 01       	movw	r28, r26
    1120:	08 95       	ret

00001122 <_exit>:
    1122:	f8 94       	cli

00001124 <__stop_program>:
    1124:	ff cf       	rjmp	.-2      	; 0x1124 <__stop_program>
