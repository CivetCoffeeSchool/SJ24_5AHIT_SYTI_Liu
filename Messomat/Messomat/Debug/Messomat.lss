
Messomat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000db0  00000e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005e  00800120  00800120  00000e64  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017e4  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c58  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dcc  00000000  00000000  0000348c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00004258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066d  00000000  00000000  000045e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010f5  00000000  00000000  00004c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005d4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_18>
  4c:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 37       	cpi	r26, 0x7E	; 126
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <main>
  9e:	0c 94 d6 06 	jmp	0xdac	; 0xdac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <dht_getdata>:
#elif DHT_FLOAT == 0
int8_t dht_gethumidity(int8_t *humidity) {
	int8_t temperature = 0;
#endif
	return dht_getdata(&temperature, humidity);
}
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	00 d0       	rcall	.+0      	; 0xae <dht_getdata+0x8>
  ae:	00 d0       	rcall	.+0      	; 0xb0 <dht_getdata+0xa>
  b0:	1f 92       	push	r1
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	fc 01       	movw	r30, r24
  b8:	9e 01       	movw	r18, r28
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	d9 01       	movw	r26, r18
  c2:	1d 92       	st	X+, r1
  c4:	8a 95       	dec	r24
  c6:	e9 f7       	brne	.-6      	; 0xc2 <dht_getdata+0x1c>
  c8:	87 b1       	in	r24, 0x07	; 7
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	87 b9       	out	0x07, r24	; 7
  ce:	98 b1       	in	r25, 0x08	; 8
  d0:	91 60       	ori	r25, 0x01	; 1
  d2:	98 b9       	out	0x08, r25	; 8
  d4:	bf ef       	ldi	r27, 0xFF	; 255
  d6:	21 ee       	ldi	r18, 0xE1	; 225
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	b1 50       	subi	r27, 0x01	; 1
  dc:	20 40       	sbci	r18, 0x00	; 0
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <dht_getdata+0x34>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <dht_getdata+0x3e>
  e4:	00 00       	nop
  e6:	98 b1       	in	r25, 0x08	; 8
  e8:	9e 7f       	andi	r25, 0xFE	; 254
  ea:	98 b9       	out	0x08, r25	; 8
  ec:	9f ef       	ldi	r25, 0xFF	; 255
  ee:	a0 ee       	ldi	r26, 0xE0	; 224
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	91 50       	subi	r25, 0x01	; 1
  f4:	a0 40       	sbci	r26, 0x00	; 0
  f6:	b0 40       	sbci	r27, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <dht_getdata+0x4c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <dht_getdata+0x56>
  fc:	00 00       	nop
  fe:	98 b1       	in	r25, 0x08	; 8
 100:	91 60       	ori	r25, 0x01	; 1
 102:	98 b9       	out	0x08, r25	; 8
 104:	97 b1       	in	r25, 0x07	; 7
 106:	9e 7f       	andi	r25, 0xFE	; 254
 108:	97 b9       	out	0x07, r25	; 7
 10a:	25 ed       	ldi	r18, 0xD5	; 213
 10c:	2a 95       	dec	r18
 10e:	f1 f7       	brne	.-4      	; 0x10c <dht_getdata+0x66>
 110:	00 00       	nop
 112:	30 99       	sbic	0x06, 0	; 6
 114:	65 c0       	rjmp	.+202    	; 0x1e0 <dht_getdata+0x13a>
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <dht_getdata+0x74>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <dht_getdata+0x7a>
 120:	00 00       	nop
 122:	30 9b       	sbis	0x06, 0	; 6
 124:	5f c0       	rjmp	.+190    	; 0x1e4 <dht_getdata+0x13e>
 126:	af e3       	ldi	r26, 0x3F	; 63
 128:	b1 e0       	ldi	r27, 0x01	; 1
 12a:	11 97       	sbiw	r26, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <dht_getdata+0x84>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <dht_getdata+0x8a>
 130:	00 00       	nop
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	34 c0       	rjmp	.+104    	; 0x19e <dht_getdata+0xf8>
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	29 3c       	cpi	r18, 0xC9	; 201
 13c:	31 05       	cpc	r19, r1
 13e:	18 f0       	brcs	.+6      	; 0x146 <dht_getdata+0xa0>
 140:	53 c0       	rjmp	.+166    	; 0x1e8 <dht_getdata+0x142>
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	30 9b       	sbis	0x06, 0	; 6
 148:	f6 cf       	rjmp	.-20     	; 0x136 <dht_getdata+0x90>
 14a:	b0 ea       	ldi	r27, 0xA0	; 160
 14c:	ba 95       	dec	r27
 14e:	f1 f7       	brne	.-4      	; 0x14c <dht_getdata+0xa6>
 150:	30 9b       	sbis	0x06, 0	; 6
 152:	0c c0       	rjmp	.+24     	; 0x16c <dht_getdata+0xc6>
 154:	47 e0       	ldi	r20, 0x07	; 7
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	49 1b       	sub	r20, r25
 15a:	51 09       	sbc	r21, r1
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <dht_getdata+0xc0>
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	4a 95       	dec	r20
 168:	e2 f7       	brpl	.-8      	; 0x162 <dht_getdata+0xbc>
 16a:	82 2b       	or	r24, r18
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	05 c0       	rjmp	.+10     	; 0x17c <dht_getdata+0xd6>
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	29 3c       	cpi	r18, 0xC9	; 201
 178:	31 05       	cpc	r19, r1
 17a:	c0 f5       	brcc	.+112    	; 0x1ec <dht_getdata+0x146>
 17c:	30 99       	sbic	0x06, 0	; 6
 17e:	f9 cf       	rjmp	.-14     	; 0x172 <dht_getdata+0xcc>
 180:	9f 5f       	subi	r25, 0xFF	; 255
 182:	02 c0       	rjmp	.+4      	; 0x188 <dht_getdata+0xe2>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	98 30       	cpi	r25, 0x08	; 8
 18a:	d8 f2       	brcs	.-74     	; 0x142 <dht_getdata+0x9c>
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	2c 0f       	add	r18, r28
 192:	3d 1f       	adc	r19, r29
 194:	21 0f       	add	r18, r17
 196:	31 1d       	adc	r19, r1
 198:	d9 01       	movw	r26, r18
 19a:	8c 93       	st	X, r24
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	15 30       	cpi	r17, 0x05	; 5
 1a0:	88 f3       	brcs	.-30     	; 0x184 <dht_getdata+0xde>
 1a2:	87 b1       	in	r24, 0x07	; 7
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	87 b9       	out	0x07, r24	; 7
 1a8:	88 b1       	in	r24, 0x08	; 8
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	88 b9       	out	0x08, r24	; 8
 1ae:	bf ef       	ldi	r27, 0xFF	; 255
 1b0:	21 ee       	ldi	r18, 0xE1	; 225
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	b1 50       	subi	r27, 0x01	; 1
 1b6:	20 40       	sbci	r18, 0x00	; 0
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <dht_getdata+0x10e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <dht_getdata+0x118>
 1be:	00 00       	nop
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	9a 81       	ldd	r25, Y+2	; 0x02
 1c4:	3b 81       	ldd	r19, Y+3	; 0x03
 1c6:	2c 81       	ldd	r18, Y+4	; 0x04
 1c8:	89 0f       	add	r24, r25
 1ca:	83 0f       	add	r24, r19
 1cc:	82 0f       	add	r24, r18
 1ce:	9d 81       	ldd	r25, Y+5	; 0x05
 1d0:	89 13       	cpse	r24, r25
 1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <dht_getdata+0x14a>
 1d4:	30 83       	st	Z, r19
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	db 01       	movw	r26, r22
 1da:	8c 93       	st	X, r24
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <dht_getdata+0x14c>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <dht_getdata+0x14c>
 1e4:	8e ef       	ldi	r24, 0xFE	; 254
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <dht_getdata+0x14c>
 1e8:	8d ef       	ldi	r24, 0xFD	; 253
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <dht_getdata+0x14c>
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <dht_getdata+0x14c>
 1f0:	8b ef       	ldi	r24, 0xFB	; 251
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	08 95       	ret

00000204 <dht_gettemperaturehumidity>:
#if DHT_FLOAT == 1
int8_t dht_gettemperaturehumidity(float *temperature, float *humidity) {
#elif DHT_FLOAT == 0
	int8_t dht_gettemperaturehumidity(int8_t *temperature, int8_t *humidity) {
#endif
	return dht_getdata(temperature, humidity);
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <dht_getdata>
}
 208:	08 95       	ret

0000020a <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 20a:	88 b1       	in	r24, 0x08	; 8
 20c:	88 60       	ori	r24, 0x08	; 8
 20e:	88 b9       	out	0x08, r24	; 8
 210:	85 e0       	ldi	r24, 0x05	; 5
 212:	8a 95       	dec	r24
 214:	f1 f7       	brne	.-4      	; 0x212 <toggle_e+0x8>
 216:	00 00       	nop
 218:	88 b1       	in	r24, 0x08	; 8
 21a:	87 7f       	andi	r24, 0xF7	; 247
 21c:	88 b9       	out	0x08, r24	; 8
 21e:	08 95       	ret

00000220 <lcd_write>:
 220:	cf 93       	push	r28
 222:	c8 2f       	mov	r28, r24
 224:	66 23       	and	r22, r22
 226:	21 f0       	breq	.+8      	; 0x230 <lcd_write+0x10>
 228:	88 b1       	in	r24, 0x08	; 8
 22a:	80 62       	ori	r24, 0x20	; 32
 22c:	88 b9       	out	0x08, r24	; 8
 22e:	03 c0       	rjmp	.+6      	; 0x236 <lcd_write+0x16>
 230:	88 b1       	in	r24, 0x08	; 8
 232:	8f 7d       	andi	r24, 0xDF	; 223
 234:	88 b9       	out	0x08, r24	; 8
 236:	88 b1       	in	r24, 0x08	; 8
 238:	8f 7e       	andi	r24, 0xEF	; 239
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	8a b1       	in	r24, 0x0a	; 10
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	8a b9       	out	0x0a, r24	; 10
 242:	8a b1       	in	r24, 0x0a	; 10
 244:	80 62       	ori	r24, 0x20	; 32
 246:	8a b9       	out	0x0a, r24	; 10
 248:	8a b1       	in	r24, 0x0a	; 10
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	8a b9       	out	0x0a, r24	; 10
 24e:	8a b1       	in	r24, 0x0a	; 10
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8a b9       	out	0x0a, r24	; 10
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	8f 77       	andi	r24, 0x7F	; 127
 258:	8b b9       	out	0x0b, r24	; 11
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	8f 7b       	andi	r24, 0xBF	; 191
 25e:	8b b9       	out	0x0b, r24	; 11
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	8f 7d       	andi	r24, 0xDF	; 223
 264:	8b b9       	out	0x0b, r24	; 11
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	8f 7e       	andi	r24, 0xEF	; 239
 26a:	8b b9       	out	0x0b, r24	; 11
 26c:	cc 23       	and	r28, r28
 26e:	1c f4       	brge	.+6      	; 0x276 <lcd_write+0x56>
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	80 68       	ori	r24, 0x80	; 128
 274:	8b b9       	out	0x0b, r24	; 11
 276:	c6 ff       	sbrs	r28, 6
 278:	03 c0       	rjmp	.+6      	; 0x280 <lcd_write+0x60>
 27a:	8b b1       	in	r24, 0x0b	; 11
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	8b b9       	out	0x0b, r24	; 11
 280:	c5 ff       	sbrs	r28, 5
 282:	03 c0       	rjmp	.+6      	; 0x28a <lcd_write+0x6a>
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	80 62       	ori	r24, 0x20	; 32
 288:	8b b9       	out	0x0b, r24	; 11
 28a:	c4 ff       	sbrs	r28, 4
 28c:	03 c0       	rjmp	.+6      	; 0x294 <lcd_write+0x74>
 28e:	8b b1       	in	r24, 0x0b	; 11
 290:	80 61       	ori	r24, 0x10	; 16
 292:	8b b9       	out	0x0b, r24	; 11
 294:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 298:	8b b1       	in	r24, 0x0b	; 11
 29a:	8f 77       	andi	r24, 0x7F	; 127
 29c:	8b b9       	out	0x0b, r24	; 11
 29e:	8b b1       	in	r24, 0x0b	; 11
 2a0:	8f 7b       	andi	r24, 0xBF	; 191
 2a2:	8b b9       	out	0x0b, r24	; 11
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	8f 7d       	andi	r24, 0xDF	; 223
 2a8:	8b b9       	out	0x0b, r24	; 11
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	8f 7e       	andi	r24, 0xEF	; 239
 2ae:	8b b9       	out	0x0b, r24	; 11
 2b0:	c3 ff       	sbrs	r28, 3
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <lcd_write+0x9a>
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	80 68       	ori	r24, 0x80	; 128
 2b8:	8b b9       	out	0x0b, r24	; 11
 2ba:	c2 ff       	sbrs	r28, 2
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <lcd_write+0xa4>
 2be:	8b b1       	in	r24, 0x0b	; 11
 2c0:	80 64       	ori	r24, 0x40	; 64
 2c2:	8b b9       	out	0x0b, r24	; 11
 2c4:	c1 ff       	sbrs	r28, 1
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <lcd_write+0xae>
 2c8:	8b b1       	in	r24, 0x0b	; 11
 2ca:	80 62       	ori	r24, 0x20	; 32
 2cc:	8b b9       	out	0x0b, r24	; 11
 2ce:	c0 ff       	sbrs	r28, 0
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <lcd_write+0xb8>
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	80 61       	ori	r24, 0x10	; 16
 2d6:	8b b9       	out	0x0b, r24	; 11
 2d8:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 2dc:	8b b1       	in	r24, 0x0b	; 11
 2de:	80 61       	ori	r24, 0x10	; 16
 2e0:	8b b9       	out	0x0b, r24	; 11
 2e2:	8b b1       	in	r24, 0x0b	; 11
 2e4:	80 62       	ori	r24, 0x20	; 32
 2e6:	8b b9       	out	0x0b, r24	; 11
 2e8:	8b b1       	in	r24, 0x0b	; 11
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	8b b9       	out	0x0b, r24	; 11
 2ee:	8b b1       	in	r24, 0x0b	; 11
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	8b b9       	out	0x0b, r24	; 11
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <lcd_read>:
 2f8:	88 23       	and	r24, r24
 2fa:	21 f0       	breq	.+8      	; 0x304 <lcd_read+0xc>
 2fc:	88 b1       	in	r24, 0x08	; 8
 2fe:	80 62       	ori	r24, 0x20	; 32
 300:	88 b9       	out	0x08, r24	; 8
 302:	03 c0       	rjmp	.+6      	; 0x30a <lcd_read+0x12>
 304:	88 b1       	in	r24, 0x08	; 8
 306:	8f 7d       	andi	r24, 0xDF	; 223
 308:	88 b9       	out	0x08, r24	; 8
 30a:	88 b1       	in	r24, 0x08	; 8
 30c:	80 61       	ori	r24, 0x10	; 16
 30e:	88 b9       	out	0x08, r24	; 8
 310:	8a b1       	in	r24, 0x0a	; 10
 312:	8f 7e       	andi	r24, 0xEF	; 239
 314:	8a b9       	out	0x0a, r24	; 10
 316:	8a b1       	in	r24, 0x0a	; 10
 318:	8f 7d       	andi	r24, 0xDF	; 223
 31a:	8a b9       	out	0x0a, r24	; 10
 31c:	8a b1       	in	r24, 0x0a	; 10
 31e:	8f 7b       	andi	r24, 0xBF	; 191
 320:	8a b9       	out	0x0a, r24	; 10
 322:	8a b1       	in	r24, 0x0a	; 10
 324:	8f 77       	andi	r24, 0x7F	; 127
 326:	8a b9       	out	0x0a, r24	; 10
 328:	88 b1       	in	r24, 0x08	; 8
 32a:	88 60       	ori	r24, 0x08	; 8
 32c:	88 b9       	out	0x08, r24	; 8
 32e:	85 e0       	ldi	r24, 0x05	; 5
 330:	8a 95       	dec	r24
 332:	f1 f7       	brne	.-4      	; 0x330 <lcd_read+0x38>
 334:	00 00       	nop
 336:	4c 99       	sbic	0x09, 4	; 9
 338:	02 c0       	rjmp	.+4      	; 0x33e <lcd_read+0x46>
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	01 c0       	rjmp	.+2      	; 0x340 <lcd_read+0x48>
 33e:	80 e1       	ldi	r24, 0x10	; 16
 340:	4d 99       	sbic	0x09, 5	; 9
 342:	80 62       	ori	r24, 0x20	; 32
 344:	4e 99       	sbic	0x09, 6	; 9
 346:	80 64       	ori	r24, 0x40	; 64
 348:	4f 99       	sbic	0x09, 7	; 9
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	98 b1       	in	r25, 0x08	; 8
 34e:	97 7f       	andi	r25, 0xF7	; 247
 350:	98 b9       	out	0x08, r25	; 8
 352:	95 e0       	ldi	r25, 0x05	; 5
 354:	9a 95       	dec	r25
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd_read+0x5c>
 358:	00 00       	nop
 35a:	98 b1       	in	r25, 0x08	; 8
 35c:	98 60       	ori	r25, 0x08	; 8
 35e:	98 b9       	out	0x08, r25	; 8
 360:	95 e0       	ldi	r25, 0x05	; 5
 362:	9a 95       	dec	r25
 364:	f1 f7       	brne	.-4      	; 0x362 <lcd_read+0x6a>
 366:	00 00       	nop
 368:	4c 99       	sbic	0x09, 4	; 9
 36a:	81 60       	ori	r24, 0x01	; 1
 36c:	4d 99       	sbic	0x09, 5	; 9
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	4e 99       	sbic	0x09, 6	; 9
 372:	84 60       	ori	r24, 0x04	; 4
 374:	4f 99       	sbic	0x09, 7	; 9
 376:	88 60       	ori	r24, 0x08	; 8
 378:	98 b1       	in	r25, 0x08	; 8
 37a:	97 7f       	andi	r25, 0xF7	; 247
 37c:	98 b9       	out	0x08, r25	; 8
 37e:	08 95       	ret

00000380 <lcd_waitbusy>:
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_read>
 386:	88 23       	and	r24, r24
 388:	dc f3       	brlt	.-10     	; 0x380 <lcd_waitbusy>
 38a:	85 e1       	ldi	r24, 0x15	; 21
 38c:	8a 95       	dec	r24
 38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_waitbusy+0xc>
 390:	00 00       	nop
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_read>
 398:	08 95       	ret

0000039a <lcd_command>:
 39a:	cf 93       	push	r28
 39c:	c8 2f       	mov	r28, r24
 39e:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_waitbusy>
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	8c 2f       	mov	r24, r28
 3a6:	0e 94 10 01 	call	0x220	; 0x220 <lcd_write>
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <lcd_clrscr>:
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
 3b4:	08 95       	ret

000003b6 <lcd_putc>:
 3b6:	cf 93       	push	r28
 3b8:	c8 2f       	mov	r28, r24
 3ba:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_waitbusy>
 3be:	ca 30       	cpi	r28, 0x0A	; 10
 3c0:	49 f4       	brne	.+18     	; 0x3d4 <lcd_putc+0x1e>
 3c2:	80 34       	cpi	r24, 0x40	; 64
 3c4:	10 f4       	brcc	.+4      	; 0x3ca <lcd_putc+0x14>
 3c6:	80 e4       	ldi	r24, 0x40	; 64
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <lcd_putc+0x16>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	80 58       	subi	r24, 0x80	; 128
 3ce:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <lcd_putc+0x26>
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	8c 2f       	mov	r24, r28
 3d8:	0e 94 10 01 	call	0x220	; 0x220 <lcd_write>
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <lcd_puts>:
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	fc 01       	movw	r30, r24
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <lcd_puts+0xe>
 3e8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lcd_putc>
 3ec:	fe 01       	movw	r30, r28
 3ee:	ef 01       	movw	r28, r30
 3f0:	21 96       	adiw	r28, 0x01	; 1
 3f2:	80 81       	ld	r24, Z
 3f4:	81 11       	cpse	r24, r1
 3f6:	f8 cf       	rjmp	.-16     	; 0x3e8 <lcd_puts+0x8>
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3fe:	cf 93       	push	r28
 400:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 402:	87 b1       	in	r24, 0x07	; 7
 404:	80 62       	ori	r24, 0x20	; 32
 406:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 408:	87 b1       	in	r24, 0x07	; 7
 40a:	80 61       	ori	r24, 0x10	; 16
 40c:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 40e:	87 b1       	in	r24, 0x07	; 7
 410:	88 60       	ori	r24, 0x08	; 8
 412:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 414:	8a b1       	in	r24, 0x0a	; 10
 416:	80 61       	ori	r24, 0x10	; 16
 418:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 41a:	8a b1       	in	r24, 0x0a	; 10
 41c:	80 62       	ori	r24, 0x20	; 32
 41e:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 420:	8a b1       	in	r24, 0x0a	; 10
 422:	80 64       	ori	r24, 0x40	; 64
 424:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 426:	8a b1       	in	r24, 0x0a	; 10
 428:	80 68       	ori	r24, 0x80	; 128
 42a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	99 ef       	ldi	r25, 0xF9	; 249
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 436:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 438:	8b b1       	in	r24, 0x0b	; 11
 43a:	80 62       	ori	r24, 0x20	; 32
 43c:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 43e:	8b b1       	in	r24, 0x0b	; 11
 440:	80 61       	ori	r24, 0x10	; 16
 442:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 444:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 448:	8f e1       	ldi	r24, 0x1F	; 31
 44a:	9e e4       	ldi	r25, 0x4E	; 78
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 454:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 462:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 464:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 472:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 474:	8b b1       	in	r24, 0x0b	; 11
 476:	8f 7e       	andi	r24, 0xEF	; 239
 478:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 47a:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 47e:	8f ef       	ldi	r24, 0xFF	; 255
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 488:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 48a:	88 e2       	ldi	r24, 0x28	; 40
 48c:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 490:	88 e0       	ldi	r24, 0x08	; 8
 492:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 496:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 49a:	86 e0       	ldi	r24, 0x06	; 6
 49c:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 4a0:	8c 2f       	mov	r24, r28
 4a2:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>

}/* lcd_init */
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <timer1_init>:
volatile uint8_t currentHumidity;
volatile int8_t errorStatus;
volatile char buffer[20];

void timer1_init(void) {		// Set Timer1 für CTC-Modus
	TCCR1B |= (1 << WGM12);		// CTC-Modus
 4aa:	e1 e8       	ldi	r30, 0x81	; 129
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	88 60       	ori	r24, 0x08	; 8
 4b2:	80 83       	st	Z, r24
	OCR1A = 15624;				// 1 Sekunde bei 16 MHz und Prescaler 1024
 4b4:	88 e0       	ldi	r24, 0x08	; 8
 4b6:	9d e3       	ldi	r25, 0x3D	; 61
 4b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1 << CS12) | (1 << CS10);	// Prescaler 1024
 4c0:	80 81       	ld	r24, Z
 4c2:	85 60       	ori	r24, 0x05	; 5
 4c4:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);	// Output Compare A Interrupt aktivieren
 4c6:	ef e6       	ldi	r30, 0x6F	; 111
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	82 60       	ori	r24, 0x02	; 2
 4ce:	80 83       	st	Z, r24
 4d0:	08 95       	ret

000004d2 <check_input>:
}

void check_input(void){
	char command = uart_getc();
 4d2:	0e 94 ac 03 	call	0x758	; 0x758 <uart_getc>
	switch (command) {
 4d6:	99 27       	eor	r25, r25
 4d8:	81 34       	cpi	r24, 0x41	; 65
 4da:	91 05       	cpc	r25, r1
 4dc:	11 f1       	breq	.+68     	; 0x522 <check_input+0x50>
 4de:	30 f4       	brcc	.+12     	; 0x4ec <check_input+0x1a>
 4e0:	81 33       	cpi	r24, 0x31	; 49
 4e2:	91 05       	cpc	r25, r1
 4e4:	51 f0       	breq	.+20     	; 0x4fa <check_input+0x28>
 4e6:	c4 97       	sbiw	r24, 0x34	; 52
 4e8:	91 f0       	breq	.+36     	; 0x50e <check_input+0x3c>
 4ea:	08 95       	ret
 4ec:	84 36       	cpi	r24, 0x64	; 100
 4ee:	91 05       	cpc	r25, r1
 4f0:	e1 f0       	breq	.+56     	; 0x52a <check_input+0x58>
 4f2:	81 37       	cpi	r24, 0x71	; 113
 4f4:	91 05       	cpc	r25, r1
 4f6:	e9 f0       	breq	.+58     	; 0x532 <check_input+0x60>
 4f8:	08 95       	ret
		case '1':
			OCR1A = 15626;
 4fa:	8a e0       	ldi	r24, 0x0A	; 10
 4fc:	9d e3       	ldi	r25, 0x3D	; 61
 4fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 502:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			interval = 1;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <interval>
			break;
 50c:	08 95       	ret
		case '4':
			OCR1A = 62504;
 50e:	88 e2       	ldi	r24, 0x28	; 40
 510:	94 ef       	ldi	r25, 0xF4	; 244
 512:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 516:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			interval = 4;
 51a:	84 e0       	ldi	r24, 0x04	; 4
 51c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <interval>
			break;
 520:	08 95       	ret
		case 'A':
			ackReceived = 1;
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
			break;
 528:	08 95       	ret
		case 'd':
			sendFlag = 1;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <sendFlag>
			break;
 530:	08 95       	ret
		case 'q':
			sendFlag = 0;
 532:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <sendFlag>
 536:	08 95       	ret

00000538 <measure>:
			break;
	}
}

void measure(void){
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
	if(dht_gettemperaturehumidity(&currentTemp,&currentHumidity)== DHT_ERROR_NOERR)
 53c:	67 e6       	ldi	r22, 0x67	; 103
 53e:	71 e0       	ldi	r23, 0x01	; 1
 540:	8d e7       	ldi	r24, 0x7D	; 125
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	0e 94 02 01 	call	0x204	; 0x204 <dht_gettemperaturehumidity>
 548:	81 11       	cpse	r24, r1
 54a:	4d c0       	rjmp	.+154    	; 0x5e6 <measure+0xae>
	{
		//anzeigen
		sprintf(buffer,"T:%dC H:%d%%",currentTemp,currentHumidity);
 54c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <currentHumidity>
 550:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <currentTemp>
 554:	1f 92       	push	r1
 556:	9f 93       	push	r25
 558:	1f 92       	push	r1
 55a:	8f 93       	push	r24
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	9f 93       	push	r25
 562:	8f 93       	push	r24
 564:	c9 e6       	ldi	r28, 0x69	; 105
 566:	d1 e0       	ldi	r29, 0x01	; 1
 568:	df 93       	push	r29
 56a:	cf 93       	push	r28
 56c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <sprintf>
		lcd_clrscr();
 570:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_clrscr>
		lcd_puts(buffer);
 574:	ce 01       	movw	r24, r28
 576:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_puts>
			
		// Nachricht senden
		//retryCount = 0;
		//ackReceived = 0;
		seqNumber++;
 57a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 57e:	8f 5f       	subi	r24, 0xFF	; 255
 580:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		//while (retryCount < 3 && !ackReceived) {
			sprintf(buffer, "DATE%d|HU%d|SN%d", currentTemp, currentHumidity, seqNumber);
 584:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 588:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <currentHumidity>
 58c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <currentTemp>
 590:	1f 92       	push	r1
 592:	2f 93       	push	r18
 594:	1f 92       	push	r1
 596:	9f 93       	push	r25
 598:	1f 92       	push	r1
 59a:	8f 93       	push	r24
 59c:	8f e0       	ldi	r24, 0x0F	; 15
 59e:	91 e0       	ldi	r25, 0x01	; 1
 5a0:	9f 93       	push	r25
 5a2:	8f 93       	push	r24
 5a4:	df 93       	push	r29
 5a6:	cf 93       	push	r28
 5a8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <sprintf>
			uart_putc(0x02);
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	0e 94 ca 03 	call	0x794	; 0x794 <uart_putc>
			uart_puts(buffer);
 5b2:	ce 01       	movw	r24, r28
 5b4:	0e 94 df 03 	call	0x7be	; 0x7be <uart_puts>
			uart_putc(0x03);/*
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	0e 94 ca 03 	call	0x794	; 0x794 <uart_putc>
			retryCount++;
			check_input();
		}*/
			
		//LED
		if (!ackReceived) {
 5be:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 5c2:	2d b7       	in	r18, 0x3d	; 61
 5c4:	3e b7       	in	r19, 0x3e	; 62
 5c6:	2e 5e       	subi	r18, 0xEE	; 238
 5c8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	3e bf       	out	0x3e, r19	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	2d bf       	out	0x3d, r18	; 61
 5d4:	81 11       	cpse	r24, r1
 5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <measure+0xa8>
			PORTB |= (1 << PORTB0); // LED an
 5d8:	85 b1       	in	r24, 0x05	; 5
 5da:	81 60       	ori	r24, 0x01	; 1
 5dc:	85 b9       	out	0x05, r24	; 5
 5de:	03 c0       	rjmp	.+6      	; 0x5e6 <measure+0xae>
			} else {
			PORTB &= ~(1 << PORTB0); // LED aus
 5e0:	85 b1       	in	r24, 0x05	; 5
 5e2:	8e 7f       	andi	r24, 0xFE	; 254
 5e4:	85 b9       	out	0x05, r24	; 5
		}
	}
}
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <main>:

int main(void)
{
	lcd_init(LCD_DISP_ON);
 5ec:	8c e0       	ldi	r24, 0x0C	; 12
 5ee:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_init>
	lcd_clrscr();
 5f2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_clrscr>

	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
 5f6:	87 e6       	ldi	r24, 0x67	; 103
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 91 03 	call	0x722	; 0x722 <uart_init>
	timer1_init();
 5fe:	0e 94 55 02 	call	0x4aa	; 0x4aa <timer1_init>
	sei();
 602:	78 94       	sei
	
	sendFlag =1;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <sendFlag>
    while (1) 
    {
		check_input();
 60a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <check_input>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60e:	2f ef       	ldi	r18, 0xFF	; 255
 610:	80 e7       	ldi	r24, 0x70	; 112
 612:	92 e0       	ldi	r25, 0x02	; 2
 614:	21 50       	subi	r18, 0x01	; 1
 616:	80 40       	sbci	r24, 0x00	; 0
 618:	90 40       	sbci	r25, 0x00	; 0
 61a:	e1 f7       	brne	.-8      	; 0x614 <main+0x28>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <main+0x32>
 61e:	00 00       	nop
 620:	f4 cf       	rjmp	.-24     	; 0x60a <main+0x1e>

00000622 <__vector_11>:
		_delay_ms(50);
    }
}


ISR(TIMER1_COMPA_vect) {
 622:	1f 92       	push	r1
 624:	0f 92       	push	r0
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	0f 92       	push	r0
 62a:	11 24       	eor	r1, r1
 62c:	2f 93       	push	r18
 62e:	3f 93       	push	r19
 630:	4f 93       	push	r20
 632:	5f 93       	push	r21
 634:	6f 93       	push	r22
 636:	7f 93       	push	r23
 638:	8f 93       	push	r24
 63a:	9f 93       	push	r25
 63c:	af 93       	push	r26
 63e:	bf 93       	push	r27
 640:	ef 93       	push	r30
 642:	ff 93       	push	r31
	if (sendFlag == 1){
 644:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sendFlag>
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	11 f4       	brne	.+4      	; 0x650 <__vector_11+0x2e>
		measure();
 64c:	0e 94 9c 02 	call	0x538	; 0x538 <measure>
	}
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	bf 91       	pop	r27
 656:	af 91       	pop	r26
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	7f 91       	pop	r23
 65e:	6f 91       	pop	r22
 660:	5f 91       	pop	r21
 662:	4f 91       	pop	r20
 664:	3f 91       	pop	r19
 666:	2f 91       	pop	r18
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 672:	1f 92       	push	r1
 674:	0f 92       	push	r0
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	0f 92       	push	r0
 67a:	11 24       	eor	r1, r1
 67c:	2f 93       	push	r18
 67e:	8f 93       	push	r24
 680:	9f 93       	push	r25
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 686:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 68a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 68e:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 690:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <UART_RxHead>
 694:	ef 5f       	subi	r30, 0xFF	; 255
 696:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 698:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_RxTail>
 69c:	e9 17       	cp	r30, r25
 69e:	39 f0       	breq	.+14     	; 0x6ae <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 6a0:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	e9 5d       	subi	r30, 0xD9	; 217
 6a8:	fe 4f       	sbci	r31, 0xFE	; 254
 6aa:	20 83       	st	Z, r18
 6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 6ae:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 6b0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <UART_LastRxError>
 6b4:	89 2b       	or	r24, r25
 6b6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <UART_LastRxError>
}
 6ba:	ff 91       	pop	r31
 6bc:	ef 91       	pop	r30
 6be:	9f 91       	pop	r25
 6c0:	8f 91       	pop	r24
 6c2:	2f 91       	pop	r18
 6c4:	0f 90       	pop	r0
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	0f 90       	pop	r0
 6ca:	1f 90       	pop	r1
 6cc:	18 95       	reti

000006ce <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 6ce:	1f 92       	push	r1
 6d0:	0f 92       	push	r0
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	0f 92       	push	r0
 6d6:	11 24       	eor	r1, r1
 6d8:	8f 93       	push	r24
 6da:	9f 93       	push	r25
 6dc:	ef 93       	push	r30
 6de:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 6e0:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <UART_TxHead>
 6e4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <UART_TxTail>
 6e8:	98 17       	cp	r25, r24
 6ea:	69 f0       	breq	.+26     	; 0x706 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 6ec:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <UART_TxTail>
 6f0:	ef 5f       	subi	r30, 0xFF	; 255
 6f2:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 6f4:	e0 93 25 01 	sts	0x0125, r30	; 0x800125 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	e9 5b       	subi	r30, 0xB9	; 185
 6fc:	fe 4f       	sbci	r31, 0xFE	; 254
 6fe:	80 81       	ld	r24, Z
 700:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 704:	05 c0       	rjmp	.+10     	; 0x710 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 706:	e1 ec       	ldi	r30, 0xC1	; 193
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	8f 7d       	andi	r24, 0xDF	; 223
 70e:	80 83       	st	Z, r24
    }
}
 710:	ff 91       	pop	r31
 712:	ef 91       	pop	r30
 714:	9f 91       	pop	r25
 716:	8f 91       	pop	r24
 718:	0f 90       	pop	r0
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	0f 90       	pop	r0
 71e:	1f 90       	pop	r1
 720:	18 95       	reti

00000722 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 722:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <UART_TxHead>
    UART_TxTail = 0;
 726:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <UART_TxTail>
    UART_RxHead = 0;
 72a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_RxHead>
    UART_RxTail = 0;
 72e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_RxTail>
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 732:	28 2f       	mov	r18, r24
 734:	39 2f       	mov	r19, r25
 736:	33 23       	and	r19, r19
 738:	1c f4       	brge	.+6      	; 0x740 <uart_init+0x1e>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 73a:	22 e0       	ldi	r18, 0x02	; 2
 73c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 740:	90 78       	andi	r25, 0x80	; 128
 742:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 746:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 74a:	88 e9       	ldi	r24, 0x98	; 152
 74c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 750:	86 e0       	ldi	r24, 0x06	; 6
 752:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 756:	08 95       	ret

00000758 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 758:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <UART_RxHead>
 75c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <UART_RxTail>
 760:	98 17       	cp	r25, r24
 762:	a9 f0       	breq	.+42     	; 0x78e <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 764:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_RxTail>
 768:	9f 5f       	subi	r25, 0xFF	; 255
 76a:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 76c:	e9 2f       	mov	r30, r25
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	e9 5d       	subi	r30, 0xD9	; 217
 772:	fe 4f       	sbci	r31, 0xFE	; 254
 774:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 776:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <UART_LastRxError>
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 77a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <UART_RxTail>
    
    UART_LastRxError = 0;
 77e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_LastRxError>
    return (lastRxError << 8) + data;
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	98 2f       	mov	r25, r24
 786:	88 27       	eor	r24, r24
 788:	82 0f       	add	r24, r18
 78a:	91 1d       	adc	r25, r1
 78c:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 792:	08 95       	ret

00000794 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 794:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <UART_TxHead>
 798:	2f 5f       	subi	r18, 0xFF	; 255
 79a:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 79c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_TxTail>
 7a0:	29 17       	cp	r18, r25
 7a2:	e1 f3       	breq	.-8      	; 0x79c <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 7a4:	e2 2f       	mov	r30, r18
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	e9 5b       	subi	r30, 0xB9	; 185
 7aa:	fe 4f       	sbci	r31, 0xFE	; 254
 7ac:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 7ae:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 7b2:	e1 ec       	ldi	r30, 0xC1	; 193
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	80 81       	ld	r24, Z
 7b8:	80 62       	ori	r24, 0x20	; 32
 7ba:	80 83       	st	Z, r24
 7bc:	08 95       	ret

000007be <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	ec 01       	movw	r28, r24
    while (*s) 
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <uart_puts+0xe>
      uart_putc(*s++);
 7c6:	21 96       	adiw	r28, 0x01	; 1
 7c8:	0e 94 ca 03 	call	0x794	; 0x794 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 7cc:	88 81       	ld	r24, Y
 7ce:	81 11       	cpse	r24, r1
 7d0:	fa cf       	rjmp	.-12     	; 0x7c6 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	08 95       	ret

000007d8 <sprintf>:
 7d8:	ae e0       	ldi	r26, 0x0E	; 14
 7da:	b0 e0       	ldi	r27, 0x00	; 0
 7dc:	e2 ef       	ldi	r30, 0xF2	; 242
 7de:	f3 e0       	ldi	r31, 0x03	; 3
 7e0:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__prologue_saves__+0x1c>
 7e4:	0d 89       	ldd	r16, Y+21	; 0x15
 7e6:	1e 89       	ldd	r17, Y+22	; 0x16
 7e8:	86 e0       	ldi	r24, 0x06	; 6
 7ea:	8c 83       	std	Y+4, r24	; 0x04
 7ec:	1a 83       	std	Y+2, r17	; 0x02
 7ee:	09 83       	std	Y+1, r16	; 0x01
 7f0:	8f ef       	ldi	r24, 0xFF	; 255
 7f2:	9f e7       	ldi	r25, 0x7F	; 127
 7f4:	9e 83       	std	Y+6, r25	; 0x06
 7f6:	8d 83       	std	Y+5, r24	; 0x05
 7f8:	ae 01       	movw	r20, r28
 7fa:	47 5e       	subi	r20, 0xE7	; 231
 7fc:	5f 4f       	sbci	r21, 0xFF	; 255
 7fe:	6f 89       	ldd	r22, Y+23	; 0x17
 800:	78 8d       	ldd	r23, Y+24	; 0x18
 802:	ce 01       	movw	r24, r28
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	0e 94 0e 04 	call	0x81c	; 0x81c <vfprintf>
 80a:	ef 81       	ldd	r30, Y+7	; 0x07
 80c:	f8 85       	ldd	r31, Y+8	; 0x08
 80e:	e0 0f       	add	r30, r16
 810:	f1 1f       	adc	r31, r17
 812:	10 82       	st	Z, r1
 814:	2e 96       	adiw	r28, 0x0e	; 14
 816:	e4 e0       	ldi	r30, 0x04	; 4
 818:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__epilogue_restores__+0x1c>

0000081c <vfprintf>:
 81c:	ab e0       	ldi	r26, 0x0B	; 11
 81e:	b0 e0       	ldi	r27, 0x00	; 0
 820:	e4 e1       	ldi	r30, 0x14	; 20
 822:	f4 e0       	ldi	r31, 0x04	; 4
 824:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__prologue_saves__>
 828:	6c 01       	movw	r12, r24
 82a:	7b 01       	movw	r14, r22
 82c:	8a 01       	movw	r16, r20
 82e:	fc 01       	movw	r30, r24
 830:	17 82       	std	Z+7, r1	; 0x07
 832:	16 82       	std	Z+6, r1	; 0x06
 834:	83 81       	ldd	r24, Z+3	; 0x03
 836:	81 ff       	sbrs	r24, 1
 838:	cc c1       	rjmp	.+920    	; 0xbd2 <__stack+0x2d3>
 83a:	ce 01       	movw	r24, r28
 83c:	01 96       	adiw	r24, 0x01	; 1
 83e:	3c 01       	movw	r6, r24
 840:	f6 01       	movw	r30, r12
 842:	93 81       	ldd	r25, Z+3	; 0x03
 844:	f7 01       	movw	r30, r14
 846:	93 fd       	sbrc	r25, 3
 848:	85 91       	lpm	r24, Z+
 84a:	93 ff       	sbrs	r25, 3
 84c:	81 91       	ld	r24, Z+
 84e:	7f 01       	movw	r14, r30
 850:	88 23       	and	r24, r24
 852:	09 f4       	brne	.+2      	; 0x856 <vfprintf+0x3a>
 854:	ba c1       	rjmp	.+884    	; 0xbca <__stack+0x2cb>
 856:	85 32       	cpi	r24, 0x25	; 37
 858:	39 f4       	brne	.+14     	; 0x868 <vfprintf+0x4c>
 85a:	93 fd       	sbrc	r25, 3
 85c:	85 91       	lpm	r24, Z+
 85e:	93 ff       	sbrs	r25, 3
 860:	81 91       	ld	r24, Z+
 862:	7f 01       	movw	r14, r30
 864:	85 32       	cpi	r24, 0x25	; 37
 866:	29 f4       	brne	.+10     	; 0x872 <vfprintf+0x56>
 868:	b6 01       	movw	r22, r12
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 870:	e7 cf       	rjmp	.-50     	; 0x840 <vfprintf+0x24>
 872:	91 2c       	mov	r9, r1
 874:	21 2c       	mov	r2, r1
 876:	31 2c       	mov	r3, r1
 878:	ff e1       	ldi	r31, 0x1F	; 31
 87a:	f3 15       	cp	r31, r3
 87c:	d8 f0       	brcs	.+54     	; 0x8b4 <vfprintf+0x98>
 87e:	8b 32       	cpi	r24, 0x2B	; 43
 880:	79 f0       	breq	.+30     	; 0x8a0 <vfprintf+0x84>
 882:	38 f4       	brcc	.+14     	; 0x892 <vfprintf+0x76>
 884:	80 32       	cpi	r24, 0x20	; 32
 886:	79 f0       	breq	.+30     	; 0x8a6 <vfprintf+0x8a>
 888:	83 32       	cpi	r24, 0x23	; 35
 88a:	a1 f4       	brne	.+40     	; 0x8b4 <vfprintf+0x98>
 88c:	23 2d       	mov	r18, r3
 88e:	20 61       	ori	r18, 0x10	; 16
 890:	1d c0       	rjmp	.+58     	; 0x8cc <vfprintf+0xb0>
 892:	8d 32       	cpi	r24, 0x2D	; 45
 894:	61 f0       	breq	.+24     	; 0x8ae <vfprintf+0x92>
 896:	80 33       	cpi	r24, 0x30	; 48
 898:	69 f4       	brne	.+26     	; 0x8b4 <vfprintf+0x98>
 89a:	23 2d       	mov	r18, r3
 89c:	21 60       	ori	r18, 0x01	; 1
 89e:	16 c0       	rjmp	.+44     	; 0x8cc <vfprintf+0xb0>
 8a0:	83 2d       	mov	r24, r3
 8a2:	82 60       	ori	r24, 0x02	; 2
 8a4:	38 2e       	mov	r3, r24
 8a6:	e3 2d       	mov	r30, r3
 8a8:	e4 60       	ori	r30, 0x04	; 4
 8aa:	3e 2e       	mov	r3, r30
 8ac:	2a c0       	rjmp	.+84     	; 0x902 <__stack+0x3>
 8ae:	f3 2d       	mov	r31, r3
 8b0:	f8 60       	ori	r31, 0x08	; 8
 8b2:	1d c0       	rjmp	.+58     	; 0x8ee <vfprintf+0xd2>
 8b4:	37 fc       	sbrc	r3, 7
 8b6:	2d c0       	rjmp	.+90     	; 0x912 <__stack+0x13>
 8b8:	20 ed       	ldi	r18, 0xD0	; 208
 8ba:	28 0f       	add	r18, r24
 8bc:	2a 30       	cpi	r18, 0x0A	; 10
 8be:	40 f0       	brcs	.+16     	; 0x8d0 <vfprintf+0xb4>
 8c0:	8e 32       	cpi	r24, 0x2E	; 46
 8c2:	b9 f4       	brne	.+46     	; 0x8f2 <vfprintf+0xd6>
 8c4:	36 fc       	sbrc	r3, 6
 8c6:	81 c1       	rjmp	.+770    	; 0xbca <__stack+0x2cb>
 8c8:	23 2d       	mov	r18, r3
 8ca:	20 64       	ori	r18, 0x40	; 64
 8cc:	32 2e       	mov	r3, r18
 8ce:	19 c0       	rjmp	.+50     	; 0x902 <__stack+0x3>
 8d0:	36 fe       	sbrs	r3, 6
 8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <vfprintf+0xc4>
 8d4:	8a e0       	ldi	r24, 0x0A	; 10
 8d6:	98 9e       	mul	r9, r24
 8d8:	20 0d       	add	r18, r0
 8da:	11 24       	eor	r1, r1
 8dc:	92 2e       	mov	r9, r18
 8de:	11 c0       	rjmp	.+34     	; 0x902 <__stack+0x3>
 8e0:	ea e0       	ldi	r30, 0x0A	; 10
 8e2:	2e 9e       	mul	r2, r30
 8e4:	20 0d       	add	r18, r0
 8e6:	11 24       	eor	r1, r1
 8e8:	22 2e       	mov	r2, r18
 8ea:	f3 2d       	mov	r31, r3
 8ec:	f0 62       	ori	r31, 0x20	; 32
 8ee:	3f 2e       	mov	r3, r31
 8f0:	08 c0       	rjmp	.+16     	; 0x902 <__stack+0x3>
 8f2:	8c 36       	cpi	r24, 0x6C	; 108
 8f4:	21 f4       	brne	.+8      	; 0x8fe <vfprintf+0xe2>
 8f6:	83 2d       	mov	r24, r3
 8f8:	80 68       	ori	r24, 0x80	; 128
 8fa:	38 2e       	mov	r3, r24
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0x3>
 8fe:	88 36       	cpi	r24, 0x68	; 104
 900:	41 f4       	brne	.+16     	; 0x912 <__stack+0x13>
 902:	f7 01       	movw	r30, r14
 904:	93 fd       	sbrc	r25, 3
 906:	85 91       	lpm	r24, Z+
 908:	93 ff       	sbrs	r25, 3
 90a:	81 91       	ld	r24, Z+
 90c:	7f 01       	movw	r14, r30
 90e:	81 11       	cpse	r24, r1
 910:	b3 cf       	rjmp	.-154    	; 0x878 <vfprintf+0x5c>
 912:	98 2f       	mov	r25, r24
 914:	9f 7d       	andi	r25, 0xDF	; 223
 916:	95 54       	subi	r25, 0x45	; 69
 918:	93 30       	cpi	r25, 0x03	; 3
 91a:	28 f4       	brcc	.+10     	; 0x926 <__stack+0x27>
 91c:	0c 5f       	subi	r16, 0xFC	; 252
 91e:	1f 4f       	sbci	r17, 0xFF	; 255
 920:	9f e3       	ldi	r25, 0x3F	; 63
 922:	99 83       	std	Y+1, r25	; 0x01
 924:	0d c0       	rjmp	.+26     	; 0x940 <__stack+0x41>
 926:	83 36       	cpi	r24, 0x63	; 99
 928:	31 f0       	breq	.+12     	; 0x936 <__stack+0x37>
 92a:	83 37       	cpi	r24, 0x73	; 115
 92c:	71 f0       	breq	.+28     	; 0x94a <__stack+0x4b>
 92e:	83 35       	cpi	r24, 0x53	; 83
 930:	09 f0       	breq	.+2      	; 0x934 <__stack+0x35>
 932:	59 c0       	rjmp	.+178    	; 0x9e6 <__stack+0xe7>
 934:	21 c0       	rjmp	.+66     	; 0x978 <__stack+0x79>
 936:	f8 01       	movw	r30, r16
 938:	80 81       	ld	r24, Z
 93a:	89 83       	std	Y+1, r24	; 0x01
 93c:	0e 5f       	subi	r16, 0xFE	; 254
 93e:	1f 4f       	sbci	r17, 0xFF	; 255
 940:	88 24       	eor	r8, r8
 942:	83 94       	inc	r8
 944:	91 2c       	mov	r9, r1
 946:	53 01       	movw	r10, r6
 948:	13 c0       	rjmp	.+38     	; 0x970 <__stack+0x71>
 94a:	28 01       	movw	r4, r16
 94c:	f2 e0       	ldi	r31, 0x02	; 2
 94e:	4f 0e       	add	r4, r31
 950:	51 1c       	adc	r5, r1
 952:	f8 01       	movw	r30, r16
 954:	a0 80       	ld	r10, Z
 956:	b1 80       	ldd	r11, Z+1	; 0x01
 958:	36 fe       	sbrs	r3, 6
 95a:	03 c0       	rjmp	.+6      	; 0x962 <__stack+0x63>
 95c:	69 2d       	mov	r22, r9
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x67>
 962:	6f ef       	ldi	r22, 0xFF	; 255
 964:	7f ef       	ldi	r23, 0xFF	; 255
 966:	c5 01       	movw	r24, r10
 968:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <strnlen>
 96c:	4c 01       	movw	r8, r24
 96e:	82 01       	movw	r16, r4
 970:	f3 2d       	mov	r31, r3
 972:	ff 77       	andi	r31, 0x7F	; 127
 974:	3f 2e       	mov	r3, r31
 976:	16 c0       	rjmp	.+44     	; 0x9a4 <__stack+0xa5>
 978:	28 01       	movw	r4, r16
 97a:	22 e0       	ldi	r18, 0x02	; 2
 97c:	42 0e       	add	r4, r18
 97e:	51 1c       	adc	r5, r1
 980:	f8 01       	movw	r30, r16
 982:	a0 80       	ld	r10, Z
 984:	b1 80       	ldd	r11, Z+1	; 0x01
 986:	36 fe       	sbrs	r3, 6
 988:	03 c0       	rjmp	.+6      	; 0x990 <__stack+0x91>
 98a:	69 2d       	mov	r22, r9
 98c:	70 e0       	ldi	r23, 0x00	; 0
 98e:	02 c0       	rjmp	.+4      	; 0x994 <__stack+0x95>
 990:	6f ef       	ldi	r22, 0xFF	; 255
 992:	7f ef       	ldi	r23, 0xFF	; 255
 994:	c5 01       	movw	r24, r10
 996:	0e 94 ef 05 	call	0xbde	; 0xbde <strnlen_P>
 99a:	4c 01       	movw	r8, r24
 99c:	f3 2d       	mov	r31, r3
 99e:	f0 68       	ori	r31, 0x80	; 128
 9a0:	3f 2e       	mov	r3, r31
 9a2:	82 01       	movw	r16, r4
 9a4:	33 fc       	sbrc	r3, 3
 9a6:	1b c0       	rjmp	.+54     	; 0x9de <__stack+0xdf>
 9a8:	82 2d       	mov	r24, r2
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	88 16       	cp	r8, r24
 9ae:	99 06       	cpc	r9, r25
 9b0:	b0 f4       	brcc	.+44     	; 0x9de <__stack+0xdf>
 9b2:	b6 01       	movw	r22, r12
 9b4:	80 e2       	ldi	r24, 0x20	; 32
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 9bc:	2a 94       	dec	r2
 9be:	f4 cf       	rjmp	.-24     	; 0x9a8 <__stack+0xa9>
 9c0:	f5 01       	movw	r30, r10
 9c2:	37 fc       	sbrc	r3, 7
 9c4:	85 91       	lpm	r24, Z+
 9c6:	37 fe       	sbrs	r3, 7
 9c8:	81 91       	ld	r24, Z+
 9ca:	5f 01       	movw	r10, r30
 9cc:	b6 01       	movw	r22, r12
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 9d4:	21 10       	cpse	r2, r1
 9d6:	2a 94       	dec	r2
 9d8:	21 e0       	ldi	r18, 0x01	; 1
 9da:	82 1a       	sub	r8, r18
 9dc:	91 08       	sbc	r9, r1
 9de:	81 14       	cp	r8, r1
 9e0:	91 04       	cpc	r9, r1
 9e2:	71 f7       	brne	.-36     	; 0x9c0 <__stack+0xc1>
 9e4:	e8 c0       	rjmp	.+464    	; 0xbb6 <__stack+0x2b7>
 9e6:	84 36       	cpi	r24, 0x64	; 100
 9e8:	11 f0       	breq	.+4      	; 0x9ee <__stack+0xef>
 9ea:	89 36       	cpi	r24, 0x69	; 105
 9ec:	41 f5       	brne	.+80     	; 0xa3e <__stack+0x13f>
 9ee:	f8 01       	movw	r30, r16
 9f0:	37 fe       	sbrs	r3, 7
 9f2:	07 c0       	rjmp	.+14     	; 0xa02 <__stack+0x103>
 9f4:	60 81       	ld	r22, Z
 9f6:	71 81       	ldd	r23, Z+1	; 0x01
 9f8:	82 81       	ldd	r24, Z+2	; 0x02
 9fa:	93 81       	ldd	r25, Z+3	; 0x03
 9fc:	0c 5f       	subi	r16, 0xFC	; 252
 9fe:	1f 4f       	sbci	r17, 0xFF	; 255
 a00:	08 c0       	rjmp	.+16     	; 0xa12 <__stack+0x113>
 a02:	60 81       	ld	r22, Z
 a04:	71 81       	ldd	r23, Z+1	; 0x01
 a06:	07 2e       	mov	r0, r23
 a08:	00 0c       	add	r0, r0
 a0a:	88 0b       	sbc	r24, r24
 a0c:	99 0b       	sbc	r25, r25
 a0e:	0e 5f       	subi	r16, 0xFE	; 254
 a10:	1f 4f       	sbci	r17, 0xFF	; 255
 a12:	f3 2d       	mov	r31, r3
 a14:	ff 76       	andi	r31, 0x6F	; 111
 a16:	3f 2e       	mov	r3, r31
 a18:	97 ff       	sbrs	r25, 7
 a1a:	09 c0       	rjmp	.+18     	; 0xa2e <__stack+0x12f>
 a1c:	90 95       	com	r25
 a1e:	80 95       	com	r24
 a20:	70 95       	com	r23
 a22:	61 95       	neg	r22
 a24:	7f 4f       	sbci	r23, 0xFF	; 255
 a26:	8f 4f       	sbci	r24, 0xFF	; 255
 a28:	9f 4f       	sbci	r25, 0xFF	; 255
 a2a:	f0 68       	ori	r31, 0x80	; 128
 a2c:	3f 2e       	mov	r3, r31
 a2e:	2a e0       	ldi	r18, 0x0A	; 10
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	a3 01       	movw	r20, r6
 a34:	0e 94 41 06 	call	0xc82	; 0xc82 <__ultoa_invert>
 a38:	88 2e       	mov	r8, r24
 a3a:	86 18       	sub	r8, r6
 a3c:	45 c0       	rjmp	.+138    	; 0xac8 <__stack+0x1c9>
 a3e:	85 37       	cpi	r24, 0x75	; 117
 a40:	31 f4       	brne	.+12     	; 0xa4e <__stack+0x14f>
 a42:	23 2d       	mov	r18, r3
 a44:	2f 7e       	andi	r18, 0xEF	; 239
 a46:	b2 2e       	mov	r11, r18
 a48:	2a e0       	ldi	r18, 0x0A	; 10
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	25 c0       	rjmp	.+74     	; 0xa98 <__stack+0x199>
 a4e:	93 2d       	mov	r25, r3
 a50:	99 7f       	andi	r25, 0xF9	; 249
 a52:	b9 2e       	mov	r11, r25
 a54:	8f 36       	cpi	r24, 0x6F	; 111
 a56:	c1 f0       	breq	.+48     	; 0xa88 <__stack+0x189>
 a58:	18 f4       	brcc	.+6      	; 0xa60 <__stack+0x161>
 a5a:	88 35       	cpi	r24, 0x58	; 88
 a5c:	79 f0       	breq	.+30     	; 0xa7c <__stack+0x17d>
 a5e:	b5 c0       	rjmp	.+362    	; 0xbca <__stack+0x2cb>
 a60:	80 37       	cpi	r24, 0x70	; 112
 a62:	19 f0       	breq	.+6      	; 0xa6a <__stack+0x16b>
 a64:	88 37       	cpi	r24, 0x78	; 120
 a66:	21 f0       	breq	.+8      	; 0xa70 <__stack+0x171>
 a68:	b0 c0       	rjmp	.+352    	; 0xbca <__stack+0x2cb>
 a6a:	e9 2f       	mov	r30, r25
 a6c:	e0 61       	ori	r30, 0x10	; 16
 a6e:	be 2e       	mov	r11, r30
 a70:	b4 fe       	sbrs	r11, 4
 a72:	0d c0       	rjmp	.+26     	; 0xa8e <__stack+0x18f>
 a74:	fb 2d       	mov	r31, r11
 a76:	f4 60       	ori	r31, 0x04	; 4
 a78:	bf 2e       	mov	r11, r31
 a7a:	09 c0       	rjmp	.+18     	; 0xa8e <__stack+0x18f>
 a7c:	34 fe       	sbrs	r3, 4
 a7e:	0a c0       	rjmp	.+20     	; 0xa94 <__stack+0x195>
 a80:	29 2f       	mov	r18, r25
 a82:	26 60       	ori	r18, 0x06	; 6
 a84:	b2 2e       	mov	r11, r18
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <__stack+0x195>
 a88:	28 e0       	ldi	r18, 0x08	; 8
 a8a:	30 e0       	ldi	r19, 0x00	; 0
 a8c:	05 c0       	rjmp	.+10     	; 0xa98 <__stack+0x199>
 a8e:	20 e1       	ldi	r18, 0x10	; 16
 a90:	30 e0       	ldi	r19, 0x00	; 0
 a92:	02 c0       	rjmp	.+4      	; 0xa98 <__stack+0x199>
 a94:	20 e1       	ldi	r18, 0x10	; 16
 a96:	32 e0       	ldi	r19, 0x02	; 2
 a98:	f8 01       	movw	r30, r16
 a9a:	b7 fe       	sbrs	r11, 7
 a9c:	07 c0       	rjmp	.+14     	; 0xaac <__stack+0x1ad>
 a9e:	60 81       	ld	r22, Z
 aa0:	71 81       	ldd	r23, Z+1	; 0x01
 aa2:	82 81       	ldd	r24, Z+2	; 0x02
 aa4:	93 81       	ldd	r25, Z+3	; 0x03
 aa6:	0c 5f       	subi	r16, 0xFC	; 252
 aa8:	1f 4f       	sbci	r17, 0xFF	; 255
 aaa:	06 c0       	rjmp	.+12     	; 0xab8 <__stack+0x1b9>
 aac:	60 81       	ld	r22, Z
 aae:	71 81       	ldd	r23, Z+1	; 0x01
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	0e 5f       	subi	r16, 0xFE	; 254
 ab6:	1f 4f       	sbci	r17, 0xFF	; 255
 ab8:	a3 01       	movw	r20, r6
 aba:	0e 94 41 06 	call	0xc82	; 0xc82 <__ultoa_invert>
 abe:	88 2e       	mov	r8, r24
 ac0:	86 18       	sub	r8, r6
 ac2:	fb 2d       	mov	r31, r11
 ac4:	ff 77       	andi	r31, 0x7F	; 127
 ac6:	3f 2e       	mov	r3, r31
 ac8:	36 fe       	sbrs	r3, 6
 aca:	0d c0       	rjmp	.+26     	; 0xae6 <__stack+0x1e7>
 acc:	23 2d       	mov	r18, r3
 ace:	2e 7f       	andi	r18, 0xFE	; 254
 ad0:	a2 2e       	mov	r10, r18
 ad2:	89 14       	cp	r8, r9
 ad4:	58 f4       	brcc	.+22     	; 0xaec <__stack+0x1ed>
 ad6:	34 fe       	sbrs	r3, 4
 ad8:	0b c0       	rjmp	.+22     	; 0xaf0 <__stack+0x1f1>
 ada:	32 fc       	sbrc	r3, 2
 adc:	09 c0       	rjmp	.+18     	; 0xaf0 <__stack+0x1f1>
 ade:	83 2d       	mov	r24, r3
 ae0:	8e 7e       	andi	r24, 0xEE	; 238
 ae2:	a8 2e       	mov	r10, r24
 ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__stack+0x1f1>
 ae6:	b8 2c       	mov	r11, r8
 ae8:	a3 2c       	mov	r10, r3
 aea:	03 c0       	rjmp	.+6      	; 0xaf2 <__stack+0x1f3>
 aec:	b8 2c       	mov	r11, r8
 aee:	01 c0       	rjmp	.+2      	; 0xaf2 <__stack+0x1f3>
 af0:	b9 2c       	mov	r11, r9
 af2:	a4 fe       	sbrs	r10, 4
 af4:	0f c0       	rjmp	.+30     	; 0xb14 <__stack+0x215>
 af6:	fe 01       	movw	r30, r28
 af8:	e8 0d       	add	r30, r8
 afa:	f1 1d       	adc	r31, r1
 afc:	80 81       	ld	r24, Z
 afe:	80 33       	cpi	r24, 0x30	; 48
 b00:	21 f4       	brne	.+8      	; 0xb0a <__stack+0x20b>
 b02:	9a 2d       	mov	r25, r10
 b04:	99 7e       	andi	r25, 0xE9	; 233
 b06:	a9 2e       	mov	r10, r25
 b08:	09 c0       	rjmp	.+18     	; 0xb1c <__stack+0x21d>
 b0a:	a2 fe       	sbrs	r10, 2
 b0c:	06 c0       	rjmp	.+12     	; 0xb1a <__stack+0x21b>
 b0e:	b3 94       	inc	r11
 b10:	b3 94       	inc	r11
 b12:	04 c0       	rjmp	.+8      	; 0xb1c <__stack+0x21d>
 b14:	8a 2d       	mov	r24, r10
 b16:	86 78       	andi	r24, 0x86	; 134
 b18:	09 f0       	breq	.+2      	; 0xb1c <__stack+0x21d>
 b1a:	b3 94       	inc	r11
 b1c:	a3 fc       	sbrc	r10, 3
 b1e:	11 c0       	rjmp	.+34     	; 0xb42 <__stack+0x243>
 b20:	a0 fe       	sbrs	r10, 0
 b22:	06 c0       	rjmp	.+12     	; 0xb30 <__stack+0x231>
 b24:	b2 14       	cp	r11, r2
 b26:	88 f4       	brcc	.+34     	; 0xb4a <__stack+0x24b>
 b28:	28 0c       	add	r2, r8
 b2a:	92 2c       	mov	r9, r2
 b2c:	9b 18       	sub	r9, r11
 b2e:	0e c0       	rjmp	.+28     	; 0xb4c <__stack+0x24d>
 b30:	b2 14       	cp	r11, r2
 b32:	60 f4       	brcc	.+24     	; 0xb4c <__stack+0x24d>
 b34:	b6 01       	movw	r22, r12
 b36:	80 e2       	ldi	r24, 0x20	; 32
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b3e:	b3 94       	inc	r11
 b40:	f7 cf       	rjmp	.-18     	; 0xb30 <__stack+0x231>
 b42:	b2 14       	cp	r11, r2
 b44:	18 f4       	brcc	.+6      	; 0xb4c <__stack+0x24d>
 b46:	2b 18       	sub	r2, r11
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <__stack+0x24f>
 b4a:	98 2c       	mov	r9, r8
 b4c:	21 2c       	mov	r2, r1
 b4e:	a4 fe       	sbrs	r10, 4
 b50:	10 c0       	rjmp	.+32     	; 0xb72 <__stack+0x273>
 b52:	b6 01       	movw	r22, r12
 b54:	80 e3       	ldi	r24, 0x30	; 48
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b5c:	a2 fe       	sbrs	r10, 2
 b5e:	17 c0       	rjmp	.+46     	; 0xb8e <__stack+0x28f>
 b60:	a1 fc       	sbrc	r10, 1
 b62:	03 c0       	rjmp	.+6      	; 0xb6a <__stack+0x26b>
 b64:	88 e7       	ldi	r24, 0x78	; 120
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <__stack+0x26f>
 b6a:	88 e5       	ldi	r24, 0x58	; 88
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	b6 01       	movw	r22, r12
 b70:	0c c0       	rjmp	.+24     	; 0xb8a <__stack+0x28b>
 b72:	8a 2d       	mov	r24, r10
 b74:	86 78       	andi	r24, 0x86	; 134
 b76:	59 f0       	breq	.+22     	; 0xb8e <__stack+0x28f>
 b78:	a1 fe       	sbrs	r10, 1
 b7a:	02 c0       	rjmp	.+4      	; 0xb80 <__stack+0x281>
 b7c:	8b e2       	ldi	r24, 0x2B	; 43
 b7e:	01 c0       	rjmp	.+2      	; 0xb82 <__stack+0x283>
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	a7 fc       	sbrc	r10, 7
 b84:	8d e2       	ldi	r24, 0x2D	; 45
 b86:	b6 01       	movw	r22, r12
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b8e:	89 14       	cp	r8, r9
 b90:	38 f4       	brcc	.+14     	; 0xba0 <__stack+0x2a1>
 b92:	b6 01       	movw	r22, r12
 b94:	80 e3       	ldi	r24, 0x30	; 48
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b9c:	9a 94       	dec	r9
 b9e:	f7 cf       	rjmp	.-18     	; 0xb8e <__stack+0x28f>
 ba0:	8a 94       	dec	r8
 ba2:	f3 01       	movw	r30, r6
 ba4:	e8 0d       	add	r30, r8
 ba6:	f1 1d       	adc	r31, r1
 ba8:	80 81       	ld	r24, Z
 baa:	b6 01       	movw	r22, r12
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 bb2:	81 10       	cpse	r8, r1
 bb4:	f5 cf       	rjmp	.-22     	; 0xba0 <__stack+0x2a1>
 bb6:	22 20       	and	r2, r2
 bb8:	09 f4       	brne	.+2      	; 0xbbc <__stack+0x2bd>
 bba:	42 ce       	rjmp	.-892    	; 0x840 <vfprintf+0x24>
 bbc:	b6 01       	movw	r22, r12
 bbe:	80 e2       	ldi	r24, 0x20	; 32
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 bc6:	2a 94       	dec	r2
 bc8:	f6 cf       	rjmp	.-20     	; 0xbb6 <__stack+0x2b7>
 bca:	f6 01       	movw	r30, r12
 bcc:	86 81       	ldd	r24, Z+6	; 0x06
 bce:	97 81       	ldd	r25, Z+7	; 0x07
 bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <__stack+0x2d7>
 bd2:	8f ef       	ldi	r24, 0xFF	; 255
 bd4:	9f ef       	ldi	r25, 0xFF	; 255
 bd6:	2b 96       	adiw	r28, 0x0b	; 11
 bd8:	e2 e1       	ldi	r30, 0x12	; 18
 bda:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__epilogue_restores__>

00000bde <strnlen_P>:
 bde:	fc 01       	movw	r30, r24
 be0:	05 90       	lpm	r0, Z+
 be2:	61 50       	subi	r22, 0x01	; 1
 be4:	70 40       	sbci	r23, 0x00	; 0
 be6:	01 10       	cpse	r0, r1
 be8:	d8 f7       	brcc	.-10     	; 0xbe0 <strnlen_P+0x2>
 bea:	80 95       	com	r24
 bec:	90 95       	com	r25
 bee:	8e 0f       	add	r24, r30
 bf0:	9f 1f       	adc	r25, r31
 bf2:	08 95       	ret

00000bf4 <strnlen>:
 bf4:	fc 01       	movw	r30, r24
 bf6:	61 50       	subi	r22, 0x01	; 1
 bf8:	70 40       	sbci	r23, 0x00	; 0
 bfa:	01 90       	ld	r0, Z+
 bfc:	01 10       	cpse	r0, r1
 bfe:	d8 f7       	brcc	.-10     	; 0xbf6 <strnlen+0x2>
 c00:	80 95       	com	r24
 c02:	90 95       	com	r25
 c04:	8e 0f       	add	r24, r30
 c06:	9f 1f       	adc	r25, r31
 c08:	08 95       	ret

00000c0a <fputc>:
 c0a:	0f 93       	push	r16
 c0c:	1f 93       	push	r17
 c0e:	cf 93       	push	r28
 c10:	df 93       	push	r29
 c12:	fb 01       	movw	r30, r22
 c14:	23 81       	ldd	r18, Z+3	; 0x03
 c16:	21 fd       	sbrc	r18, 1
 c18:	03 c0       	rjmp	.+6      	; 0xc20 <fputc+0x16>
 c1a:	8f ef       	ldi	r24, 0xFF	; 255
 c1c:	9f ef       	ldi	r25, 0xFF	; 255
 c1e:	2c c0       	rjmp	.+88     	; 0xc78 <fputc+0x6e>
 c20:	22 ff       	sbrs	r18, 2
 c22:	16 c0       	rjmp	.+44     	; 0xc50 <fputc+0x46>
 c24:	46 81       	ldd	r20, Z+6	; 0x06
 c26:	57 81       	ldd	r21, Z+7	; 0x07
 c28:	24 81       	ldd	r18, Z+4	; 0x04
 c2a:	35 81       	ldd	r19, Z+5	; 0x05
 c2c:	42 17       	cp	r20, r18
 c2e:	53 07       	cpc	r21, r19
 c30:	44 f4       	brge	.+16     	; 0xc42 <fputc+0x38>
 c32:	a0 81       	ld	r26, Z
 c34:	b1 81       	ldd	r27, Z+1	; 0x01
 c36:	9d 01       	movw	r18, r26
 c38:	2f 5f       	subi	r18, 0xFF	; 255
 c3a:	3f 4f       	sbci	r19, 0xFF	; 255
 c3c:	31 83       	std	Z+1, r19	; 0x01
 c3e:	20 83       	st	Z, r18
 c40:	8c 93       	st	X, r24
 c42:	26 81       	ldd	r18, Z+6	; 0x06
 c44:	37 81       	ldd	r19, Z+7	; 0x07
 c46:	2f 5f       	subi	r18, 0xFF	; 255
 c48:	3f 4f       	sbci	r19, 0xFF	; 255
 c4a:	37 83       	std	Z+7, r19	; 0x07
 c4c:	26 83       	std	Z+6, r18	; 0x06
 c4e:	14 c0       	rjmp	.+40     	; 0xc78 <fputc+0x6e>
 c50:	8b 01       	movw	r16, r22
 c52:	ec 01       	movw	r28, r24
 c54:	fb 01       	movw	r30, r22
 c56:	00 84       	ldd	r0, Z+8	; 0x08
 c58:	f1 85       	ldd	r31, Z+9	; 0x09
 c5a:	e0 2d       	mov	r30, r0
 c5c:	09 95       	icall
 c5e:	89 2b       	or	r24, r25
 c60:	e1 f6       	brne	.-72     	; 0xc1a <fputc+0x10>
 c62:	d8 01       	movw	r26, r16
 c64:	16 96       	adiw	r26, 0x06	; 6
 c66:	8d 91       	ld	r24, X+
 c68:	9c 91       	ld	r25, X
 c6a:	17 97       	sbiw	r26, 0x07	; 7
 c6c:	01 96       	adiw	r24, 0x01	; 1
 c6e:	17 96       	adiw	r26, 0x07	; 7
 c70:	9c 93       	st	X, r25
 c72:	8e 93       	st	-X, r24
 c74:	16 97       	sbiw	r26, 0x06	; 6
 c76:	ce 01       	movw	r24, r28
 c78:	df 91       	pop	r29
 c7a:	cf 91       	pop	r28
 c7c:	1f 91       	pop	r17
 c7e:	0f 91       	pop	r16
 c80:	08 95       	ret

00000c82 <__ultoa_invert>:
 c82:	fa 01       	movw	r30, r20
 c84:	aa 27       	eor	r26, r26
 c86:	28 30       	cpi	r18, 0x08	; 8
 c88:	51 f1       	breq	.+84     	; 0xcde <__ultoa_invert+0x5c>
 c8a:	20 31       	cpi	r18, 0x10	; 16
 c8c:	81 f1       	breq	.+96     	; 0xcee <__ultoa_invert+0x6c>
 c8e:	e8 94       	clt
 c90:	6f 93       	push	r22
 c92:	6e 7f       	andi	r22, 0xFE	; 254
 c94:	6e 5f       	subi	r22, 0xFE	; 254
 c96:	7f 4f       	sbci	r23, 0xFF	; 255
 c98:	8f 4f       	sbci	r24, 0xFF	; 255
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	af 4f       	sbci	r26, 0xFF	; 255
 c9e:	b1 e0       	ldi	r27, 0x01	; 1
 ca0:	3e d0       	rcall	.+124    	; 0xd1e <__ultoa_invert+0x9c>
 ca2:	b4 e0       	ldi	r27, 0x04	; 4
 ca4:	3c d0       	rcall	.+120    	; 0xd1e <__ultoa_invert+0x9c>
 ca6:	67 0f       	add	r22, r23
 ca8:	78 1f       	adc	r23, r24
 caa:	89 1f       	adc	r24, r25
 cac:	9a 1f       	adc	r25, r26
 cae:	a1 1d       	adc	r26, r1
 cb0:	68 0f       	add	r22, r24
 cb2:	79 1f       	adc	r23, r25
 cb4:	8a 1f       	adc	r24, r26
 cb6:	91 1d       	adc	r25, r1
 cb8:	a1 1d       	adc	r26, r1
 cba:	6a 0f       	add	r22, r26
 cbc:	71 1d       	adc	r23, r1
 cbe:	81 1d       	adc	r24, r1
 cc0:	91 1d       	adc	r25, r1
 cc2:	a1 1d       	adc	r26, r1
 cc4:	20 d0       	rcall	.+64     	; 0xd06 <__ultoa_invert+0x84>
 cc6:	09 f4       	brne	.+2      	; 0xcca <__ultoa_invert+0x48>
 cc8:	68 94       	set
 cca:	3f 91       	pop	r19
 ccc:	2a e0       	ldi	r18, 0x0A	; 10
 cce:	26 9f       	mul	r18, r22
 cd0:	11 24       	eor	r1, r1
 cd2:	30 19       	sub	r19, r0
 cd4:	30 5d       	subi	r19, 0xD0	; 208
 cd6:	31 93       	st	Z+, r19
 cd8:	de f6       	brtc	.-74     	; 0xc90 <__ultoa_invert+0xe>
 cda:	cf 01       	movw	r24, r30
 cdc:	08 95       	ret
 cde:	46 2f       	mov	r20, r22
 ce0:	47 70       	andi	r20, 0x07	; 7
 ce2:	40 5d       	subi	r20, 0xD0	; 208
 ce4:	41 93       	st	Z+, r20
 ce6:	b3 e0       	ldi	r27, 0x03	; 3
 ce8:	0f d0       	rcall	.+30     	; 0xd08 <__ultoa_invert+0x86>
 cea:	c9 f7       	brne	.-14     	; 0xcde <__ultoa_invert+0x5c>
 cec:	f6 cf       	rjmp	.-20     	; 0xcda <__ultoa_invert+0x58>
 cee:	46 2f       	mov	r20, r22
 cf0:	4f 70       	andi	r20, 0x0F	; 15
 cf2:	40 5d       	subi	r20, 0xD0	; 208
 cf4:	4a 33       	cpi	r20, 0x3A	; 58
 cf6:	18 f0       	brcs	.+6      	; 0xcfe <__ultoa_invert+0x7c>
 cf8:	49 5d       	subi	r20, 0xD9	; 217
 cfa:	31 fd       	sbrc	r19, 1
 cfc:	40 52       	subi	r20, 0x20	; 32
 cfe:	41 93       	st	Z+, r20
 d00:	02 d0       	rcall	.+4      	; 0xd06 <__ultoa_invert+0x84>
 d02:	a9 f7       	brne	.-22     	; 0xcee <__ultoa_invert+0x6c>
 d04:	ea cf       	rjmp	.-44     	; 0xcda <__ultoa_invert+0x58>
 d06:	b4 e0       	ldi	r27, 0x04	; 4
 d08:	a6 95       	lsr	r26
 d0a:	97 95       	ror	r25
 d0c:	87 95       	ror	r24
 d0e:	77 95       	ror	r23
 d10:	67 95       	ror	r22
 d12:	ba 95       	dec	r27
 d14:	c9 f7       	brne	.-14     	; 0xd08 <__ultoa_invert+0x86>
 d16:	00 97       	sbiw	r24, 0x00	; 0
 d18:	61 05       	cpc	r22, r1
 d1a:	71 05       	cpc	r23, r1
 d1c:	08 95       	ret
 d1e:	9b 01       	movw	r18, r22
 d20:	ac 01       	movw	r20, r24
 d22:	0a 2e       	mov	r0, r26
 d24:	06 94       	lsr	r0
 d26:	57 95       	ror	r21
 d28:	47 95       	ror	r20
 d2a:	37 95       	ror	r19
 d2c:	27 95       	ror	r18
 d2e:	ba 95       	dec	r27
 d30:	c9 f7       	brne	.-14     	; 0xd24 <__ultoa_invert+0xa2>
 d32:	62 0f       	add	r22, r18
 d34:	73 1f       	adc	r23, r19
 d36:	84 1f       	adc	r24, r20
 d38:	95 1f       	adc	r25, r21
 d3a:	a0 1d       	adc	r26, r0
 d3c:	08 95       	ret

00000d3e <__prologue_saves__>:
 d3e:	2f 92       	push	r2
 d40:	3f 92       	push	r3
 d42:	4f 92       	push	r4
 d44:	5f 92       	push	r5
 d46:	6f 92       	push	r6
 d48:	7f 92       	push	r7
 d4a:	8f 92       	push	r8
 d4c:	9f 92       	push	r9
 d4e:	af 92       	push	r10
 d50:	bf 92       	push	r11
 d52:	cf 92       	push	r12
 d54:	df 92       	push	r13
 d56:	ef 92       	push	r14
 d58:	ff 92       	push	r15
 d5a:	0f 93       	push	r16
 d5c:	1f 93       	push	r17
 d5e:	cf 93       	push	r28
 d60:	df 93       	push	r29
 d62:	cd b7       	in	r28, 0x3d	; 61
 d64:	de b7       	in	r29, 0x3e	; 62
 d66:	ca 1b       	sub	r28, r26
 d68:	db 0b       	sbc	r29, r27
 d6a:	0f b6       	in	r0, 0x3f	; 63
 d6c:	f8 94       	cli
 d6e:	de bf       	out	0x3e, r29	; 62
 d70:	0f be       	out	0x3f, r0	; 63
 d72:	cd bf       	out	0x3d, r28	; 61
 d74:	09 94       	ijmp

00000d76 <__epilogue_restores__>:
 d76:	2a 88       	ldd	r2, Y+18	; 0x12
 d78:	39 88       	ldd	r3, Y+17	; 0x11
 d7a:	48 88       	ldd	r4, Y+16	; 0x10
 d7c:	5f 84       	ldd	r5, Y+15	; 0x0f
 d7e:	6e 84       	ldd	r6, Y+14	; 0x0e
 d80:	7d 84       	ldd	r7, Y+13	; 0x0d
 d82:	8c 84       	ldd	r8, Y+12	; 0x0c
 d84:	9b 84       	ldd	r9, Y+11	; 0x0b
 d86:	aa 84       	ldd	r10, Y+10	; 0x0a
 d88:	b9 84       	ldd	r11, Y+9	; 0x09
 d8a:	c8 84       	ldd	r12, Y+8	; 0x08
 d8c:	df 80       	ldd	r13, Y+7	; 0x07
 d8e:	ee 80       	ldd	r14, Y+6	; 0x06
 d90:	fd 80       	ldd	r15, Y+5	; 0x05
 d92:	0c 81       	ldd	r16, Y+4	; 0x04
 d94:	1b 81       	ldd	r17, Y+3	; 0x03
 d96:	aa 81       	ldd	r26, Y+2	; 0x02
 d98:	b9 81       	ldd	r27, Y+1	; 0x01
 d9a:	ce 0f       	add	r28, r30
 d9c:	d1 1d       	adc	r29, r1
 d9e:	0f b6       	in	r0, 0x3f	; 63
 da0:	f8 94       	cli
 da2:	de bf       	out	0x3e, r29	; 62
 da4:	0f be       	out	0x3f, r0	; 63
 da6:	cd bf       	out	0x3d, r28	; 61
 da8:	ed 01       	movw	r28, r26
 daa:	08 95       	ret

00000dac <_exit>:
 dac:	f8 94       	cli

00000dae <__stop_program>:
 dae:	ff cf       	rjmp	.-2      	; 0xdae <__stop_program>
