
Messomat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000de6  00000e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007f  00800122  00800122  00000e9c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001897  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf0  00000000  00000000  00002927  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc6  00000000  00000000  00003517  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  000042e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a6  00000000  00000000  00004644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000106e  00000000  00000000  00004cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005d58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__vector_18>
  4c:	0c 94 82 03 	jmp	0x704	; 0x704 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3a       	cpi	r26, 0xA1	; 161
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 14 03 	call	0x628	; 0x628 <main>
  9e:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <dht_getdata>:
#elif DHT_FLOAT == 0
int8_t dht_gethumidity(int8_t *humidity) {
	int8_t temperature = 0;
#endif
	return dht_getdata(&temperature, humidity);
}
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	00 d0       	rcall	.+0      	; 0xae <dht_getdata+0x8>
  ae:	00 d0       	rcall	.+0      	; 0xb0 <dht_getdata+0xa>
  b0:	1f 92       	push	r1
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	fc 01       	movw	r30, r24
  b8:	9e 01       	movw	r18, r28
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	d9 01       	movw	r26, r18
  c2:	1d 92       	st	X+, r1
  c4:	8a 95       	dec	r24
  c6:	e9 f7       	brne	.-6      	; 0xc2 <dht_getdata+0x1c>
  c8:	87 b1       	in	r24, 0x07	; 7
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	87 b9       	out	0x07, r24	; 7
  ce:	98 b1       	in	r25, 0x08	; 8
  d0:	91 60       	ori	r25, 0x01	; 1
  d2:	98 b9       	out	0x08, r25	; 8
  d4:	bf ef       	ldi	r27, 0xFF	; 255
  d6:	21 ee       	ldi	r18, 0xE1	; 225
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	b1 50       	subi	r27, 0x01	; 1
  dc:	20 40       	sbci	r18, 0x00	; 0
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <dht_getdata+0x34>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <dht_getdata+0x3e>
  e4:	00 00       	nop
  e6:	98 b1       	in	r25, 0x08	; 8
  e8:	9e 7f       	andi	r25, 0xFE	; 254
  ea:	98 b9       	out	0x08, r25	; 8
  ec:	9f ef       	ldi	r25, 0xFF	; 255
  ee:	a0 ee       	ldi	r26, 0xE0	; 224
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	91 50       	subi	r25, 0x01	; 1
  f4:	a0 40       	sbci	r26, 0x00	; 0
  f6:	b0 40       	sbci	r27, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <dht_getdata+0x4c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <dht_getdata+0x56>
  fc:	00 00       	nop
  fe:	98 b1       	in	r25, 0x08	; 8
 100:	91 60       	ori	r25, 0x01	; 1
 102:	98 b9       	out	0x08, r25	; 8
 104:	97 b1       	in	r25, 0x07	; 7
 106:	9e 7f       	andi	r25, 0xFE	; 254
 108:	97 b9       	out	0x07, r25	; 7
 10a:	25 ed       	ldi	r18, 0xD5	; 213
 10c:	2a 95       	dec	r18
 10e:	f1 f7       	brne	.-4      	; 0x10c <dht_getdata+0x66>
 110:	00 00       	nop
 112:	30 99       	sbic	0x06, 0	; 6
 114:	65 c0       	rjmp	.+202    	; 0x1e0 <dht_getdata+0x13a>
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <dht_getdata+0x74>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <dht_getdata+0x7a>
 120:	00 00       	nop
 122:	30 9b       	sbis	0x06, 0	; 6
 124:	5f c0       	rjmp	.+190    	; 0x1e4 <dht_getdata+0x13e>
 126:	af e3       	ldi	r26, 0x3F	; 63
 128:	b1 e0       	ldi	r27, 0x01	; 1
 12a:	11 97       	sbiw	r26, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <dht_getdata+0x84>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <dht_getdata+0x8a>
 130:	00 00       	nop
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	34 c0       	rjmp	.+104    	; 0x19e <dht_getdata+0xf8>
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	29 3c       	cpi	r18, 0xC9	; 201
 13c:	31 05       	cpc	r19, r1
 13e:	18 f0       	brcs	.+6      	; 0x146 <dht_getdata+0xa0>
 140:	53 c0       	rjmp	.+166    	; 0x1e8 <dht_getdata+0x142>
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	30 9b       	sbis	0x06, 0	; 6
 148:	f6 cf       	rjmp	.-20     	; 0x136 <dht_getdata+0x90>
 14a:	b0 ea       	ldi	r27, 0xA0	; 160
 14c:	ba 95       	dec	r27
 14e:	f1 f7       	brne	.-4      	; 0x14c <dht_getdata+0xa6>
 150:	30 9b       	sbis	0x06, 0	; 6
 152:	0c c0       	rjmp	.+24     	; 0x16c <dht_getdata+0xc6>
 154:	47 e0       	ldi	r20, 0x07	; 7
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	49 1b       	sub	r20, r25
 15a:	51 09       	sbc	r21, r1
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <dht_getdata+0xc0>
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	4a 95       	dec	r20
 168:	e2 f7       	brpl	.-8      	; 0x162 <dht_getdata+0xbc>
 16a:	82 2b       	or	r24, r18
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	05 c0       	rjmp	.+10     	; 0x17c <dht_getdata+0xd6>
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	29 3c       	cpi	r18, 0xC9	; 201
 178:	31 05       	cpc	r19, r1
 17a:	c0 f5       	brcc	.+112    	; 0x1ec <dht_getdata+0x146>
 17c:	30 99       	sbic	0x06, 0	; 6
 17e:	f9 cf       	rjmp	.-14     	; 0x172 <dht_getdata+0xcc>
 180:	9f 5f       	subi	r25, 0xFF	; 255
 182:	02 c0       	rjmp	.+4      	; 0x188 <dht_getdata+0xe2>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	98 30       	cpi	r25, 0x08	; 8
 18a:	d8 f2       	brcs	.-74     	; 0x142 <dht_getdata+0x9c>
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	2c 0f       	add	r18, r28
 192:	3d 1f       	adc	r19, r29
 194:	21 0f       	add	r18, r17
 196:	31 1d       	adc	r19, r1
 198:	d9 01       	movw	r26, r18
 19a:	8c 93       	st	X, r24
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	15 30       	cpi	r17, 0x05	; 5
 1a0:	88 f3       	brcs	.-30     	; 0x184 <dht_getdata+0xde>
 1a2:	87 b1       	in	r24, 0x07	; 7
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	87 b9       	out	0x07, r24	; 7
 1a8:	88 b1       	in	r24, 0x08	; 8
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	88 b9       	out	0x08, r24	; 8
 1ae:	bf ef       	ldi	r27, 0xFF	; 255
 1b0:	21 ee       	ldi	r18, 0xE1	; 225
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	b1 50       	subi	r27, 0x01	; 1
 1b6:	20 40       	sbci	r18, 0x00	; 0
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <dht_getdata+0x10e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <dht_getdata+0x118>
 1be:	00 00       	nop
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	9a 81       	ldd	r25, Y+2	; 0x02
 1c4:	3b 81       	ldd	r19, Y+3	; 0x03
 1c6:	2c 81       	ldd	r18, Y+4	; 0x04
 1c8:	89 0f       	add	r24, r25
 1ca:	83 0f       	add	r24, r19
 1cc:	82 0f       	add	r24, r18
 1ce:	9d 81       	ldd	r25, Y+5	; 0x05
 1d0:	89 13       	cpse	r24, r25
 1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <dht_getdata+0x14a>
 1d4:	30 83       	st	Z, r19
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	db 01       	movw	r26, r22
 1da:	8c 93       	st	X, r24
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <dht_getdata+0x14c>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <dht_getdata+0x14c>
 1e4:	8e ef       	ldi	r24, 0xFE	; 254
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <dht_getdata+0x14c>
 1e8:	8d ef       	ldi	r24, 0xFD	; 253
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <dht_getdata+0x14c>
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <dht_getdata+0x14c>
 1f0:	8b ef       	ldi	r24, 0xFB	; 251
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	08 95       	ret

00000204 <dht_gettemperaturehumidity>:
#if DHT_FLOAT == 1
int8_t dht_gettemperaturehumidity(float *temperature, float *humidity) {
#elif DHT_FLOAT == 0
	int8_t dht_gettemperaturehumidity(int8_t *temperature, int8_t *humidity) {
#endif
	return dht_getdata(temperature, humidity);
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <dht_getdata>
}
 208:	08 95       	ret

0000020a <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 20a:	88 b1       	in	r24, 0x08	; 8
 20c:	88 60       	ori	r24, 0x08	; 8
 20e:	88 b9       	out	0x08, r24	; 8
 210:	85 e0       	ldi	r24, 0x05	; 5
 212:	8a 95       	dec	r24
 214:	f1 f7       	brne	.-4      	; 0x212 <toggle_e+0x8>
 216:	00 00       	nop
 218:	88 b1       	in	r24, 0x08	; 8
 21a:	87 7f       	andi	r24, 0xF7	; 247
 21c:	88 b9       	out	0x08, r24	; 8
 21e:	08 95       	ret

00000220 <lcd_write>:
 220:	cf 93       	push	r28
 222:	c8 2f       	mov	r28, r24
 224:	66 23       	and	r22, r22
 226:	21 f0       	breq	.+8      	; 0x230 <lcd_write+0x10>
 228:	88 b1       	in	r24, 0x08	; 8
 22a:	80 62       	ori	r24, 0x20	; 32
 22c:	88 b9       	out	0x08, r24	; 8
 22e:	03 c0       	rjmp	.+6      	; 0x236 <lcd_write+0x16>
 230:	88 b1       	in	r24, 0x08	; 8
 232:	8f 7d       	andi	r24, 0xDF	; 223
 234:	88 b9       	out	0x08, r24	; 8
 236:	88 b1       	in	r24, 0x08	; 8
 238:	8f 7e       	andi	r24, 0xEF	; 239
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	8a b1       	in	r24, 0x0a	; 10
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	8a b9       	out	0x0a, r24	; 10
 242:	8a b1       	in	r24, 0x0a	; 10
 244:	80 62       	ori	r24, 0x20	; 32
 246:	8a b9       	out	0x0a, r24	; 10
 248:	8a b1       	in	r24, 0x0a	; 10
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	8a b9       	out	0x0a, r24	; 10
 24e:	8a b1       	in	r24, 0x0a	; 10
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8a b9       	out	0x0a, r24	; 10
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	8f 77       	andi	r24, 0x7F	; 127
 258:	8b b9       	out	0x0b, r24	; 11
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	8f 7b       	andi	r24, 0xBF	; 191
 25e:	8b b9       	out	0x0b, r24	; 11
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	8f 7d       	andi	r24, 0xDF	; 223
 264:	8b b9       	out	0x0b, r24	; 11
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	8f 7e       	andi	r24, 0xEF	; 239
 26a:	8b b9       	out	0x0b, r24	; 11
 26c:	cc 23       	and	r28, r28
 26e:	1c f4       	brge	.+6      	; 0x276 <lcd_write+0x56>
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	80 68       	ori	r24, 0x80	; 128
 274:	8b b9       	out	0x0b, r24	; 11
 276:	c6 ff       	sbrs	r28, 6
 278:	03 c0       	rjmp	.+6      	; 0x280 <lcd_write+0x60>
 27a:	8b b1       	in	r24, 0x0b	; 11
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	8b b9       	out	0x0b, r24	; 11
 280:	c5 ff       	sbrs	r28, 5
 282:	03 c0       	rjmp	.+6      	; 0x28a <lcd_write+0x6a>
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	80 62       	ori	r24, 0x20	; 32
 288:	8b b9       	out	0x0b, r24	; 11
 28a:	c4 ff       	sbrs	r28, 4
 28c:	03 c0       	rjmp	.+6      	; 0x294 <lcd_write+0x74>
 28e:	8b b1       	in	r24, 0x0b	; 11
 290:	80 61       	ori	r24, 0x10	; 16
 292:	8b b9       	out	0x0b, r24	; 11
 294:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 298:	8b b1       	in	r24, 0x0b	; 11
 29a:	8f 77       	andi	r24, 0x7F	; 127
 29c:	8b b9       	out	0x0b, r24	; 11
 29e:	8b b1       	in	r24, 0x0b	; 11
 2a0:	8f 7b       	andi	r24, 0xBF	; 191
 2a2:	8b b9       	out	0x0b, r24	; 11
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	8f 7d       	andi	r24, 0xDF	; 223
 2a8:	8b b9       	out	0x0b, r24	; 11
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	8f 7e       	andi	r24, 0xEF	; 239
 2ae:	8b b9       	out	0x0b, r24	; 11
 2b0:	c3 ff       	sbrs	r28, 3
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <lcd_write+0x9a>
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	80 68       	ori	r24, 0x80	; 128
 2b8:	8b b9       	out	0x0b, r24	; 11
 2ba:	c2 ff       	sbrs	r28, 2
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <lcd_write+0xa4>
 2be:	8b b1       	in	r24, 0x0b	; 11
 2c0:	80 64       	ori	r24, 0x40	; 64
 2c2:	8b b9       	out	0x0b, r24	; 11
 2c4:	c1 ff       	sbrs	r28, 1
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <lcd_write+0xae>
 2c8:	8b b1       	in	r24, 0x0b	; 11
 2ca:	80 62       	ori	r24, 0x20	; 32
 2cc:	8b b9       	out	0x0b, r24	; 11
 2ce:	c0 ff       	sbrs	r28, 0
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <lcd_write+0xb8>
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	80 61       	ori	r24, 0x10	; 16
 2d6:	8b b9       	out	0x0b, r24	; 11
 2d8:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 2dc:	8b b1       	in	r24, 0x0b	; 11
 2de:	80 61       	ori	r24, 0x10	; 16
 2e0:	8b b9       	out	0x0b, r24	; 11
 2e2:	8b b1       	in	r24, 0x0b	; 11
 2e4:	80 62       	ori	r24, 0x20	; 32
 2e6:	8b b9       	out	0x0b, r24	; 11
 2e8:	8b b1       	in	r24, 0x0b	; 11
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	8b b9       	out	0x0b, r24	; 11
 2ee:	8b b1       	in	r24, 0x0b	; 11
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	8b b9       	out	0x0b, r24	; 11
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <lcd_read>:
 2f8:	88 23       	and	r24, r24
 2fa:	21 f0       	breq	.+8      	; 0x304 <lcd_read+0xc>
 2fc:	88 b1       	in	r24, 0x08	; 8
 2fe:	80 62       	ori	r24, 0x20	; 32
 300:	88 b9       	out	0x08, r24	; 8
 302:	03 c0       	rjmp	.+6      	; 0x30a <lcd_read+0x12>
 304:	88 b1       	in	r24, 0x08	; 8
 306:	8f 7d       	andi	r24, 0xDF	; 223
 308:	88 b9       	out	0x08, r24	; 8
 30a:	88 b1       	in	r24, 0x08	; 8
 30c:	80 61       	ori	r24, 0x10	; 16
 30e:	88 b9       	out	0x08, r24	; 8
 310:	8a b1       	in	r24, 0x0a	; 10
 312:	8f 7e       	andi	r24, 0xEF	; 239
 314:	8a b9       	out	0x0a, r24	; 10
 316:	8a b1       	in	r24, 0x0a	; 10
 318:	8f 7d       	andi	r24, 0xDF	; 223
 31a:	8a b9       	out	0x0a, r24	; 10
 31c:	8a b1       	in	r24, 0x0a	; 10
 31e:	8f 7b       	andi	r24, 0xBF	; 191
 320:	8a b9       	out	0x0a, r24	; 10
 322:	8a b1       	in	r24, 0x0a	; 10
 324:	8f 77       	andi	r24, 0x7F	; 127
 326:	8a b9       	out	0x0a, r24	; 10
 328:	88 b1       	in	r24, 0x08	; 8
 32a:	88 60       	ori	r24, 0x08	; 8
 32c:	88 b9       	out	0x08, r24	; 8
 32e:	85 e0       	ldi	r24, 0x05	; 5
 330:	8a 95       	dec	r24
 332:	f1 f7       	brne	.-4      	; 0x330 <lcd_read+0x38>
 334:	00 00       	nop
 336:	4c 99       	sbic	0x09, 4	; 9
 338:	02 c0       	rjmp	.+4      	; 0x33e <lcd_read+0x46>
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	01 c0       	rjmp	.+2      	; 0x340 <lcd_read+0x48>
 33e:	80 e1       	ldi	r24, 0x10	; 16
 340:	4d 99       	sbic	0x09, 5	; 9
 342:	80 62       	ori	r24, 0x20	; 32
 344:	4e 99       	sbic	0x09, 6	; 9
 346:	80 64       	ori	r24, 0x40	; 64
 348:	4f 99       	sbic	0x09, 7	; 9
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	98 b1       	in	r25, 0x08	; 8
 34e:	97 7f       	andi	r25, 0xF7	; 247
 350:	98 b9       	out	0x08, r25	; 8
 352:	95 e0       	ldi	r25, 0x05	; 5
 354:	9a 95       	dec	r25
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd_read+0x5c>
 358:	00 00       	nop
 35a:	98 b1       	in	r25, 0x08	; 8
 35c:	98 60       	ori	r25, 0x08	; 8
 35e:	98 b9       	out	0x08, r25	; 8
 360:	95 e0       	ldi	r25, 0x05	; 5
 362:	9a 95       	dec	r25
 364:	f1 f7       	brne	.-4      	; 0x362 <lcd_read+0x6a>
 366:	00 00       	nop
 368:	4c 99       	sbic	0x09, 4	; 9
 36a:	81 60       	ori	r24, 0x01	; 1
 36c:	4d 99       	sbic	0x09, 5	; 9
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	4e 99       	sbic	0x09, 6	; 9
 372:	84 60       	ori	r24, 0x04	; 4
 374:	4f 99       	sbic	0x09, 7	; 9
 376:	88 60       	ori	r24, 0x08	; 8
 378:	98 b1       	in	r25, 0x08	; 8
 37a:	97 7f       	andi	r25, 0xF7	; 247
 37c:	98 b9       	out	0x08, r25	; 8
 37e:	08 95       	ret

00000380 <lcd_waitbusy>:
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_read>
 386:	88 23       	and	r24, r24
 388:	dc f3       	brlt	.-10     	; 0x380 <lcd_waitbusy>
 38a:	85 e1       	ldi	r24, 0x15	; 21
 38c:	8a 95       	dec	r24
 38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_waitbusy+0xc>
 390:	00 00       	nop
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_read>
 398:	08 95       	ret

0000039a <lcd_command>:
 39a:	cf 93       	push	r28
 39c:	c8 2f       	mov	r28, r24
 39e:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_waitbusy>
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	8c 2f       	mov	r24, r28
 3a6:	0e 94 10 01 	call	0x220	; 0x220 <lcd_write>
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <lcd_clrscr>:
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
 3b4:	08 95       	ret

000003b6 <lcd_putc>:
 3b6:	cf 93       	push	r28
 3b8:	c8 2f       	mov	r28, r24
 3ba:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_waitbusy>
 3be:	ca 30       	cpi	r28, 0x0A	; 10
 3c0:	49 f4       	brne	.+18     	; 0x3d4 <lcd_putc+0x1e>
 3c2:	80 34       	cpi	r24, 0x40	; 64
 3c4:	10 f4       	brcc	.+4      	; 0x3ca <lcd_putc+0x14>
 3c6:	80 e4       	ldi	r24, 0x40	; 64
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <lcd_putc+0x16>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	80 58       	subi	r24, 0x80	; 128
 3ce:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <lcd_putc+0x26>
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	8c 2f       	mov	r24, r28
 3d8:	0e 94 10 01 	call	0x220	; 0x220 <lcd_write>
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <lcd_puts>:
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	fc 01       	movw	r30, r24
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <lcd_puts+0xe>
 3e8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lcd_putc>
 3ec:	fe 01       	movw	r30, r28
 3ee:	ef 01       	movw	r28, r30
 3f0:	21 96       	adiw	r28, 0x01	; 1
 3f2:	80 81       	ld	r24, Z
 3f4:	81 11       	cpse	r24, r1
 3f6:	f8 cf       	rjmp	.-16     	; 0x3e8 <lcd_puts+0x8>
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3fe:	cf 93       	push	r28
 400:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 402:	87 b1       	in	r24, 0x07	; 7
 404:	80 62       	ori	r24, 0x20	; 32
 406:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 408:	87 b1       	in	r24, 0x07	; 7
 40a:	80 61       	ori	r24, 0x10	; 16
 40c:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 40e:	87 b1       	in	r24, 0x07	; 7
 410:	88 60       	ori	r24, 0x08	; 8
 412:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 414:	8a b1       	in	r24, 0x0a	; 10
 416:	80 61       	ori	r24, 0x10	; 16
 418:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 41a:	8a b1       	in	r24, 0x0a	; 10
 41c:	80 62       	ori	r24, 0x20	; 32
 41e:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 420:	8a b1       	in	r24, 0x0a	; 10
 422:	80 64       	ori	r24, 0x40	; 64
 424:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 426:	8a b1       	in	r24, 0x0a	; 10
 428:	80 68       	ori	r24, 0x80	; 128
 42a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	99 ef       	ldi	r25, 0xF9	; 249
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 436:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 438:	8b b1       	in	r24, 0x0b	; 11
 43a:	80 62       	ori	r24, 0x20	; 32
 43c:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 43e:	8b b1       	in	r24, 0x0b	; 11
 440:	80 61       	ori	r24, 0x10	; 16
 442:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 444:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 448:	8f e1       	ldi	r24, 0x1F	; 31
 44a:	9e e4       	ldi	r25, 0x4E	; 78
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 454:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 462:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 464:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 472:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 474:	8b b1       	in	r24, 0x0b	; 11
 476:	8f 7e       	andi	r24, 0xEF	; 239
 478:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 47a:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
 47e:	8f ef       	ldi	r24, 0xFF	; 255
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 488:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 48a:	88 e2       	ldi	r24, 0x28	; 40
 48c:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 490:	88 e0       	ldi	r24, 0x08	; 8
 492:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 496:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 49a:	86 e0       	ldi	r24, 0x06	; 6
 49c:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 4a0:	8c 2f       	mov	r24, r28
 4a2:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_command>

}/* lcd_init */
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <timer1_init>:

volatile int8_t errorStatus;


void timer1_init(void) {		// Set Timer1 für CTC-Modus
	TCCR1B |= (1 << WGM12);		// CTC-Modus
 4aa:	e1 e8       	ldi	r30, 0x81	; 129
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	88 60       	ori	r24, 0x08	; 8
 4b2:	80 83       	st	Z, r24
	OCR1A = 15624;				// 1 Sekunde bei 16 MHz und Prescaler 1024
 4b4:	88 e0       	ldi	r24, 0x08	; 8
 4b6:	9d e3       	ldi	r25, 0x3D	; 61
 4b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1 << CS12) | (1 << CS10);	// Prescaler 1024
 4c0:	80 81       	ld	r24, Z
 4c2:	85 60       	ori	r24, 0x05	; 5
 4c4:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);	// Output Compare A Interrupt aktivieren
 4c6:	ef e6       	ldi	r30, 0x6F	; 111
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	82 60       	ori	r24, 0x02	; 2
 4ce:	80 83       	st	Z, r24
 4d0:	08 95       	ret

000004d2 <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
 4d2:	1f 92       	push	r1
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	8f 93       	push	r24
	measureTimeFlag = 1;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
}
 4e4:	8f 91       	pop	r24
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <check_input>:

void check_input(void){
	char command = uart_getc();
 4f0:	0e 94 c7 03 	call	0x78e	; 0x78e <uart_getc>
	switch (command) {
 4f4:	99 27       	eor	r25, r25
 4f6:	84 33       	cpi	r24, 0x34	; 52
 4f8:	91 05       	cpc	r25, r1
 4fa:	01 f1       	breq	.+64     	; 0x53c <check_input+0x4c>
 4fc:	30 f4       	brcc	.+12     	; 0x50a <check_input+0x1a>
 4fe:	86 30       	cpi	r24, 0x06	; 6
 500:	91 05       	cpc	r25, r1
 502:	51 f0       	breq	.+20     	; 0x518 <check_input+0x28>
 504:	c1 97       	sbiw	r24, 0x31	; 49
 506:	61 f0       	breq	.+24     	; 0x520 <check_input+0x30>
 508:	08 95       	ret
 50a:	84 36       	cpi	r24, 0x64	; 100
 50c:	91 05       	cpc	r25, r1
 50e:	21 f1       	breq	.+72     	; 0x558 <check_input+0x68>
 510:	81 37       	cpi	r24, 0x71	; 113
 512:	91 05       	cpc	r25, r1
 514:	39 f1       	breq	.+78     	; 0x564 <check_input+0x74>
 516:	08 95       	ret
		case 0x06:
			ackReceived = 1;
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ackReceived>
			break;
 51e:	08 95       	ret
		case '1':
			OCR1A = 15624;
 520:	88 e0       	ldi	r24, 0x08	; 8
 522:	9d e3       	ldi	r25, 0x3D	; 61
 524:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 528:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			interval = 1;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <interval>
			TCNT1 = 0;// Reset timer
 532:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 536:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			break;
 53a:	08 95       	ret
		case '4':
			OCR1A = 62499;
 53c:	83 e2       	ldi	r24, 0x23	; 35
 53e:	94 ef       	ldi	r25, 0xF4	; 244
 540:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 544:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			interval = 4;
 548:	84 e0       	ldi	r24, 0x04	; 4
 54a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <interval>
			TCNT1 = 0;  // Reset timer
 54e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 552:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			break;
 556:	08 95       	ret
		case 'd':
			sendFlag = 1;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sendFlag>
			retryCount = 0;  // Reset retry counter
 55e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <retryCount>
			break;
 562:	08 95       	ret
		case 'q':
			sendFlag = 0;
 564:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <sendFlag>
 568:	08 95       	ret

0000056a <update_display>:
			break;
	}
}

void update_display(){
	sprintf(displayBuffer,"T:%dC H:%d%%",currentTemp,currentHumidity);
 56a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <currentHumidity>
 56e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <currentTemp>
 572:	29 2f       	mov	r18, r25
 574:	09 2e       	mov	r0, r25
 576:	00 0c       	add	r0, r0
 578:	33 0b       	sbc	r19, r19
 57a:	3f 93       	push	r19
 57c:	9f 93       	push	r25
 57e:	28 2f       	mov	r18, r24
 580:	08 2e       	mov	r0, r24
 582:	00 0c       	add	r0, r0
 584:	33 0b       	sbc	r19, r19
 586:	3f 93       	push	r19
 588:	8f 93       	push	r24
 58a:	83 e0       	ldi	r24, 0x03	; 3
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	9f 93       	push	r25
 590:	8f 93       	push	r24
 592:	8d e8       	ldi	r24, 0x8D	; 141
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	9f 93       	push	r25
 598:	8f 93       	push	r24
 59a:	0e 94 07 04 	call	0x80e	; 0x80e <sprintf>
	lcd_clrscr();
 59e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_clrscr>
	lcd_puts(displayBuffer);
 5a2:	8d e8       	ldi	r24, 0x8D	; 141
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_puts>
}
 5aa:	8d b7       	in	r24, 0x3d	; 61
 5ac:	9e b7       	in	r25, 0x3e	; 62
 5ae:	08 96       	adiw	r24, 0x08	; 8
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	f8 94       	cli
 5b4:	9e bf       	out	0x3e, r25	; 62
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	8d bf       	out	0x3d, r24	; 61
 5ba:	08 95       	ret

000005bc <send_data>:

void send_data(){
	sprintf(txBuffer, "DATE%d|HU%d|SN%d", currentTemp, currentHumidity, seqNumber);
 5bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5c0:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <currentHumidity>
 5c4:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <currentTemp>
 5c8:	1f 92       	push	r1
 5ca:	2f 93       	push	r18
 5cc:	29 2f       	mov	r18, r25
 5ce:	09 2e       	mov	r0, r25
 5d0:	00 0c       	add	r0, r0
 5d2:	33 0b       	sbc	r19, r19
 5d4:	3f 93       	push	r19
 5d6:	9f 93       	push	r25
 5d8:	28 2f       	mov	r18, r24
 5da:	08 2e       	mov	r0, r24
 5dc:	00 0c       	add	r0, r0
 5de:	33 0b       	sbc	r19, r19
 5e0:	3f 93       	push	r19
 5e2:	8f 93       	push	r24
 5e4:	80 e1       	ldi	r24, 0x10	; 16
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	9f 93       	push	r25
 5ea:	8f 93       	push	r24
 5ec:	8c e6       	ldi	r24, 0x6C	; 108
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	9f 93       	push	r25
 5f2:	8f 93       	push	r24
 5f4:	0e 94 07 04 	call	0x80e	; 0x80e <sprintf>
	uart_putc(0x02);
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uart_putc>
	uart_puts(txBuffer);
 5fe:	8c e6       	ldi	r24, 0x6C	; 108
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <uart_puts>
	uart_putc(0x03);
 606:	83 e0       	ldi	r24, 0x03	; 3
 608:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uart_putc>
	retryCount++;
 60c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <retryCount>
 610:	8f 5f       	subi	r24, 0xFF	; 255
 612:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <retryCount>
}
 616:	8d b7       	in	r24, 0x3d	; 61
 618:	9e b7       	in	r25, 0x3e	; 62
 61a:	0a 96       	adiw	r24, 0x0a	; 10
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	f8 94       	cli
 620:	9e bf       	out	0x3e, r25	; 62
 622:	0f be       	out	0x3f, r0	; 63
 624:	8d bf       	out	0x3d, r24	; 61
 626:	08 95       	ret

00000628 <main>:

int main(void)
{
	lcd_init(LCD_DISP_ON);
 628:	8c e0       	ldi	r24, 0x0C	; 12
 62a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_init>
	lcd_clrscr();
 62e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_clrscr>
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
 632:	87 e6       	ldi	r24, 0x67	; 103
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 ac 03 	call	0x758	; 0x758 <uart_init>
	timer1_init();
 63a:	0e 94 55 02 	call	0x4aa	; 0x4aa <timer1_init>
	
	DDRB |=(1<<DDB0);
 63e:	84 b1       	in	r24, 0x04	; 4
 640:	81 60       	ori	r24, 0x01	; 1
 642:	84 b9       	out	0x04, r24	; 4
	
	sei();
 644:	78 94       	sei
	
	while(1){
		check_input();
 646:	0e 94 78 02 	call	0x4f0	; 0x4f0 <check_input>
		if(ackReceived) {
 64a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ackReceived>
 64e:	88 23       	and	r24, r24
 650:	61 f0       	breq	.+24     	; 0x66a <main+0x42>
			PORTB &= ~(1 << PORTB0);  // Turn off LED
 652:	85 b1       	in	r24, 0x05	; 5
 654:	8e 7f       	andi	r24, 0xFE	; 254
 656:	85 b9       	out	0x05, r24	; 5
			seqNumber++;
 658:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 65c:	8f 5f       	subi	r24, 0xFF	; 255
 65e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			retryCount = 0;
 662:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <retryCount>
			ackReceived = 0;
 666:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ackReceived>
		}
		
		if(measureTimeFlag) {
 66a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 66e:	88 23       	and	r24, r24
 670:	51 f3       	breq	.-44     	; 0x646 <main+0x1e>
			measureTimeFlag = 0;
 672:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
			if(dht_gettemperaturehumidity(&currentTemp, &currentHumidity) == DHT_ERROR_NOERR) {
 676:	6a e6       	ldi	r22, 0x6A	; 106
 678:	71 e0       	ldi	r23, 0x01	; 1
 67a:	8c e8       	ldi	r24, 0x8C	; 140
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	0e 94 02 01 	call	0x204	; 0x204 <dht_gettemperaturehumidity>
 682:	81 11       	cpse	r24, r1
 684:	e0 cf       	rjmp	.-64     	; 0x646 <main+0x1e>
				update_display();
 686:	0e 94 b5 02 	call	0x56a	; 0x56a <update_display>
				
				if (sendFlag) {
 68a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <sendFlag>
 68e:	88 23       	and	r24, r24
 690:	d1 f2       	breq	.-76     	; 0x646 <main+0x1e>
					if (retryCount < 3) {
 692:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <retryCount>
 696:	83 30       	cpi	r24, 0x03	; 3
 698:	18 f4       	brcc	.+6      	; 0x6a0 <main+0x78>
						send_data();
 69a:	0e 94 de 02 	call	0x5bc	; 0x5bc <send_data>
 69e:	d3 cf       	rjmp	.-90     	; 0x646 <main+0x1e>
						} else {
						PORTB |= (1 << PORTB0);  // Turn on LED after 3 retries
 6a0:	85 b1       	in	r24, 0x05	; 5
 6a2:	81 60       	ori	r24, 0x01	; 1
 6a4:	85 b9       	out	0x05, r24	; 5
 6a6:	cf cf       	rjmp	.-98     	; 0x646 <main+0x1e>

000006a8 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 6a8:	1f 92       	push	r1
 6aa:	0f 92       	push	r0
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	0f 92       	push	r0
 6b0:	11 24       	eor	r1, r1
 6b2:	2f 93       	push	r18
 6b4:	8f 93       	push	r24
 6b6:	9f 93       	push	r25
 6b8:	ef 93       	push	r30
 6ba:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 6bc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 6c0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 6c4:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 6c6:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <UART_RxHead>
 6ca:	ef 5f       	subi	r30, 0xFF	; 255
 6cc:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 6ce:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <UART_RxTail>
 6d2:	e9 17       	cp	r30, r25
 6d4:	39 f0       	breq	.+14     	; 0x6e4 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 6d6:	e0 93 27 01 	sts	0x0127, r30	; 0x800127 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	e6 5d       	subi	r30, 0xD6	; 214
 6de:	fe 4f       	sbci	r31, 0xFE	; 254
 6e0:	20 83       	st	Z, r18
 6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 6e4:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 6e6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_LastRxError>
 6ea:	89 2b       	or	r24, r25
 6ec:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <UART_LastRxError>
}
 6f0:	ff 91       	pop	r31
 6f2:	ef 91       	pop	r30
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	2f 91       	pop	r18
 6fa:	0f 90       	pop	r0
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	0f 90       	pop	r0
 700:	1f 90       	pop	r1
 702:	18 95       	reti

00000704 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 704:	1f 92       	push	r1
 706:	0f 92       	push	r0
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	0f 92       	push	r0
 70c:	11 24       	eor	r1, r1
 70e:	8f 93       	push	r24
 710:	9f 93       	push	r25
 712:	ef 93       	push	r30
 714:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 716:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <UART_TxHead>
 71a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <UART_TxTail>
 71e:	98 17       	cp	r25, r24
 720:	69 f0       	breq	.+26     	; 0x73c <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 722:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <UART_TxTail>
 726:	ef 5f       	subi	r30, 0xFF	; 255
 728:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 72a:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	e6 5b       	subi	r30, 0xB6	; 182
 732:	fe 4f       	sbci	r31, 0xFE	; 254
 734:	80 81       	ld	r24, Z
 736:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 73a:	05 c0       	rjmp	.+10     	; 0x746 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 73c:	e1 ec       	ldi	r30, 0xC1	; 193
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	8f 7d       	andi	r24, 0xDF	; 223
 744:	80 83       	st	Z, r24
    }
}
 746:	ff 91       	pop	r31
 748:	ef 91       	pop	r30
 74a:	9f 91       	pop	r25
 74c:	8f 91       	pop	r24
 74e:	0f 90       	pop	r0
 750:	0f be       	out	0x3f, r0	; 63
 752:	0f 90       	pop	r0
 754:	1f 90       	pop	r1
 756:	18 95       	reti

00000758 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 758:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <UART_TxHead>
    UART_TxTail = 0;
 75c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <UART_TxTail>
    UART_RxHead = 0;
 760:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <UART_RxHead>
    UART_RxTail = 0;
 764:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <UART_RxTail>
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 768:	28 2f       	mov	r18, r24
 76a:	39 2f       	mov	r19, r25
 76c:	33 23       	and	r19, r19
 76e:	1c f4       	brge	.+6      	; 0x776 <uart_init+0x1e>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 770:	22 e0       	ldi	r18, 0x02	; 2
 772:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 776:	90 78       	andi	r25, 0x80	; 128
 778:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 77c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 780:	88 e9       	ldi	r24, 0x98	; 152
 782:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 786:	86 e0       	ldi	r24, 0x06	; 6
 788:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 78c:	08 95       	ret

0000078e <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 78e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <UART_RxHead>
 792:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <UART_RxTail>
 796:	98 17       	cp	r25, r24
 798:	a9 f0       	breq	.+42     	; 0x7c4 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 79a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <UART_RxTail>
 79e:	9f 5f       	subi	r25, 0xFF	; 255
 7a0:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 7a2:	e9 2f       	mov	r30, r25
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	e6 5d       	subi	r30, 0xD6	; 214
 7a8:	fe 4f       	sbci	r31, 0xFE	; 254
 7aa:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 7ac:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <UART_LastRxError>
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 7b0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <UART_RxTail>
    
    UART_LastRxError = 0;
 7b4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <UART_LastRxError>
    return (lastRxError << 8) + data;
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	98 2f       	mov	r25, r24
 7bc:	88 27       	eor	r24, r24
 7be:	82 0f       	add	r24, r18
 7c0:	91 1d       	adc	r25, r1
 7c2:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 7c8:	08 95       	ret

000007ca <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 7ca:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <UART_TxHead>
 7ce:	2f 5f       	subi	r18, 0xFF	; 255
 7d0:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 7d2:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <UART_TxTail>
 7d6:	29 17       	cp	r18, r25
 7d8:	e1 f3       	breq	.-8      	; 0x7d2 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 7da:	e2 2f       	mov	r30, r18
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	e6 5b       	subi	r30, 0xB6	; 182
 7e0:	fe 4f       	sbci	r31, 0xFE	; 254
 7e2:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 7e4:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 7e8:	e1 ec       	ldi	r30, 0xC1	; 193
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	80 62       	ori	r24, 0x20	; 32
 7f0:	80 83       	st	Z, r24
 7f2:	08 95       	ret

000007f4 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	ec 01       	movw	r28, r24
    while (*s) 
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
      uart_putc(*s++);
 7fc:	21 96       	adiw	r28, 0x01	; 1
 7fe:	0e 94 e5 03 	call	0x7ca	; 0x7ca <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 802:	88 81       	ld	r24, Y
 804:	81 11       	cpse	r24, r1
 806:	fa cf       	rjmp	.-12     	; 0x7fc <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	08 95       	ret

0000080e <sprintf>:
 80e:	ae e0       	ldi	r26, 0x0E	; 14
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	ed e0       	ldi	r30, 0x0D	; 13
 814:	f4 e0       	ldi	r31, 0x04	; 4
 816:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__prologue_saves__+0x1c>
 81a:	0d 89       	ldd	r16, Y+21	; 0x15
 81c:	1e 89       	ldd	r17, Y+22	; 0x16
 81e:	86 e0       	ldi	r24, 0x06	; 6
 820:	8c 83       	std	Y+4, r24	; 0x04
 822:	1a 83       	std	Y+2, r17	; 0x02
 824:	09 83       	std	Y+1, r16	; 0x01
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	9f e7       	ldi	r25, 0x7F	; 127
 82a:	9e 83       	std	Y+6, r25	; 0x06
 82c:	8d 83       	std	Y+5, r24	; 0x05
 82e:	ae 01       	movw	r20, r28
 830:	47 5e       	subi	r20, 0xE7	; 231
 832:	5f 4f       	sbci	r21, 0xFF	; 255
 834:	6f 89       	ldd	r22, Y+23	; 0x17
 836:	78 8d       	ldd	r23, Y+24	; 0x18
 838:	ce 01       	movw	r24, r28
 83a:	01 96       	adiw	r24, 0x01	; 1
 83c:	0e 94 29 04 	call	0x852	; 0x852 <vfprintf>
 840:	ef 81       	ldd	r30, Y+7	; 0x07
 842:	f8 85       	ldd	r31, Y+8	; 0x08
 844:	e0 0f       	add	r30, r16
 846:	f1 1f       	adc	r31, r17
 848:	10 82       	st	Z, r1
 84a:	2e 96       	adiw	r28, 0x0e	; 14
 84c:	e4 e0       	ldi	r30, 0x04	; 4
 84e:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__epilogue_restores__+0x1c>

00000852 <vfprintf>:
 852:	ab e0       	ldi	r26, 0x0B	; 11
 854:	b0 e0       	ldi	r27, 0x00	; 0
 856:	ef e2       	ldi	r30, 0x2F	; 47
 858:	f4 e0       	ldi	r31, 0x04	; 4
 85a:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__prologue_saves__>
 85e:	6c 01       	movw	r12, r24
 860:	7b 01       	movw	r14, r22
 862:	8a 01       	movw	r16, r20
 864:	fc 01       	movw	r30, r24
 866:	17 82       	std	Z+7, r1	; 0x07
 868:	16 82       	std	Z+6, r1	; 0x06
 86a:	83 81       	ldd	r24, Z+3	; 0x03
 86c:	81 ff       	sbrs	r24, 1
 86e:	cc c1       	rjmp	.+920    	; 0xc08 <__stack+0x309>
 870:	ce 01       	movw	r24, r28
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	3c 01       	movw	r6, r24
 876:	f6 01       	movw	r30, r12
 878:	93 81       	ldd	r25, Z+3	; 0x03
 87a:	f7 01       	movw	r30, r14
 87c:	93 fd       	sbrc	r25, 3
 87e:	85 91       	lpm	r24, Z+
 880:	93 ff       	sbrs	r25, 3
 882:	81 91       	ld	r24, Z+
 884:	7f 01       	movw	r14, r30
 886:	88 23       	and	r24, r24
 888:	09 f4       	brne	.+2      	; 0x88c <vfprintf+0x3a>
 88a:	ba c1       	rjmp	.+884    	; 0xc00 <__stack+0x301>
 88c:	85 32       	cpi	r24, 0x25	; 37
 88e:	39 f4       	brne	.+14     	; 0x89e <vfprintf+0x4c>
 890:	93 fd       	sbrc	r25, 3
 892:	85 91       	lpm	r24, Z+
 894:	93 ff       	sbrs	r25, 3
 896:	81 91       	ld	r24, Z+
 898:	7f 01       	movw	r14, r30
 89a:	85 32       	cpi	r24, 0x25	; 37
 89c:	29 f4       	brne	.+10     	; 0x8a8 <vfprintf+0x56>
 89e:	b6 01       	movw	r22, r12
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 8a6:	e7 cf       	rjmp	.-50     	; 0x876 <vfprintf+0x24>
 8a8:	91 2c       	mov	r9, r1
 8aa:	21 2c       	mov	r2, r1
 8ac:	31 2c       	mov	r3, r1
 8ae:	ff e1       	ldi	r31, 0x1F	; 31
 8b0:	f3 15       	cp	r31, r3
 8b2:	d8 f0       	brcs	.+54     	; 0x8ea <vfprintf+0x98>
 8b4:	8b 32       	cpi	r24, 0x2B	; 43
 8b6:	79 f0       	breq	.+30     	; 0x8d6 <vfprintf+0x84>
 8b8:	38 f4       	brcc	.+14     	; 0x8c8 <vfprintf+0x76>
 8ba:	80 32       	cpi	r24, 0x20	; 32
 8bc:	79 f0       	breq	.+30     	; 0x8dc <vfprintf+0x8a>
 8be:	83 32       	cpi	r24, 0x23	; 35
 8c0:	a1 f4       	brne	.+40     	; 0x8ea <vfprintf+0x98>
 8c2:	23 2d       	mov	r18, r3
 8c4:	20 61       	ori	r18, 0x10	; 16
 8c6:	1d c0       	rjmp	.+58     	; 0x902 <__stack+0x3>
 8c8:	8d 32       	cpi	r24, 0x2D	; 45
 8ca:	61 f0       	breq	.+24     	; 0x8e4 <vfprintf+0x92>
 8cc:	80 33       	cpi	r24, 0x30	; 48
 8ce:	69 f4       	brne	.+26     	; 0x8ea <vfprintf+0x98>
 8d0:	23 2d       	mov	r18, r3
 8d2:	21 60       	ori	r18, 0x01	; 1
 8d4:	16 c0       	rjmp	.+44     	; 0x902 <__stack+0x3>
 8d6:	83 2d       	mov	r24, r3
 8d8:	82 60       	ori	r24, 0x02	; 2
 8da:	38 2e       	mov	r3, r24
 8dc:	e3 2d       	mov	r30, r3
 8de:	e4 60       	ori	r30, 0x04	; 4
 8e0:	3e 2e       	mov	r3, r30
 8e2:	2a c0       	rjmp	.+84     	; 0x938 <__stack+0x39>
 8e4:	f3 2d       	mov	r31, r3
 8e6:	f8 60       	ori	r31, 0x08	; 8
 8e8:	1d c0       	rjmp	.+58     	; 0x924 <__stack+0x25>
 8ea:	37 fc       	sbrc	r3, 7
 8ec:	2d c0       	rjmp	.+90     	; 0x948 <__stack+0x49>
 8ee:	20 ed       	ldi	r18, 0xD0	; 208
 8f0:	28 0f       	add	r18, r24
 8f2:	2a 30       	cpi	r18, 0x0A	; 10
 8f4:	40 f0       	brcs	.+16     	; 0x906 <__stack+0x7>
 8f6:	8e 32       	cpi	r24, 0x2E	; 46
 8f8:	b9 f4       	brne	.+46     	; 0x928 <__stack+0x29>
 8fa:	36 fc       	sbrc	r3, 6
 8fc:	81 c1       	rjmp	.+770    	; 0xc00 <__stack+0x301>
 8fe:	23 2d       	mov	r18, r3
 900:	20 64       	ori	r18, 0x40	; 64
 902:	32 2e       	mov	r3, r18
 904:	19 c0       	rjmp	.+50     	; 0x938 <__stack+0x39>
 906:	36 fe       	sbrs	r3, 6
 908:	06 c0       	rjmp	.+12     	; 0x916 <__stack+0x17>
 90a:	8a e0       	ldi	r24, 0x0A	; 10
 90c:	98 9e       	mul	r9, r24
 90e:	20 0d       	add	r18, r0
 910:	11 24       	eor	r1, r1
 912:	92 2e       	mov	r9, r18
 914:	11 c0       	rjmp	.+34     	; 0x938 <__stack+0x39>
 916:	ea e0       	ldi	r30, 0x0A	; 10
 918:	2e 9e       	mul	r2, r30
 91a:	20 0d       	add	r18, r0
 91c:	11 24       	eor	r1, r1
 91e:	22 2e       	mov	r2, r18
 920:	f3 2d       	mov	r31, r3
 922:	f0 62       	ori	r31, 0x20	; 32
 924:	3f 2e       	mov	r3, r31
 926:	08 c0       	rjmp	.+16     	; 0x938 <__stack+0x39>
 928:	8c 36       	cpi	r24, 0x6C	; 108
 92a:	21 f4       	brne	.+8      	; 0x934 <__stack+0x35>
 92c:	83 2d       	mov	r24, r3
 92e:	80 68       	ori	r24, 0x80	; 128
 930:	38 2e       	mov	r3, r24
 932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
 934:	88 36       	cpi	r24, 0x68	; 104
 936:	41 f4       	brne	.+16     	; 0x948 <__stack+0x49>
 938:	f7 01       	movw	r30, r14
 93a:	93 fd       	sbrc	r25, 3
 93c:	85 91       	lpm	r24, Z+
 93e:	93 ff       	sbrs	r25, 3
 940:	81 91       	ld	r24, Z+
 942:	7f 01       	movw	r14, r30
 944:	81 11       	cpse	r24, r1
 946:	b3 cf       	rjmp	.-154    	; 0x8ae <vfprintf+0x5c>
 948:	98 2f       	mov	r25, r24
 94a:	9f 7d       	andi	r25, 0xDF	; 223
 94c:	95 54       	subi	r25, 0x45	; 69
 94e:	93 30       	cpi	r25, 0x03	; 3
 950:	28 f4       	brcc	.+10     	; 0x95c <__stack+0x5d>
 952:	0c 5f       	subi	r16, 0xFC	; 252
 954:	1f 4f       	sbci	r17, 0xFF	; 255
 956:	9f e3       	ldi	r25, 0x3F	; 63
 958:	99 83       	std	Y+1, r25	; 0x01
 95a:	0d c0       	rjmp	.+26     	; 0x976 <__stack+0x77>
 95c:	83 36       	cpi	r24, 0x63	; 99
 95e:	31 f0       	breq	.+12     	; 0x96c <__stack+0x6d>
 960:	83 37       	cpi	r24, 0x73	; 115
 962:	71 f0       	breq	.+28     	; 0x980 <__stack+0x81>
 964:	83 35       	cpi	r24, 0x53	; 83
 966:	09 f0       	breq	.+2      	; 0x96a <__stack+0x6b>
 968:	59 c0       	rjmp	.+178    	; 0xa1c <__stack+0x11d>
 96a:	21 c0       	rjmp	.+66     	; 0x9ae <__stack+0xaf>
 96c:	f8 01       	movw	r30, r16
 96e:	80 81       	ld	r24, Z
 970:	89 83       	std	Y+1, r24	; 0x01
 972:	0e 5f       	subi	r16, 0xFE	; 254
 974:	1f 4f       	sbci	r17, 0xFF	; 255
 976:	88 24       	eor	r8, r8
 978:	83 94       	inc	r8
 97a:	91 2c       	mov	r9, r1
 97c:	53 01       	movw	r10, r6
 97e:	13 c0       	rjmp	.+38     	; 0x9a6 <__stack+0xa7>
 980:	28 01       	movw	r4, r16
 982:	f2 e0       	ldi	r31, 0x02	; 2
 984:	4f 0e       	add	r4, r31
 986:	51 1c       	adc	r5, r1
 988:	f8 01       	movw	r30, r16
 98a:	a0 80       	ld	r10, Z
 98c:	b1 80       	ldd	r11, Z+1	; 0x01
 98e:	36 fe       	sbrs	r3, 6
 990:	03 c0       	rjmp	.+6      	; 0x998 <__stack+0x99>
 992:	69 2d       	mov	r22, r9
 994:	70 e0       	ldi	r23, 0x00	; 0
 996:	02 c0       	rjmp	.+4      	; 0x99c <__stack+0x9d>
 998:	6f ef       	ldi	r22, 0xFF	; 255
 99a:	7f ef       	ldi	r23, 0xFF	; 255
 99c:	c5 01       	movw	r24, r10
 99e:	0e 94 15 06 	call	0xc2a	; 0xc2a <strnlen>
 9a2:	4c 01       	movw	r8, r24
 9a4:	82 01       	movw	r16, r4
 9a6:	f3 2d       	mov	r31, r3
 9a8:	ff 77       	andi	r31, 0x7F	; 127
 9aa:	3f 2e       	mov	r3, r31
 9ac:	16 c0       	rjmp	.+44     	; 0x9da <__stack+0xdb>
 9ae:	28 01       	movw	r4, r16
 9b0:	22 e0       	ldi	r18, 0x02	; 2
 9b2:	42 0e       	add	r4, r18
 9b4:	51 1c       	adc	r5, r1
 9b6:	f8 01       	movw	r30, r16
 9b8:	a0 80       	ld	r10, Z
 9ba:	b1 80       	ldd	r11, Z+1	; 0x01
 9bc:	36 fe       	sbrs	r3, 6
 9be:	03 c0       	rjmp	.+6      	; 0x9c6 <__stack+0xc7>
 9c0:	69 2d       	mov	r22, r9
 9c2:	70 e0       	ldi	r23, 0x00	; 0
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__stack+0xcb>
 9c6:	6f ef       	ldi	r22, 0xFF	; 255
 9c8:	7f ef       	ldi	r23, 0xFF	; 255
 9ca:	c5 01       	movw	r24, r10
 9cc:	0e 94 0a 06 	call	0xc14	; 0xc14 <strnlen_P>
 9d0:	4c 01       	movw	r8, r24
 9d2:	f3 2d       	mov	r31, r3
 9d4:	f0 68       	ori	r31, 0x80	; 128
 9d6:	3f 2e       	mov	r3, r31
 9d8:	82 01       	movw	r16, r4
 9da:	33 fc       	sbrc	r3, 3
 9dc:	1b c0       	rjmp	.+54     	; 0xa14 <__stack+0x115>
 9de:	82 2d       	mov	r24, r2
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	88 16       	cp	r8, r24
 9e4:	99 06       	cpc	r9, r25
 9e6:	b0 f4       	brcc	.+44     	; 0xa14 <__stack+0x115>
 9e8:	b6 01       	movw	r22, r12
 9ea:	80 e2       	ldi	r24, 0x20	; 32
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 9f2:	2a 94       	dec	r2
 9f4:	f4 cf       	rjmp	.-24     	; 0x9de <__stack+0xdf>
 9f6:	f5 01       	movw	r30, r10
 9f8:	37 fc       	sbrc	r3, 7
 9fa:	85 91       	lpm	r24, Z+
 9fc:	37 fe       	sbrs	r3, 7
 9fe:	81 91       	ld	r24, Z+
 a00:	5f 01       	movw	r10, r30
 a02:	b6 01       	movw	r22, r12
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 a0a:	21 10       	cpse	r2, r1
 a0c:	2a 94       	dec	r2
 a0e:	21 e0       	ldi	r18, 0x01	; 1
 a10:	82 1a       	sub	r8, r18
 a12:	91 08       	sbc	r9, r1
 a14:	81 14       	cp	r8, r1
 a16:	91 04       	cpc	r9, r1
 a18:	71 f7       	brne	.-36     	; 0x9f6 <__stack+0xf7>
 a1a:	e8 c0       	rjmp	.+464    	; 0xbec <__stack+0x2ed>
 a1c:	84 36       	cpi	r24, 0x64	; 100
 a1e:	11 f0       	breq	.+4      	; 0xa24 <__stack+0x125>
 a20:	89 36       	cpi	r24, 0x69	; 105
 a22:	41 f5       	brne	.+80     	; 0xa74 <__stack+0x175>
 a24:	f8 01       	movw	r30, r16
 a26:	37 fe       	sbrs	r3, 7
 a28:	07 c0       	rjmp	.+14     	; 0xa38 <__stack+0x139>
 a2a:	60 81       	ld	r22, Z
 a2c:	71 81       	ldd	r23, Z+1	; 0x01
 a2e:	82 81       	ldd	r24, Z+2	; 0x02
 a30:	93 81       	ldd	r25, Z+3	; 0x03
 a32:	0c 5f       	subi	r16, 0xFC	; 252
 a34:	1f 4f       	sbci	r17, 0xFF	; 255
 a36:	08 c0       	rjmp	.+16     	; 0xa48 <__stack+0x149>
 a38:	60 81       	ld	r22, Z
 a3a:	71 81       	ldd	r23, Z+1	; 0x01
 a3c:	07 2e       	mov	r0, r23
 a3e:	00 0c       	add	r0, r0
 a40:	88 0b       	sbc	r24, r24
 a42:	99 0b       	sbc	r25, r25
 a44:	0e 5f       	subi	r16, 0xFE	; 254
 a46:	1f 4f       	sbci	r17, 0xFF	; 255
 a48:	f3 2d       	mov	r31, r3
 a4a:	ff 76       	andi	r31, 0x6F	; 111
 a4c:	3f 2e       	mov	r3, r31
 a4e:	97 ff       	sbrs	r25, 7
 a50:	09 c0       	rjmp	.+18     	; 0xa64 <__stack+0x165>
 a52:	90 95       	com	r25
 a54:	80 95       	com	r24
 a56:	70 95       	com	r23
 a58:	61 95       	neg	r22
 a5a:	7f 4f       	sbci	r23, 0xFF	; 255
 a5c:	8f 4f       	sbci	r24, 0xFF	; 255
 a5e:	9f 4f       	sbci	r25, 0xFF	; 255
 a60:	f0 68       	ori	r31, 0x80	; 128
 a62:	3f 2e       	mov	r3, r31
 a64:	2a e0       	ldi	r18, 0x0A	; 10
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	a3 01       	movw	r20, r6
 a6a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__ultoa_invert>
 a6e:	88 2e       	mov	r8, r24
 a70:	86 18       	sub	r8, r6
 a72:	45 c0       	rjmp	.+138    	; 0xafe <__stack+0x1ff>
 a74:	85 37       	cpi	r24, 0x75	; 117
 a76:	31 f4       	brne	.+12     	; 0xa84 <__stack+0x185>
 a78:	23 2d       	mov	r18, r3
 a7a:	2f 7e       	andi	r18, 0xEF	; 239
 a7c:	b2 2e       	mov	r11, r18
 a7e:	2a e0       	ldi	r18, 0x0A	; 10
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	25 c0       	rjmp	.+74     	; 0xace <__stack+0x1cf>
 a84:	93 2d       	mov	r25, r3
 a86:	99 7f       	andi	r25, 0xF9	; 249
 a88:	b9 2e       	mov	r11, r25
 a8a:	8f 36       	cpi	r24, 0x6F	; 111
 a8c:	c1 f0       	breq	.+48     	; 0xabe <__stack+0x1bf>
 a8e:	18 f4       	brcc	.+6      	; 0xa96 <__stack+0x197>
 a90:	88 35       	cpi	r24, 0x58	; 88
 a92:	79 f0       	breq	.+30     	; 0xab2 <__stack+0x1b3>
 a94:	b5 c0       	rjmp	.+362    	; 0xc00 <__stack+0x301>
 a96:	80 37       	cpi	r24, 0x70	; 112
 a98:	19 f0       	breq	.+6      	; 0xaa0 <__stack+0x1a1>
 a9a:	88 37       	cpi	r24, 0x78	; 120
 a9c:	21 f0       	breq	.+8      	; 0xaa6 <__stack+0x1a7>
 a9e:	b0 c0       	rjmp	.+352    	; 0xc00 <__stack+0x301>
 aa0:	e9 2f       	mov	r30, r25
 aa2:	e0 61       	ori	r30, 0x10	; 16
 aa4:	be 2e       	mov	r11, r30
 aa6:	b4 fe       	sbrs	r11, 4
 aa8:	0d c0       	rjmp	.+26     	; 0xac4 <__stack+0x1c5>
 aaa:	fb 2d       	mov	r31, r11
 aac:	f4 60       	ori	r31, 0x04	; 4
 aae:	bf 2e       	mov	r11, r31
 ab0:	09 c0       	rjmp	.+18     	; 0xac4 <__stack+0x1c5>
 ab2:	34 fe       	sbrs	r3, 4
 ab4:	0a c0       	rjmp	.+20     	; 0xaca <__stack+0x1cb>
 ab6:	29 2f       	mov	r18, r25
 ab8:	26 60       	ori	r18, 0x06	; 6
 aba:	b2 2e       	mov	r11, r18
 abc:	06 c0       	rjmp	.+12     	; 0xaca <__stack+0x1cb>
 abe:	28 e0       	ldi	r18, 0x08	; 8
 ac0:	30 e0       	ldi	r19, 0x00	; 0
 ac2:	05 c0       	rjmp	.+10     	; 0xace <__stack+0x1cf>
 ac4:	20 e1       	ldi	r18, 0x10	; 16
 ac6:	30 e0       	ldi	r19, 0x00	; 0
 ac8:	02 c0       	rjmp	.+4      	; 0xace <__stack+0x1cf>
 aca:	20 e1       	ldi	r18, 0x10	; 16
 acc:	32 e0       	ldi	r19, 0x02	; 2
 ace:	f8 01       	movw	r30, r16
 ad0:	b7 fe       	sbrs	r11, 7
 ad2:	07 c0       	rjmp	.+14     	; 0xae2 <__stack+0x1e3>
 ad4:	60 81       	ld	r22, Z
 ad6:	71 81       	ldd	r23, Z+1	; 0x01
 ad8:	82 81       	ldd	r24, Z+2	; 0x02
 ada:	93 81       	ldd	r25, Z+3	; 0x03
 adc:	0c 5f       	subi	r16, 0xFC	; 252
 ade:	1f 4f       	sbci	r17, 0xFF	; 255
 ae0:	06 c0       	rjmp	.+12     	; 0xaee <__stack+0x1ef>
 ae2:	60 81       	ld	r22, Z
 ae4:	71 81       	ldd	r23, Z+1	; 0x01
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	0e 5f       	subi	r16, 0xFE	; 254
 aec:	1f 4f       	sbci	r17, 0xFF	; 255
 aee:	a3 01       	movw	r20, r6
 af0:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__ultoa_invert>
 af4:	88 2e       	mov	r8, r24
 af6:	86 18       	sub	r8, r6
 af8:	fb 2d       	mov	r31, r11
 afa:	ff 77       	andi	r31, 0x7F	; 127
 afc:	3f 2e       	mov	r3, r31
 afe:	36 fe       	sbrs	r3, 6
 b00:	0d c0       	rjmp	.+26     	; 0xb1c <__stack+0x21d>
 b02:	23 2d       	mov	r18, r3
 b04:	2e 7f       	andi	r18, 0xFE	; 254
 b06:	a2 2e       	mov	r10, r18
 b08:	89 14       	cp	r8, r9
 b0a:	58 f4       	brcc	.+22     	; 0xb22 <__stack+0x223>
 b0c:	34 fe       	sbrs	r3, 4
 b0e:	0b c0       	rjmp	.+22     	; 0xb26 <__stack+0x227>
 b10:	32 fc       	sbrc	r3, 2
 b12:	09 c0       	rjmp	.+18     	; 0xb26 <__stack+0x227>
 b14:	83 2d       	mov	r24, r3
 b16:	8e 7e       	andi	r24, 0xEE	; 238
 b18:	a8 2e       	mov	r10, r24
 b1a:	05 c0       	rjmp	.+10     	; 0xb26 <__stack+0x227>
 b1c:	b8 2c       	mov	r11, r8
 b1e:	a3 2c       	mov	r10, r3
 b20:	03 c0       	rjmp	.+6      	; 0xb28 <__stack+0x229>
 b22:	b8 2c       	mov	r11, r8
 b24:	01 c0       	rjmp	.+2      	; 0xb28 <__stack+0x229>
 b26:	b9 2c       	mov	r11, r9
 b28:	a4 fe       	sbrs	r10, 4
 b2a:	0f c0       	rjmp	.+30     	; 0xb4a <__stack+0x24b>
 b2c:	fe 01       	movw	r30, r28
 b2e:	e8 0d       	add	r30, r8
 b30:	f1 1d       	adc	r31, r1
 b32:	80 81       	ld	r24, Z
 b34:	80 33       	cpi	r24, 0x30	; 48
 b36:	21 f4       	brne	.+8      	; 0xb40 <__stack+0x241>
 b38:	9a 2d       	mov	r25, r10
 b3a:	99 7e       	andi	r25, 0xE9	; 233
 b3c:	a9 2e       	mov	r10, r25
 b3e:	09 c0       	rjmp	.+18     	; 0xb52 <__stack+0x253>
 b40:	a2 fe       	sbrs	r10, 2
 b42:	06 c0       	rjmp	.+12     	; 0xb50 <__stack+0x251>
 b44:	b3 94       	inc	r11
 b46:	b3 94       	inc	r11
 b48:	04 c0       	rjmp	.+8      	; 0xb52 <__stack+0x253>
 b4a:	8a 2d       	mov	r24, r10
 b4c:	86 78       	andi	r24, 0x86	; 134
 b4e:	09 f0       	breq	.+2      	; 0xb52 <__stack+0x253>
 b50:	b3 94       	inc	r11
 b52:	a3 fc       	sbrc	r10, 3
 b54:	11 c0       	rjmp	.+34     	; 0xb78 <__stack+0x279>
 b56:	a0 fe       	sbrs	r10, 0
 b58:	06 c0       	rjmp	.+12     	; 0xb66 <__stack+0x267>
 b5a:	b2 14       	cp	r11, r2
 b5c:	88 f4       	brcc	.+34     	; 0xb80 <__stack+0x281>
 b5e:	28 0c       	add	r2, r8
 b60:	92 2c       	mov	r9, r2
 b62:	9b 18       	sub	r9, r11
 b64:	0e c0       	rjmp	.+28     	; 0xb82 <__stack+0x283>
 b66:	b2 14       	cp	r11, r2
 b68:	60 f4       	brcc	.+24     	; 0xb82 <__stack+0x283>
 b6a:	b6 01       	movw	r22, r12
 b6c:	80 e2       	ldi	r24, 0x20	; 32
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 b74:	b3 94       	inc	r11
 b76:	f7 cf       	rjmp	.-18     	; 0xb66 <__stack+0x267>
 b78:	b2 14       	cp	r11, r2
 b7a:	18 f4       	brcc	.+6      	; 0xb82 <__stack+0x283>
 b7c:	2b 18       	sub	r2, r11
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <__stack+0x285>
 b80:	98 2c       	mov	r9, r8
 b82:	21 2c       	mov	r2, r1
 b84:	a4 fe       	sbrs	r10, 4
 b86:	10 c0       	rjmp	.+32     	; 0xba8 <__stack+0x2a9>
 b88:	b6 01       	movw	r22, r12
 b8a:	80 e3       	ldi	r24, 0x30	; 48
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 b92:	a2 fe       	sbrs	r10, 2
 b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__stack+0x2c5>
 b96:	a1 fc       	sbrc	r10, 1
 b98:	03 c0       	rjmp	.+6      	; 0xba0 <__stack+0x2a1>
 b9a:	88 e7       	ldi	r24, 0x78	; 120
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <__stack+0x2a5>
 ba0:	88 e5       	ldi	r24, 0x58	; 88
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	b6 01       	movw	r22, r12
 ba6:	0c c0       	rjmp	.+24     	; 0xbc0 <__stack+0x2c1>
 ba8:	8a 2d       	mov	r24, r10
 baa:	86 78       	andi	r24, 0x86	; 134
 bac:	59 f0       	breq	.+22     	; 0xbc4 <__stack+0x2c5>
 bae:	a1 fe       	sbrs	r10, 1
 bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <__stack+0x2b7>
 bb2:	8b e2       	ldi	r24, 0x2B	; 43
 bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <__stack+0x2b9>
 bb6:	80 e2       	ldi	r24, 0x20	; 32
 bb8:	a7 fc       	sbrc	r10, 7
 bba:	8d e2       	ldi	r24, 0x2D	; 45
 bbc:	b6 01       	movw	r22, r12
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 bc4:	89 14       	cp	r8, r9
 bc6:	38 f4       	brcc	.+14     	; 0xbd6 <__stack+0x2d7>
 bc8:	b6 01       	movw	r22, r12
 bca:	80 e3       	ldi	r24, 0x30	; 48
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 bd2:	9a 94       	dec	r9
 bd4:	f7 cf       	rjmp	.-18     	; 0xbc4 <__stack+0x2c5>
 bd6:	8a 94       	dec	r8
 bd8:	f3 01       	movw	r30, r6
 bda:	e8 0d       	add	r30, r8
 bdc:	f1 1d       	adc	r31, r1
 bde:	80 81       	ld	r24, Z
 be0:	b6 01       	movw	r22, r12
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 be8:	81 10       	cpse	r8, r1
 bea:	f5 cf       	rjmp	.-22     	; 0xbd6 <__stack+0x2d7>
 bec:	22 20       	and	r2, r2
 bee:	09 f4       	brne	.+2      	; 0xbf2 <__stack+0x2f3>
 bf0:	42 ce       	rjmp	.-892    	; 0x876 <vfprintf+0x24>
 bf2:	b6 01       	movw	r22, r12
 bf4:	80 e2       	ldi	r24, 0x20	; 32
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	0e 94 20 06 	call	0xc40	; 0xc40 <fputc>
 bfc:	2a 94       	dec	r2
 bfe:	f6 cf       	rjmp	.-20     	; 0xbec <__stack+0x2ed>
 c00:	f6 01       	movw	r30, r12
 c02:	86 81       	ldd	r24, Z+6	; 0x06
 c04:	97 81       	ldd	r25, Z+7	; 0x07
 c06:	02 c0       	rjmp	.+4      	; 0xc0c <__stack+0x30d>
 c08:	8f ef       	ldi	r24, 0xFF	; 255
 c0a:	9f ef       	ldi	r25, 0xFF	; 255
 c0c:	2b 96       	adiw	r28, 0x0b	; 11
 c0e:	e2 e1       	ldi	r30, 0x12	; 18
 c10:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__epilogue_restores__>

00000c14 <strnlen_P>:
 c14:	fc 01       	movw	r30, r24
 c16:	05 90       	lpm	r0, Z+
 c18:	61 50       	subi	r22, 0x01	; 1
 c1a:	70 40       	sbci	r23, 0x00	; 0
 c1c:	01 10       	cpse	r0, r1
 c1e:	d8 f7       	brcc	.-10     	; 0xc16 <strnlen_P+0x2>
 c20:	80 95       	com	r24
 c22:	90 95       	com	r25
 c24:	8e 0f       	add	r24, r30
 c26:	9f 1f       	adc	r25, r31
 c28:	08 95       	ret

00000c2a <strnlen>:
 c2a:	fc 01       	movw	r30, r24
 c2c:	61 50       	subi	r22, 0x01	; 1
 c2e:	70 40       	sbci	r23, 0x00	; 0
 c30:	01 90       	ld	r0, Z+
 c32:	01 10       	cpse	r0, r1
 c34:	d8 f7       	brcc	.-10     	; 0xc2c <strnlen+0x2>
 c36:	80 95       	com	r24
 c38:	90 95       	com	r25
 c3a:	8e 0f       	add	r24, r30
 c3c:	9f 1f       	adc	r25, r31
 c3e:	08 95       	ret

00000c40 <fputc>:
 c40:	0f 93       	push	r16
 c42:	1f 93       	push	r17
 c44:	cf 93       	push	r28
 c46:	df 93       	push	r29
 c48:	fb 01       	movw	r30, r22
 c4a:	23 81       	ldd	r18, Z+3	; 0x03
 c4c:	21 fd       	sbrc	r18, 1
 c4e:	03 c0       	rjmp	.+6      	; 0xc56 <fputc+0x16>
 c50:	8f ef       	ldi	r24, 0xFF	; 255
 c52:	9f ef       	ldi	r25, 0xFF	; 255
 c54:	2c c0       	rjmp	.+88     	; 0xcae <fputc+0x6e>
 c56:	22 ff       	sbrs	r18, 2
 c58:	16 c0       	rjmp	.+44     	; 0xc86 <fputc+0x46>
 c5a:	46 81       	ldd	r20, Z+6	; 0x06
 c5c:	57 81       	ldd	r21, Z+7	; 0x07
 c5e:	24 81       	ldd	r18, Z+4	; 0x04
 c60:	35 81       	ldd	r19, Z+5	; 0x05
 c62:	42 17       	cp	r20, r18
 c64:	53 07       	cpc	r21, r19
 c66:	44 f4       	brge	.+16     	; 0xc78 <fputc+0x38>
 c68:	a0 81       	ld	r26, Z
 c6a:	b1 81       	ldd	r27, Z+1	; 0x01
 c6c:	9d 01       	movw	r18, r26
 c6e:	2f 5f       	subi	r18, 0xFF	; 255
 c70:	3f 4f       	sbci	r19, 0xFF	; 255
 c72:	31 83       	std	Z+1, r19	; 0x01
 c74:	20 83       	st	Z, r18
 c76:	8c 93       	st	X, r24
 c78:	26 81       	ldd	r18, Z+6	; 0x06
 c7a:	37 81       	ldd	r19, Z+7	; 0x07
 c7c:	2f 5f       	subi	r18, 0xFF	; 255
 c7e:	3f 4f       	sbci	r19, 0xFF	; 255
 c80:	37 83       	std	Z+7, r19	; 0x07
 c82:	26 83       	std	Z+6, r18	; 0x06
 c84:	14 c0       	rjmp	.+40     	; 0xcae <fputc+0x6e>
 c86:	8b 01       	movw	r16, r22
 c88:	ec 01       	movw	r28, r24
 c8a:	fb 01       	movw	r30, r22
 c8c:	00 84       	ldd	r0, Z+8	; 0x08
 c8e:	f1 85       	ldd	r31, Z+9	; 0x09
 c90:	e0 2d       	mov	r30, r0
 c92:	09 95       	icall
 c94:	89 2b       	or	r24, r25
 c96:	e1 f6       	brne	.-72     	; 0xc50 <fputc+0x10>
 c98:	d8 01       	movw	r26, r16
 c9a:	16 96       	adiw	r26, 0x06	; 6
 c9c:	8d 91       	ld	r24, X+
 c9e:	9c 91       	ld	r25, X
 ca0:	17 97       	sbiw	r26, 0x07	; 7
 ca2:	01 96       	adiw	r24, 0x01	; 1
 ca4:	17 96       	adiw	r26, 0x07	; 7
 ca6:	9c 93       	st	X, r25
 ca8:	8e 93       	st	-X, r24
 caa:	16 97       	sbiw	r26, 0x06	; 6
 cac:	ce 01       	movw	r24, r28
 cae:	df 91       	pop	r29
 cb0:	cf 91       	pop	r28
 cb2:	1f 91       	pop	r17
 cb4:	0f 91       	pop	r16
 cb6:	08 95       	ret

00000cb8 <__ultoa_invert>:
 cb8:	fa 01       	movw	r30, r20
 cba:	aa 27       	eor	r26, r26
 cbc:	28 30       	cpi	r18, 0x08	; 8
 cbe:	51 f1       	breq	.+84     	; 0xd14 <__ultoa_invert+0x5c>
 cc0:	20 31       	cpi	r18, 0x10	; 16
 cc2:	81 f1       	breq	.+96     	; 0xd24 <__ultoa_invert+0x6c>
 cc4:	e8 94       	clt
 cc6:	6f 93       	push	r22
 cc8:	6e 7f       	andi	r22, 0xFE	; 254
 cca:	6e 5f       	subi	r22, 0xFE	; 254
 ccc:	7f 4f       	sbci	r23, 0xFF	; 255
 cce:	8f 4f       	sbci	r24, 0xFF	; 255
 cd0:	9f 4f       	sbci	r25, 0xFF	; 255
 cd2:	af 4f       	sbci	r26, 0xFF	; 255
 cd4:	b1 e0       	ldi	r27, 0x01	; 1
 cd6:	3e d0       	rcall	.+124    	; 0xd54 <__ultoa_invert+0x9c>
 cd8:	b4 e0       	ldi	r27, 0x04	; 4
 cda:	3c d0       	rcall	.+120    	; 0xd54 <__ultoa_invert+0x9c>
 cdc:	67 0f       	add	r22, r23
 cde:	78 1f       	adc	r23, r24
 ce0:	89 1f       	adc	r24, r25
 ce2:	9a 1f       	adc	r25, r26
 ce4:	a1 1d       	adc	r26, r1
 ce6:	68 0f       	add	r22, r24
 ce8:	79 1f       	adc	r23, r25
 cea:	8a 1f       	adc	r24, r26
 cec:	91 1d       	adc	r25, r1
 cee:	a1 1d       	adc	r26, r1
 cf0:	6a 0f       	add	r22, r26
 cf2:	71 1d       	adc	r23, r1
 cf4:	81 1d       	adc	r24, r1
 cf6:	91 1d       	adc	r25, r1
 cf8:	a1 1d       	adc	r26, r1
 cfa:	20 d0       	rcall	.+64     	; 0xd3c <__ultoa_invert+0x84>
 cfc:	09 f4       	brne	.+2      	; 0xd00 <__ultoa_invert+0x48>
 cfe:	68 94       	set
 d00:	3f 91       	pop	r19
 d02:	2a e0       	ldi	r18, 0x0A	; 10
 d04:	26 9f       	mul	r18, r22
 d06:	11 24       	eor	r1, r1
 d08:	30 19       	sub	r19, r0
 d0a:	30 5d       	subi	r19, 0xD0	; 208
 d0c:	31 93       	st	Z+, r19
 d0e:	de f6       	brtc	.-74     	; 0xcc6 <__ultoa_invert+0xe>
 d10:	cf 01       	movw	r24, r30
 d12:	08 95       	ret
 d14:	46 2f       	mov	r20, r22
 d16:	47 70       	andi	r20, 0x07	; 7
 d18:	40 5d       	subi	r20, 0xD0	; 208
 d1a:	41 93       	st	Z+, r20
 d1c:	b3 e0       	ldi	r27, 0x03	; 3
 d1e:	0f d0       	rcall	.+30     	; 0xd3e <__ultoa_invert+0x86>
 d20:	c9 f7       	brne	.-14     	; 0xd14 <__ultoa_invert+0x5c>
 d22:	f6 cf       	rjmp	.-20     	; 0xd10 <__ultoa_invert+0x58>
 d24:	46 2f       	mov	r20, r22
 d26:	4f 70       	andi	r20, 0x0F	; 15
 d28:	40 5d       	subi	r20, 0xD0	; 208
 d2a:	4a 33       	cpi	r20, 0x3A	; 58
 d2c:	18 f0       	brcs	.+6      	; 0xd34 <__ultoa_invert+0x7c>
 d2e:	49 5d       	subi	r20, 0xD9	; 217
 d30:	31 fd       	sbrc	r19, 1
 d32:	40 52       	subi	r20, 0x20	; 32
 d34:	41 93       	st	Z+, r20
 d36:	02 d0       	rcall	.+4      	; 0xd3c <__ultoa_invert+0x84>
 d38:	a9 f7       	brne	.-22     	; 0xd24 <__ultoa_invert+0x6c>
 d3a:	ea cf       	rjmp	.-44     	; 0xd10 <__ultoa_invert+0x58>
 d3c:	b4 e0       	ldi	r27, 0x04	; 4
 d3e:	a6 95       	lsr	r26
 d40:	97 95       	ror	r25
 d42:	87 95       	ror	r24
 d44:	77 95       	ror	r23
 d46:	67 95       	ror	r22
 d48:	ba 95       	dec	r27
 d4a:	c9 f7       	brne	.-14     	; 0xd3e <__ultoa_invert+0x86>
 d4c:	00 97       	sbiw	r24, 0x00	; 0
 d4e:	61 05       	cpc	r22, r1
 d50:	71 05       	cpc	r23, r1
 d52:	08 95       	ret
 d54:	9b 01       	movw	r18, r22
 d56:	ac 01       	movw	r20, r24
 d58:	0a 2e       	mov	r0, r26
 d5a:	06 94       	lsr	r0
 d5c:	57 95       	ror	r21
 d5e:	47 95       	ror	r20
 d60:	37 95       	ror	r19
 d62:	27 95       	ror	r18
 d64:	ba 95       	dec	r27
 d66:	c9 f7       	brne	.-14     	; 0xd5a <__ultoa_invert+0xa2>
 d68:	62 0f       	add	r22, r18
 d6a:	73 1f       	adc	r23, r19
 d6c:	84 1f       	adc	r24, r20
 d6e:	95 1f       	adc	r25, r21
 d70:	a0 1d       	adc	r26, r0
 d72:	08 95       	ret

00000d74 <__prologue_saves__>:
 d74:	2f 92       	push	r2
 d76:	3f 92       	push	r3
 d78:	4f 92       	push	r4
 d7a:	5f 92       	push	r5
 d7c:	6f 92       	push	r6
 d7e:	7f 92       	push	r7
 d80:	8f 92       	push	r8
 d82:	9f 92       	push	r9
 d84:	af 92       	push	r10
 d86:	bf 92       	push	r11
 d88:	cf 92       	push	r12
 d8a:	df 92       	push	r13
 d8c:	ef 92       	push	r14
 d8e:	ff 92       	push	r15
 d90:	0f 93       	push	r16
 d92:	1f 93       	push	r17
 d94:	cf 93       	push	r28
 d96:	df 93       	push	r29
 d98:	cd b7       	in	r28, 0x3d	; 61
 d9a:	de b7       	in	r29, 0x3e	; 62
 d9c:	ca 1b       	sub	r28, r26
 d9e:	db 0b       	sbc	r29, r27
 da0:	0f b6       	in	r0, 0x3f	; 63
 da2:	f8 94       	cli
 da4:	de bf       	out	0x3e, r29	; 62
 da6:	0f be       	out	0x3f, r0	; 63
 da8:	cd bf       	out	0x3d, r28	; 61
 daa:	09 94       	ijmp

00000dac <__epilogue_restores__>:
 dac:	2a 88       	ldd	r2, Y+18	; 0x12
 dae:	39 88       	ldd	r3, Y+17	; 0x11
 db0:	48 88       	ldd	r4, Y+16	; 0x10
 db2:	5f 84       	ldd	r5, Y+15	; 0x0f
 db4:	6e 84       	ldd	r6, Y+14	; 0x0e
 db6:	7d 84       	ldd	r7, Y+13	; 0x0d
 db8:	8c 84       	ldd	r8, Y+12	; 0x0c
 dba:	9b 84       	ldd	r9, Y+11	; 0x0b
 dbc:	aa 84       	ldd	r10, Y+10	; 0x0a
 dbe:	b9 84       	ldd	r11, Y+9	; 0x09
 dc0:	c8 84       	ldd	r12, Y+8	; 0x08
 dc2:	df 80       	ldd	r13, Y+7	; 0x07
 dc4:	ee 80       	ldd	r14, Y+6	; 0x06
 dc6:	fd 80       	ldd	r15, Y+5	; 0x05
 dc8:	0c 81       	ldd	r16, Y+4	; 0x04
 dca:	1b 81       	ldd	r17, Y+3	; 0x03
 dcc:	aa 81       	ldd	r26, Y+2	; 0x02
 dce:	b9 81       	ldd	r27, Y+1	; 0x01
 dd0:	ce 0f       	add	r28, r30
 dd2:	d1 1d       	adc	r29, r1
 dd4:	0f b6       	in	r0, 0x3f	; 63
 dd6:	f8 94       	cli
 dd8:	de bf       	out	0x3e, r29	; 62
 dda:	0f be       	out	0x3f, r0	; 63
 ddc:	cd bf       	out	0x3d, r28	; 61
 dde:	ed 01       	movw	r28, r26
 de0:	08 95       	ret

00000de2 <_exit>:
 de2:	f8 94       	cli

00000de4 <__stop_program>:
 de4:	ff cf       	rjmp	.-2      	; 0xde4 <__stop_program>
