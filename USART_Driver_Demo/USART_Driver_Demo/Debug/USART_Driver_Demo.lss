
USART_Driver_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000023a  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080011c  0080011c  000002ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3e  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076f  00000000  00000000  00000e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c3  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  0000193c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000475  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000331  00000000  00000000  00001eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_18>
  4c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 36       	cpi	r26, 0x61	; 97
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

//Baudrate 9600
#define UART_BAUD_RATE 9600
int main(void)
{
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 c0 00 	call	0x180	; 0x180 <uart_init>
	sei();
  ae:	78 94       	sei
         * uart_getc() returns in the lower byte the received character and 
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
        c = uart_getc();
  b0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <uart_getc>
  b4:	ec 01       	movw	r28, r24
        if ( c & UART_NO_DATA )
  b6:	90 fd       	sbrc	r25, 0
  b8:	fb cf       	rjmp	.-10     	; 0xb0 <main+0xa>
        {//nothing to do
        }
        else
        {
			if(c == 'A')
  ba:	81 34       	cpi	r24, 0x41	; 65
  bc:	91 05       	cpc	r25, r1
  be:	21 f4       	brne	.+8      	; 0xc8 <main+0x22>
				uart_puts("du hast mir ein A gesendet!");
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	0e 94 0e 01 	call	0x21c	; 0x21c <uart_puts>
            uart_putc( (unsigned char)c );
  c8:	8c 2f       	mov	r24, r28
  ca:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <uart_putc>
  ce:	f0 cf       	rjmp	.-32     	; 0xb0 <main+0xa>

000000d0 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
  e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
  e8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
  ec:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  ee:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UART_RxHead>
  f2:	ef 5f       	subi	r30, 0xFF	; 255
  f4:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
  f6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <UART_RxTail>
  fa:	e9 17       	cp	r30, r25
  fc:	39 f0       	breq	.+14     	; 0x10c <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  fe:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	ef 5d       	subi	r30, 0xDF	; 223
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	20 83       	st	Z, r18
 10a:	01 c0       	rjmp	.+2      	; 0x10e <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 10c:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 10e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <__data_end>
 112:	89 2b       	or	r24, r25
 114:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 13e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <UART_TxHead>
 142:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <UART_TxTail>
 146:	98 17       	cp	r25, r24
 148:	69 f0       	breq	.+26     	; 0x164 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 14a:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <UART_TxTail>
 14e:	ef 5f       	subi	r30, 0xFF	; 255
 150:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 152:	e0 93 1f 01 	sts	0x011F, r30	; 0x80011f <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ef 5b       	subi	r30, 0xBF	; 191
 15a:	fe 4f       	sbci	r31, 0xFE	; 254
 15c:	80 81       	ld	r24, Z
 15e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 162:	05 c0       	rjmp	.+10     	; 0x16e <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 164:	e1 ec       	ldi	r30, 0xC1	; 193
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	8f 7d       	andi	r24, 0xDF	; 223
 16c:	80 83       	st	Z, r24
    }
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 180:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <UART_TxHead>
    UART_TxTail = 0;
 184:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <UART_TxTail>
    UART_RxHead = 0;
 188:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <UART_RxHead>
    UART_RxTail = 0;
 18c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <UART_RxTail>
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 190:	28 2f       	mov	r18, r24
 192:	39 2f       	mov	r19, r25
 194:	33 23       	and	r19, r19
 196:	1c f4       	brge	.+6      	; 0x19e <uart_init+0x1e>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 198:	22 e0       	ldi	r18, 0x02	; 2
 19a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 19e:	90 78       	andi	r25, 0x80	; 128
 1a0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 1a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 1a8:	88 e9       	ldi	r24, 0x98	; 152
 1aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1b4:	08 95       	ret

000001b6 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 1b6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <UART_RxHead>
 1ba:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <UART_RxTail>
 1be:	98 17       	cp	r25, r24
 1c0:	a9 f0       	breq	.+42     	; 0x1ec <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 1c2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <UART_RxTail>
 1c6:	9f 5f       	subi	r25, 0xFF	; 255
 1c8:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 1ca:	e9 2f       	mov	r30, r25
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ef 5d       	subi	r30, 0xDF	; 223
 1d0:	fe 4f       	sbci	r31, 0xFE	; 254
 1d2:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 1d4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 1d8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <UART_RxTail>
    
    UART_LastRxError = 0;
 1dc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
    return (lastRxError << 8) + data;
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	98 2f       	mov	r25, r24
 1e4:	88 27       	eor	r24, r24
 1e6:	82 0f       	add	r24, r18
 1e8:	91 1d       	adc	r25, r1
 1ea:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 1f0:	08 95       	ret

000001f2 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1f2:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <UART_TxHead>
 1f6:	2f 5f       	subi	r18, 0xFF	; 255
 1f8:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 1fa:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <UART_TxTail>
 1fe:	29 17       	cp	r18, r25
 200:	e1 f3       	breq	.-8      	; 0x1fa <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 202:	e2 2f       	mov	r30, r18
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ef 5b       	subi	r30, 0xBF	; 191
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 20c:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 210:	e1 ec       	ldi	r30, 0xC1	; 193
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 62       	ori	r24, 0x20	; 32
 218:	80 83       	st	Z, r24
 21a:	08 95       	ret

0000021c <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
    while (*s) 
 222:	03 c0       	rjmp	.+6      	; 0x22a <uart_puts+0xe>
      uart_putc(*s++);
 224:	21 96       	adiw	r28, 0x01	; 1
 226:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 22a:	88 81       	ld	r24, Y
 22c:	81 11       	cpse	r24, r1
 22e:	fa cf       	rjmp	.-12     	; 0x224 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
