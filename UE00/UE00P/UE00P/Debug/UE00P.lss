
UE00P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000724  000007b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000724  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800124  00800124  000007dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f4  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4d  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082d  00000000  00000000  0000266d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00002e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052f  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a9b  00000000  00000000  0000366f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000410a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_1>
   8:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
  9e:	0c 94 90 03 	jmp	0x720	; 0x720 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	8b b9       	out	0x0b, r24	; 11
  ac:	00 00       	nop
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	8f 7b       	andi	r24, 0xBF	; 191
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	08 95       	ret

000000b6 <lcd_write>:
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	d8 2f       	mov	r29, r24
  bc:	66 23       	and	r22, r22
  be:	21 f0       	breq	.+8      	; 0xc8 <lcd_write+0x12>
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	03 c0       	rjmp	.+6      	; 0xce <lcd_write+0x18>
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	8f 7e       	andi	r24, 0xEF	; 239
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	8f 60       	ori	r24, 0x0F	; 15
  d8:	8a b9       	out	0x0a, r24	; 10
  da:	cb b1       	in	r28, 0x0b	; 11
  dc:	c0 7f       	andi	r28, 0xF0	; 240
  de:	8d 2f       	mov	r24, r29
  e0:	82 95       	swap	r24
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	8c 2b       	or	r24, r28
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  ec:	df 70       	andi	r29, 0x0F	; 15
  ee:	dc 2b       	or	r29, r28
  f0:	db b9       	out	0x0b, r29	; 11
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  f6:	cf 60       	ori	r28, 0x0F	; 15
  f8:	cb b9       	out	0x0b, r28	; 11
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <lcd_read>:
 100:	88 23       	and	r24, r24
 102:	21 f0       	breq	.+8      	; 0x10c <lcd_read+0xc>
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	80 61       	ori	r24, 0x10	; 16
 108:	8b b9       	out	0x0b, r24	; 11
 10a:	03 c0       	rjmp	.+6      	; 0x112 <lcd_read+0x12>
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	8f 7e       	andi	r24, 0xEF	; 239
 110:	8b b9       	out	0x0b, r24	; 11
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	80 62       	ori	r24, 0x20	; 32
 116:	8b b9       	out	0x0b, r24	; 11
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	8a b9       	out	0x0a, r24	; 10
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	80 64       	ori	r24, 0x40	; 64
 122:	8b b9       	out	0x0b, r24	; 11
 124:	00 00       	nop
 126:	99 b1       	in	r25, 0x09	; 9
 128:	92 95       	swap	r25
 12a:	90 7f       	andi	r25, 0xF0	; 240
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	8f 7b       	andi	r24, 0xBF	; 191
 130:	8b b9       	out	0x0b, r24	; 11
 132:	00 00       	nop
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	80 64       	ori	r24, 0x40	; 64
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	00 00       	nop
 13c:	89 b1       	in	r24, 0x09	; 9
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	2b b1       	in	r18, 0x0b	; 11
 142:	2f 7b       	andi	r18, 0xBF	; 191
 144:	2b b9       	out	0x0b, r18	; 11
 146:	89 2b       	or	r24, r25
 148:	08 95       	ret

0000014a <lcd_waitbusy>:
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 80 00 	call	0x100	; 0x100 <lcd_read>
 150:	88 23       	and	r24, r24
 152:	dc f3       	brlt	.-10     	; 0x14a <lcd_waitbusy>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_waitbusy+0xc>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_waitbusy+0xe>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 80 00 	call	0x100	; 0x100 <lcd_read>
 15e:	08 95       	ret

00000160 <lcd_command>:
 160:	cf 93       	push	r28
 162:	c8 2f       	mov	r28, r24
 164:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_waitbusy>
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	8c 2f       	mov	r24, r28
 16c:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write>
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <lcd_gotoxy>:
 174:	61 11       	cpse	r22, r1
 176:	04 c0       	rjmp	.+8      	; 0x180 <lcd_gotoxy+0xc>
 178:	80 58       	subi	r24, 0x80	; 128
 17a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
 17e:	08 95       	ret
 180:	80 54       	subi	r24, 0x40	; 64
 182:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
 186:	08 95       	ret

00000188 <lcd_clrscr>:
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
 18e:	08 95       	ret

00000190 <lcd_putc>:
 190:	cf 93       	push	r28
 192:	c8 2f       	mov	r28, r24
 194:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_waitbusy>
 198:	ca 30       	cpi	r28, 0x0A	; 10
 19a:	49 f4       	brne	.+18     	; 0x1ae <lcd_putc+0x1e>
 19c:	80 34       	cpi	r24, 0x40	; 64
 19e:	10 f4       	brcc	.+4      	; 0x1a4 <lcd_putc+0x14>
 1a0:	80 e4       	ldi	r24, 0x40	; 64
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <lcd_putc+0x16>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	80 58       	subi	r24, 0x80	; 128
 1a8:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <lcd_putc+0x26>
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write>
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <lcd_puts>:
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	fc 01       	movw	r30, r24
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <lcd_puts+0xe>
 1c2:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_putc>
 1c6:	fe 01       	movw	r30, r28
 1c8:	ef 01       	movw	r28, r30
 1ca:	21 96       	adiw	r28, 0x01	; 1
 1cc:	80 81       	ld	r24, Z
 1ce:	81 11       	cpse	r24, r1
 1d0:	f8 cf       	rjmp	.-16     	; 0x1c2 <lcd_puts+0x8>
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1d8:	cf 93       	push	r28
 1da:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	8f 67       	ori	r24, 0x7F	; 127
 1e0:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0xe>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_init+0x14>
 1ec:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	81 60       	ori	r24, 0x01	; 1
 1f8:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 1fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1fe:	81 ee       	ldi	r24, 0xE1	; 225
 200:	94 e0       	ldi	r25, 0x04	; 4
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x2a>
 206:	00 c0       	rjmp	.+0      	; 0x208 <lcd_init+0x30>
 208:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 20a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 20e:	95 e1       	ldi	r25, 0x15	; 21
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x38>
 214:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 216:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 21a:	85 e1       	ldi	r24, 0x15	; 21
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_init+0x44>
 220:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	8e 7f       	andi	r24, 0xFE	; 254
 226:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 228:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 22c:	95 e1       	ldi	r25, 0x15	; 21
 22e:	9a 95       	dec	r25
 230:	f1 f7       	brne	.-4      	; 0x22e <lcd_init+0x56>
 232:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 234:	88 e2       	ldi	r24, 0x28	; 40
 236:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 240:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 24a:	8c 2f       	mov	r24, r28
 24c:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>

}/* lcd_init */
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <__vector_21>:

ISR(INT1_vect){
	Close();
}

ISR(ADC_vect){
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	temp = ADCW;
 276:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 27a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__floatunsisf>
 286:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <__data_end>
 28a:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <__data_end+0x1>
 28e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end+0x2>
 292:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x3>
	ADCSRA |= (1<<ADSC);
 296:	ea e7       	ldi	r30, 0x7A	; 122
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	80 83       	st	Z, r24
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <ADC_Init>:

void ADC_Init(){
	ADMUX |= (1<<REFS0);
 2c2:	ec e7       	ldi	r30, 0x7C	; 124
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	80 64       	ori	r24, 0x40	; 64
 2ca:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX0);
 2cc:	80 81       	ld	r24, Z
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 2d2:	ea e7       	ldi	r30, 0x7A	; 122
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	87 68       	ori	r24, 0x87	; 135
 2da:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADEN);  
 2dc:	80 81       	ld	r24, Z
 2de:	80 68       	ori	r24, 0x80	; 128
 2e0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); 
 2e2:	80 81       	ld	r24, Z
 2e4:	88 60       	ori	r24, 0x08	; 8
 2e6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 2e8:	80 81       	ld	r24, Z
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	80 83       	st	Z, r24
 2ee:	08 95       	ret

000002f0 <GetValue>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2f0:	f8 94       	cli
}

float GetValue(){
	float result;
	ATOMIC_BLOCK(ATOMIC_FORCEON){
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	09 c0       	rjmp	.+18     	; 0x308 <GetValue+0x18>
		result = temp;
 2f6:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <__data_end>
 2fa:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <__data_end+0x1>
 2fe:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end+0x2>
 302:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x3>
	ADCSRA |= (1<<ADSC);
}

float GetValue(){
	float result;
	ATOMIC_BLOCK(ATOMIC_FORCEON){
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	21 11       	cpse	r18, r1
 30a:	f5 cf       	rjmp	.-22     	; 0x2f6 <GetValue+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 30c:	78 94       	sei
		result = temp;
	}
	return result;
}
 30e:	08 95       	ret

00000310 <Close>:

void Close(){
	open = 0;
 310:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 314:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	lcd_gotoxy(0,0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_gotoxy>
	lcd_puts("||||||||||||||||");
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_puts>
	lcd_gotoxy(0, 1);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_gotoxy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	83 ed       	ldi	r24, 0xD3	; 211
 334:	90 e3       	ldi	r25, 0x30	; 48
 336:	21 50       	subi	r18, 0x01	; 1
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	90 40       	sbci	r25, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <Close+0x26>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <Close+0x30>
 340:	00 00       	nop
	_delay_ms(1000);
	lcd_puts("||||||||||||||||");
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_puts>
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	87 ee       	ldi	r24, 0xE7	; 231
 34e:	93 e0       	ldi	r25, 0x03	; 3
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <Close+0x40>
 358:	00 c0       	rjmp	.+0      	; 0x35a <Close+0x4a>
 35a:	00 00       	nop
	
	_delay_ms(80);
	PORTB &= ~(1 << PINC0);
 35c:	85 b1       	in	r24, 0x05	; 5
 35e:	8e 7f       	andi	r24, 0xFE	; 254
 360:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << PINC1);
 362:	85 b1       	in	r24, 0x05	; 5
 364:	82 60       	ori	r24, 0x02	; 2
 366:	85 b9       	out	0x05, r24	; 5
 368:	08 95       	ret

0000036a <main>:
char buffer[16];
static volatile float temp = 0;

int main(void)
{
	EIMSK |= (1<<INT0) | (1<<INT1);
 36a:	8d b3       	in	r24, 0x1d	; 29
 36c:	83 60       	ori	r24, 0x03	; 3
 36e:	8d bb       	out	0x1d, r24	; 29
	ADC_Init();
 370:	0e 94 61 01 	call	0x2c2	; 0x2c2 <ADC_Init>
	PORTD |= (1<<PORTD2) | (1<<PORTD3);
 374:	8b b1       	in	r24, 0x0b	; 11
 376:	8c 60       	ori	r24, 0x0C	; 12
 378:	8b b9       	out	0x0b, r24	; 11
	DDRB |= (1<< DDB0) | (1<< DDB1);
 37a:	84 b1       	in	r24, 0x04	; 4
 37c:	83 60       	ori	r24, 0x03	; 3
 37e:	84 b9       	out	0x04, r24	; 4
	sei();
 380:	78 94       	sei
	PORTB |= (1 << PINB0);
 382:	85 b1       	in	r24, 0x05	; 5
 384:	81 60       	ori	r24, 0x01	; 1
 386:	85 b9       	out	0x05, r24	; 5
	
	lcd_init(LCD_DISP_ON);
 388:	8c e0       	ldi	r24, 0x0C	; 12
 38a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_init>
	lcd_puts("|--------------|");
 38e:	83 e1       	ldi	r24, 0x13	; 19
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_puts>
	lcd_gotoxy(0, 1);
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_gotoxy>
	lcd_puts("|--------------|");
 39e:	83 e1       	ldi	r24, 0x13	; 19
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_puts>
	
	while (1)
	{
		if(open == 1){
 3a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	d1 f7       	brne	.-12     	; 0x3a6 <main+0x3c>
			float tmp = GetValue();
 3b2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <GetValue>
			float volt = (tmp*(0.0048));
 3b6:	22 e5       	ldi	r18, 0x52	; 82
 3b8:	39 e4       	ldi	r19, 0x49	; 73
 3ba:	4d e9       	ldi	r20, 0x9D	; 157
 3bc:	5b e3       	ldi	r21, 0x3B	; 59
 3be:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__mulsf3>
			if(volt<1.5){
 3c2:	20 e0       	ldi	r18, 0x00	; 0
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	40 ec       	ldi	r20, 0xC0	; 192
 3c8:	5f e3       	ldi	r21, 0x3F	; 63
 3ca:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__cmpsf2>
 3ce:	88 23       	and	r24, r24
 3d0:	54 f7       	brge	.-44     	; 0x3a6 <main+0x3c>
				Close();
 3d2:	0e 94 88 01 	call	0x310	; 0x310 <Close>
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	87 ea       	ldi	r24, 0xA7	; 167
 3da:	91 e6       	ldi	r25, 0x61	; 97
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <main+0x72>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x7c>
 3e6:	00 00       	nop
 3e8:	de cf       	rjmp	.-68     	; 0x3a6 <main+0x3c>

000003ea <__vector_2>:

ISR(INT0_vect){
	Open();
}

ISR(INT1_vect){
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	3f 93       	push	r19
 3f8:	4f 93       	push	r20
 3fa:	5f 93       	push	r21
 3fc:	6f 93       	push	r22
 3fe:	7f 93       	push	r23
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	Close();
 40c:	0e 94 88 01 	call	0x310	; 0x310 <Close>
}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <Open>:
	PORTB &= ~(1 << PINC0);
	PORTB |= (1 << PINC1);
}

void Open(){
	open = 1;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 43a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	lcd_gotoxy(0,0);
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_gotoxy>
	lcd_puts("|--------------|");
 446:	83 e1       	ldi	r24, 0x13	; 19
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_puts>
	lcd_gotoxy(0, 1);
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_gotoxy>
 456:	2f ef       	ldi	r18, 0xFF	; 255
 458:	83 ed       	ldi	r24, 0xD3	; 211
 45a:	90 e3       	ldi	r25, 0x30	; 48
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	80 40       	sbci	r24, 0x00	; 0
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <Open+0x2a>
 464:	00 c0       	rjmp	.+0      	; 0x466 <Open+0x34>
 466:	00 00       	nop
	_delay_ms(1000);
	lcd_puts("|--------------|");
 468:	83 e1       	ldi	r24, 0x13	; 19
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_puts>
 470:	2f ef       	ldi	r18, 0xFF	; 255
 472:	87 ee       	ldi	r24, 0xE7	; 231
 474:	93 e0       	ldi	r25, 0x03	; 3
 476:	21 50       	subi	r18, 0x01	; 1
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <Open+0x44>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <Open+0x4e>
 480:	00 00       	nop
	
	_delay_ms(80);
	PORTB &= ~(1 << PINC1);
 482:	85 b1       	in	r24, 0x05	; 5
 484:	8d 7f       	andi	r24, 0xFD	; 253
 486:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << PINC0);
 488:	85 b1       	in	r24, 0x05	; 5
 48a:	81 60       	ori	r24, 0x01	; 1
 48c:	85 b9       	out	0x05, r24	; 5
 48e:	08 95       	ret

00000490 <__vector_1>:
			}
		}
	}
}

ISR(INT0_vect){
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
 49a:	2f 93       	push	r18
 49c:	3f 93       	push	r19
 49e:	4f 93       	push	r20
 4a0:	5f 93       	push	r21
 4a2:	6f 93       	push	r22
 4a4:	7f 93       	push	r23
 4a6:	8f 93       	push	r24
 4a8:	9f 93       	push	r25
 4aa:	af 93       	push	r26
 4ac:	bf 93       	push	r27
 4ae:	ef 93       	push	r30
 4b0:	ff 93       	push	r31
	Open();
 4b2:	0e 94 19 02 	call	0x432	; 0x432 <Open>
}
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <__cmpsf2>:
 4d8:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_cmp>
 4dc:	08 f4       	brcc	.+2      	; 0x4e0 <__cmpsf2+0x8>
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	08 95       	ret

000004e2 <__floatunsisf>:
 4e2:	e8 94       	clt
 4e4:	09 c0       	rjmp	.+18     	; 0x4f8 <__floatsisf+0x12>

000004e6 <__floatsisf>:
 4e6:	97 fb       	bst	r25, 7
 4e8:	3e f4       	brtc	.+14     	; 0x4f8 <__floatsisf+0x12>
 4ea:	90 95       	com	r25
 4ec:	80 95       	com	r24
 4ee:	70 95       	com	r23
 4f0:	61 95       	neg	r22
 4f2:	7f 4f       	sbci	r23, 0xFF	; 255
 4f4:	8f 4f       	sbci	r24, 0xFF	; 255
 4f6:	9f 4f       	sbci	r25, 0xFF	; 255
 4f8:	99 23       	and	r25, r25
 4fa:	a9 f0       	breq	.+42     	; 0x526 <__floatsisf+0x40>
 4fc:	f9 2f       	mov	r31, r25
 4fe:	96 e9       	ldi	r25, 0x96	; 150
 500:	bb 27       	eor	r27, r27
 502:	93 95       	inc	r25
 504:	f6 95       	lsr	r31
 506:	87 95       	ror	r24
 508:	77 95       	ror	r23
 50a:	67 95       	ror	r22
 50c:	b7 95       	ror	r27
 50e:	f1 11       	cpse	r31, r1
 510:	f8 cf       	rjmp	.-16     	; 0x502 <__floatsisf+0x1c>
 512:	fa f4       	brpl	.+62     	; 0x552 <__floatsisf+0x6c>
 514:	bb 0f       	add	r27, r27
 516:	11 f4       	brne	.+4      	; 0x51c <__floatsisf+0x36>
 518:	60 ff       	sbrs	r22, 0
 51a:	1b c0       	rjmp	.+54     	; 0x552 <__floatsisf+0x6c>
 51c:	6f 5f       	subi	r22, 0xFF	; 255
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	8f 4f       	sbci	r24, 0xFF	; 255
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	16 c0       	rjmp	.+44     	; 0x552 <__floatsisf+0x6c>
 526:	88 23       	and	r24, r24
 528:	11 f0       	breq	.+4      	; 0x52e <__floatsisf+0x48>
 52a:	96 e9       	ldi	r25, 0x96	; 150
 52c:	11 c0       	rjmp	.+34     	; 0x550 <__floatsisf+0x6a>
 52e:	77 23       	and	r23, r23
 530:	21 f0       	breq	.+8      	; 0x53a <__floatsisf+0x54>
 532:	9e e8       	ldi	r25, 0x8E	; 142
 534:	87 2f       	mov	r24, r23
 536:	76 2f       	mov	r23, r22
 538:	05 c0       	rjmp	.+10     	; 0x544 <__floatsisf+0x5e>
 53a:	66 23       	and	r22, r22
 53c:	71 f0       	breq	.+28     	; 0x55a <__floatsisf+0x74>
 53e:	96 e8       	ldi	r25, 0x86	; 134
 540:	86 2f       	mov	r24, r22
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	2a f0       	brmi	.+10     	; 0x552 <__floatsisf+0x6c>
 548:	9a 95       	dec	r25
 54a:	66 0f       	add	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	88 1f       	adc	r24, r24
 550:	da f7       	brpl	.-10     	; 0x548 <__floatsisf+0x62>
 552:	88 0f       	add	r24, r24
 554:	96 95       	lsr	r25
 556:	87 95       	ror	r24
 558:	97 f9       	bld	r25, 7
 55a:	08 95       	ret

0000055c <__fp_cmp>:
 55c:	99 0f       	add	r25, r25
 55e:	00 08       	sbc	r0, r0
 560:	55 0f       	add	r21, r21
 562:	aa 0b       	sbc	r26, r26
 564:	e0 e8       	ldi	r30, 0x80	; 128
 566:	fe ef       	ldi	r31, 0xFE	; 254
 568:	16 16       	cp	r1, r22
 56a:	17 06       	cpc	r1, r23
 56c:	e8 07       	cpc	r30, r24
 56e:	f9 07       	cpc	r31, r25
 570:	c0 f0       	brcs	.+48     	; 0x5a2 <__fp_cmp+0x46>
 572:	12 16       	cp	r1, r18
 574:	13 06       	cpc	r1, r19
 576:	e4 07       	cpc	r30, r20
 578:	f5 07       	cpc	r31, r21
 57a:	98 f0       	brcs	.+38     	; 0x5a2 <__fp_cmp+0x46>
 57c:	62 1b       	sub	r22, r18
 57e:	73 0b       	sbc	r23, r19
 580:	84 0b       	sbc	r24, r20
 582:	95 0b       	sbc	r25, r21
 584:	39 f4       	brne	.+14     	; 0x594 <__fp_cmp+0x38>
 586:	0a 26       	eor	r0, r26
 588:	61 f0       	breq	.+24     	; 0x5a2 <__fp_cmp+0x46>
 58a:	23 2b       	or	r18, r19
 58c:	24 2b       	or	r18, r20
 58e:	25 2b       	or	r18, r21
 590:	21 f4       	brne	.+8      	; 0x59a <__fp_cmp+0x3e>
 592:	08 95       	ret
 594:	0a 26       	eor	r0, r26
 596:	09 f4       	brne	.+2      	; 0x59a <__fp_cmp+0x3e>
 598:	a1 40       	sbci	r26, 0x01	; 1
 59a:	a6 95       	lsr	r26
 59c:	8f ef       	ldi	r24, 0xFF	; 255
 59e:	81 1d       	adc	r24, r1
 5a0:	81 1d       	adc	r24, r1
 5a2:	08 95       	ret

000005a4 <__mulsf3>:
 5a4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__mulsf3x>
 5a8:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_round>
 5ac:	0e 94 48 03 	call	0x690	; 0x690 <__fp_pscA>
 5b0:	38 f0       	brcs	.+14     	; 0x5c0 <__mulsf3+0x1c>
 5b2:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_pscB>
 5b6:	20 f0       	brcs	.+8      	; 0x5c0 <__mulsf3+0x1c>
 5b8:	95 23       	and	r25, r21
 5ba:	11 f0       	breq	.+4      	; 0x5c0 <__mulsf3+0x1c>
 5bc:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_inf>
 5c0:	0c 94 45 03 	jmp	0x68a	; 0x68a <__fp_nan>
 5c4:	11 24       	eor	r1, r1
 5c6:	0c 94 8a 03 	jmp	0x714	; 0x714 <__fp_szero>

000005ca <__mulsf3x>:
 5ca:	0e 94 67 03 	call	0x6ce	; 0x6ce <__fp_split3>
 5ce:	70 f3       	brcs	.-36     	; 0x5ac <__mulsf3+0x8>

000005d0 <__mulsf3_pse>:
 5d0:	95 9f       	mul	r25, r21
 5d2:	c1 f3       	breq	.-16     	; 0x5c4 <__mulsf3+0x20>
 5d4:	95 0f       	add	r25, r21
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	55 1f       	adc	r21, r21
 5da:	62 9f       	mul	r22, r18
 5dc:	f0 01       	movw	r30, r0
 5de:	72 9f       	mul	r23, r18
 5e0:	bb 27       	eor	r27, r27
 5e2:	f0 0d       	add	r31, r0
 5e4:	b1 1d       	adc	r27, r1
 5e6:	63 9f       	mul	r22, r19
 5e8:	aa 27       	eor	r26, r26
 5ea:	f0 0d       	add	r31, r0
 5ec:	b1 1d       	adc	r27, r1
 5ee:	aa 1f       	adc	r26, r26
 5f0:	64 9f       	mul	r22, r20
 5f2:	66 27       	eor	r22, r22
 5f4:	b0 0d       	add	r27, r0
 5f6:	a1 1d       	adc	r26, r1
 5f8:	66 1f       	adc	r22, r22
 5fa:	82 9f       	mul	r24, r18
 5fc:	22 27       	eor	r18, r18
 5fe:	b0 0d       	add	r27, r0
 600:	a1 1d       	adc	r26, r1
 602:	62 1f       	adc	r22, r18
 604:	73 9f       	mul	r23, r19
 606:	b0 0d       	add	r27, r0
 608:	a1 1d       	adc	r26, r1
 60a:	62 1f       	adc	r22, r18
 60c:	83 9f       	mul	r24, r19
 60e:	a0 0d       	add	r26, r0
 610:	61 1d       	adc	r22, r1
 612:	22 1f       	adc	r18, r18
 614:	74 9f       	mul	r23, r20
 616:	33 27       	eor	r19, r19
 618:	a0 0d       	add	r26, r0
 61a:	61 1d       	adc	r22, r1
 61c:	23 1f       	adc	r18, r19
 61e:	84 9f       	mul	r24, r20
 620:	60 0d       	add	r22, r0
 622:	21 1d       	adc	r18, r1
 624:	82 2f       	mov	r24, r18
 626:	76 2f       	mov	r23, r22
 628:	6a 2f       	mov	r22, r26
 62a:	11 24       	eor	r1, r1
 62c:	9f 57       	subi	r25, 0x7F	; 127
 62e:	50 40       	sbci	r21, 0x00	; 0
 630:	9a f0       	brmi	.+38     	; 0x658 <__mulsf3_pse+0x88>
 632:	f1 f0       	breq	.+60     	; 0x670 <__mulsf3_pse+0xa0>
 634:	88 23       	and	r24, r24
 636:	4a f0       	brmi	.+18     	; 0x64a <__mulsf3_pse+0x7a>
 638:	ee 0f       	add	r30, r30
 63a:	ff 1f       	adc	r31, r31
 63c:	bb 1f       	adc	r27, r27
 63e:	66 1f       	adc	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	91 50       	subi	r25, 0x01	; 1
 646:	50 40       	sbci	r21, 0x00	; 0
 648:	a9 f7       	brne	.-22     	; 0x634 <__mulsf3_pse+0x64>
 64a:	9e 3f       	cpi	r25, 0xFE	; 254
 64c:	51 05       	cpc	r21, r1
 64e:	80 f0       	brcs	.+32     	; 0x670 <__mulsf3_pse+0xa0>
 650:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_inf>
 654:	0c 94 8a 03 	jmp	0x714	; 0x714 <__fp_szero>
 658:	5f 3f       	cpi	r21, 0xFF	; 255
 65a:	e4 f3       	brlt	.-8      	; 0x654 <__mulsf3_pse+0x84>
 65c:	98 3e       	cpi	r25, 0xE8	; 232
 65e:	d4 f3       	brlt	.-12     	; 0x654 <__mulsf3_pse+0x84>
 660:	86 95       	lsr	r24
 662:	77 95       	ror	r23
 664:	67 95       	ror	r22
 666:	b7 95       	ror	r27
 668:	f7 95       	ror	r31
 66a:	e7 95       	ror	r30
 66c:	9f 5f       	subi	r25, 0xFF	; 255
 66e:	c1 f7       	brne	.-16     	; 0x660 <__mulsf3_pse+0x90>
 670:	fe 2b       	or	r31, r30
 672:	88 0f       	add	r24, r24
 674:	91 1d       	adc	r25, r1
 676:	96 95       	lsr	r25
 678:	87 95       	ror	r24
 67a:	97 f9       	bld	r25, 7
 67c:	08 95       	ret

0000067e <__fp_inf>:
 67e:	97 f9       	bld	r25, 7
 680:	9f 67       	ori	r25, 0x7F	; 127
 682:	80 e8       	ldi	r24, 0x80	; 128
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	08 95       	ret

0000068a <__fp_nan>:
 68a:	9f ef       	ldi	r25, 0xFF	; 255
 68c:	80 ec       	ldi	r24, 0xC0	; 192
 68e:	08 95       	ret

00000690 <__fp_pscA>:
 690:	00 24       	eor	r0, r0
 692:	0a 94       	dec	r0
 694:	16 16       	cp	r1, r22
 696:	17 06       	cpc	r1, r23
 698:	18 06       	cpc	r1, r24
 69a:	09 06       	cpc	r0, r25
 69c:	08 95       	ret

0000069e <__fp_pscB>:
 69e:	00 24       	eor	r0, r0
 6a0:	0a 94       	dec	r0
 6a2:	12 16       	cp	r1, r18
 6a4:	13 06       	cpc	r1, r19
 6a6:	14 06       	cpc	r1, r20
 6a8:	05 06       	cpc	r0, r21
 6aa:	08 95       	ret

000006ac <__fp_round>:
 6ac:	09 2e       	mov	r0, r25
 6ae:	03 94       	inc	r0
 6b0:	00 0c       	add	r0, r0
 6b2:	11 f4       	brne	.+4      	; 0x6b8 <__fp_round+0xc>
 6b4:	88 23       	and	r24, r24
 6b6:	52 f0       	brmi	.+20     	; 0x6cc <__fp_round+0x20>
 6b8:	bb 0f       	add	r27, r27
 6ba:	40 f4       	brcc	.+16     	; 0x6cc <__fp_round+0x20>
 6bc:	bf 2b       	or	r27, r31
 6be:	11 f4       	brne	.+4      	; 0x6c4 <__fp_round+0x18>
 6c0:	60 ff       	sbrs	r22, 0
 6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__fp_round+0x20>
 6c4:	6f 5f       	subi	r22, 0xFF	; 255
 6c6:	7f 4f       	sbci	r23, 0xFF	; 255
 6c8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ca:	9f 4f       	sbci	r25, 0xFF	; 255
 6cc:	08 95       	ret

000006ce <__fp_split3>:
 6ce:	57 fd       	sbrc	r21, 7
 6d0:	90 58       	subi	r25, 0x80	; 128
 6d2:	44 0f       	add	r20, r20
 6d4:	55 1f       	adc	r21, r21
 6d6:	59 f0       	breq	.+22     	; 0x6ee <__fp_splitA+0x10>
 6d8:	5f 3f       	cpi	r21, 0xFF	; 255
 6da:	71 f0       	breq	.+28     	; 0x6f8 <__fp_splitA+0x1a>
 6dc:	47 95       	ror	r20

000006de <__fp_splitA>:
 6de:	88 0f       	add	r24, r24
 6e0:	97 fb       	bst	r25, 7
 6e2:	99 1f       	adc	r25, r25
 6e4:	61 f0       	breq	.+24     	; 0x6fe <__fp_splitA+0x20>
 6e6:	9f 3f       	cpi	r25, 0xFF	; 255
 6e8:	79 f0       	breq	.+30     	; 0x708 <__fp_splitA+0x2a>
 6ea:	87 95       	ror	r24
 6ec:	08 95       	ret
 6ee:	12 16       	cp	r1, r18
 6f0:	13 06       	cpc	r1, r19
 6f2:	14 06       	cpc	r1, r20
 6f4:	55 1f       	adc	r21, r21
 6f6:	f2 cf       	rjmp	.-28     	; 0x6dc <__fp_split3+0xe>
 6f8:	46 95       	lsr	r20
 6fa:	f1 df       	rcall	.-30     	; 0x6de <__fp_splitA>
 6fc:	08 c0       	rjmp	.+16     	; 0x70e <__fp_splitA+0x30>
 6fe:	16 16       	cp	r1, r22
 700:	17 06       	cpc	r1, r23
 702:	18 06       	cpc	r1, r24
 704:	99 1f       	adc	r25, r25
 706:	f1 cf       	rjmp	.-30     	; 0x6ea <__fp_splitA+0xc>
 708:	86 95       	lsr	r24
 70a:	71 05       	cpc	r23, r1
 70c:	61 05       	cpc	r22, r1
 70e:	08 94       	sec
 710:	08 95       	ret

00000712 <__fp_zero>:
 712:	e8 94       	clt

00000714 <__fp_szero>:
 714:	bb 27       	eor	r27, r27
 716:	66 27       	eor	r22, r22
 718:	77 27       	eor	r23, r23
 71a:	cb 01       	movw	r24, r22
 71c:	97 f9       	bld	r25, 7
 71e:	08 95       	ret

00000720 <_exit>:
 720:	f8 94       	cli

00000722 <__stop_program>:
 722:	ff cf       	rjmp	.-2      	; 0x722 <__stop_program>
